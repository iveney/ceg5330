!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ABORTED	sis_header/atpg.h	/^    REDUNDANT, ABORTED, TESTED, UNTESTED$/;"	e	enum:fault_status_enum
ABS	sis_header/util.h	253;"	d
ABS	util/util.h	249;"	d
ACTIVE	sis_header/espresso.h	121;"	d
ACTIVE_HIGH	sis_header/latch.h	/^    ACTIVE_HIGH, ACTIVE_LOW, RISING_EDGE, FALLING_EDGE, COMBINATIONAL,$/;"	e	enum:latch_synch_enum
ACTIVE_LOW	sis_header/latch.h	/^    ACTIVE_HIGH, ACTIVE_LOW, RISING_EDGE, FALLING_EDGE, COMBINATIONAL,$/;"	e	enum:latch_synch_enum
ADD_COMPLEX_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	252;"	d
ADD_COMPLEX_QUAD_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	255;"	d
ADD_IMAG_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	251;"	d
ADD_IMAG_QUAD_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	254;"	d
ADD_REAL_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	250;"	d
ADD_REAL_QUAD_ELEMENT_TO_MATRIX	sis_header/spMatrix.h	253;"	d
AFTER_CLOCK_EDGE	sis_header/delay.h	76;"	d
ALLOC	sis_header/util.h	239;"	d
ALLOC	sis_header/util.h	241;"	d
ALLOC	sis_header/util.h	51;"	d
ALLOC	sis_header/util.h	63;"	d
ALLOC	util/util.h	235;"	d
ALLOC	util/util.h	237;"	d
ALLOC	util/util.h	51;"	d
ALLOC	util/util.h	63;"	d
ALLOCSIZE	sis_header/enc.h	1;"	d
ALL_TOGETHER	sis_header/ntbdd.h	/^typedef enum {ONE_AT_A_TIME, ALL_TOGETHER} ntbdd_verify_method_t;$/;"	e	enum:__anon3
ANNOTATE	sis_header/spConfig.h	524;"	d
ANSI_H	sis_header/ansi.h	11;"	d
ANSI_H	util/ansi.h	11;"	d
APPROXIMATION_PS	sis_header/power.h	28;"	d
ARGS	sis_header/ansi.h	32;"	d
ARGS	sis_header/ansi.h	34;"	d
ARGS	sis_header/mtr.h	68;"	d
ARGS	sis_header/mtr.h	70;"	d
ARGS	util/ansi.h	32;"	d
ARGS	util/ansi.h	34;"	d
ARRAY_CHECK_BOUND	array.h	12;"	d
ARRAY_DEFAULT_CAPACITY	array.h	18;"	d
ARRAY_H	array/array.h	11;"	d
ARRAY_H	sis_header/array.h	11;"	d
ARRAY_INIT_ZERO	array.h	14;"	d
ARRAY_OFFSET	sis_header/spConfig.h	267;"	d
ARRAY_OUT_OF_MEM	array/array.h	14;"	d
ARRAY_OUT_OF_MEM	sis_header/array.h	14;"	d
ASSERT	debug.h	55;"	d
ASSERT	debug.h	61;"	d
ASSERT	debug.h	72;"	d
ASSERT	debug.h	77;"	d
ASTG_H	sis_header/astg.h	13;"	d
ASYNCH	sis_header/latch.h	/^    ASYNCH, UNKNOWN$/;"	e	enum:latch_synch_enum
ATPG_CLAUSE_GET	sis_header/atpg.h	379;"	d
ATPG_CLAUSE_SET	sis_header/atpg.h	380;"	d
ATPG_GET_VARIABLE	sis_header/atpg.h	381;"	d
AVL_BACKWARD	sis_header/avl.h	41;"	d
AVL_FORWARD	sis_header/avl.h	40;"	d
AVL_INCLUDED	sis_header/avl.h	11;"	d
AddAdmittanceToMatrix	sis_header/spMatrix.h	/^extern  void     AddAdmittanceToMatrix();$/;"	p	signature:()
AddComplexElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddComplexElementToMatrix();$/;"	p	signature:()
AddComplexQuadElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddComplexQuadElementToMatrix();$/;"	p	signature:()
AddElementToMatrix	sis_header/spMatrix.h	/^extern  spREAL  *AddElementToMatrix();$/;"	p	signature:()
AddImagElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddImagElementToMatrix();$/;"	p	signature:()
AddImagQuadElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddImagQuadElementToMatrix();$/;"	p	signature:()
AddOnesToMatrix	sis_header/spMatrix.h	/^extern  void     AddOnesToMatrix();$/;"	p	signature:()
AddQuadToMatrix	sis_header/spMatrix.h	/^extern  void     AddQuadToMatrix();$/;"	p	signature:()
AddRealElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddRealElementToMatrix();$/;"	p	signature:()
AddRealQuadElementToMatrix	sis_header/spMatrix.h	/^extern  void     AddRealQuadElementToMatrix();$/;"	p	signature:()
AllocateMatrix	sis_header/spMatrix.h	/^extern  char    *AllocateMatrix();$/;"	p	signature:()
Array	array.h	/^	Array();	$/;"	p	class:Array	access:public	signature:()
Array	array.h	/^	Array(Array<T>& fromArray); \/\/ copy a new array from fromArray$/;"	p	class:Array	access:public	signature:(Array<T>& fromArray)
Array	array.h	/^	Array(int cap); \/\/ allocate a new array of capacity cap$/;"	p	class:Array	access:public	signature:(int cap)
Array	array.h	/^class Array {$/;"	c
Array	array.h	/^inline Array<T>::Array() {$/;"	f	class:Array	signature:()
Array	array.h	/^inline Array<T>::Array(Array<T> &fromArray) {$/;"	f	class:Array	signature:(Array<T> &fromArray)
Array	array.h	/^inline Array<T>::Array(int cap) {$/;"	f	class:Array	signature:(int cap)
Array::Array	array.h	/^	Array();	$/;"	p	class:Array	access:public	signature:()
Array::Array	array.h	/^	Array(Array<T>& fromArray); \/\/ copy a new array from fromArray$/;"	p	class:Array	access:public	signature:(Array<T>& fromArray)
Array::Array	array.h	/^	Array(int cap); \/\/ allocate a new array of capacity cap$/;"	p	class:Array	access:public	signature:(int cap)
Array::Array	array.h	/^inline Array<T>::Array() {$/;"	f	class:Array	signature:()
Array::Array	array.h	/^inline Array<T>::Array(Array<T> &fromArray) {$/;"	f	class:Array	signature:(Array<T> &fromArray)
Array::Array	array.h	/^inline Array<T>::Array(int cap) {$/;"	f	class:Array	signature:(int cap)
Array::abort	array.h	/^	int abort(int error, int idx); \/\/ show error message and exit$/;"	p	class:Array	access:public	signature:(int error, int idx)
Array::abort	array.h	/^int Array<T>::abort(int error, int idx) {$/;"	f	class:Array	signature:(int error, int idx)
Array::append	array.h	/^	void append(Array<T>& anotherArray); \/\/ append anotherArray to the end of this array$/;"	p	class:Array	access:public	signature:(Array<T>& anotherArray)
Array::append	array.h	/^inline void Array<T>::append(Array<T>& anotherArray) {$/;"	f	class:Array	signature:(Array<T>& anotherArray)
Array::capacity	array.h	/^	int capacity; \/\/ capacity of the array$/;"	m	class:Array	access:private
Array::clear	array.h	/^	void clear(); \/\/ clear the content of the array, but retain the memory allocated$/;"	p	class:Array	access:public	signature:()
Array::clear	array.h	/^inline void Array<T>::clear() {$/;"	f	class:Array	signature:()
Array::cmp	array.h	/^	static int cmp(const void *a_, const void *b_) {$/;"	f	class:Array	access:public	signature:(const void *a_, const void *b_)
Array::find	array.h	/^	int find(T& item, int (*compare)(const void *, const void *) = cmp); \/\/ return the index of item$/;"	p	class:Array	access:public	signature:(T& item, int (*compare)(const void *, const void *) = cmp)
Array::find	array.h	/^inline int Array<T>::find(T& item, int (*compare)(const void *, const void *)) {$/;"	f	class:Array	signature:(T& item, int (*compare)(const void *, const void *))
Array::insert	array.h	/^	void insert(T& item); \/\/ insert item at the end$/;"	p	class:Array	access:public	signature:(T& item)
Array::insert	array.h	/^	void insert(int idx, T& item); \/\/ insert item after the index i$/;"	p	class:Array	access:public	signature:(int idx, T& item)
Array::insert	array.h	/^inline void Array<T>::insert(T& item) {$/;"	f	class:Array	signature:(T& item)
Array::insert	array.h	/^inline void Array<T>::insert(int idx, T& item) {$/;"	f	class:Array	signature:(int idx, T& item)
Array::operator []	array.h	/^	T& operator[] (int idx){$/;"	f	class:Array	access:public	signature:(int idx)
Array::remove	array.h	/^	T& remove(); \/\/ remove the item at the end$/;"	p	class:Array	access:public	signature:()
Array::remove	array.h	/^	T& remove(int idx); \/\/ remove the item at index i$/;"	p	class:Array	access:public	signature:(int idx)
Array::remove	array.h	/^inline T& Array<T>::remove() {$/;"	f	class:Array	signature:()
Array::remove	array.h	/^inline T& Array<T>::remove(int idx) {$/;"	f	class:Array	signature:(int idx)
Array::resize	array.h	/^	void resize(int newsize);$/;"	p	class:Array	access:private	signature:(int newsize)
Array::resize	array.h	/^inline void Array<T>::resize(int newsize) {$/;"	f	class:Array	signature:(int newsize)
Array::size	array.h	/^	int size; \/\/ occupied size$/;"	m	class:Array	access:public
Array::sort	array.h	/^	void sort(int (*compare)(const void *, const void *) = cmp); \/\/ qsort using compare as compare function$/;"	p	class:Array	access:public	signature:(int (*compare)(const void *, const void *) = cmp)
Array::sort	array.h	/^inline void Array<T>::sort(int (*compare)(const void *, const void *)){$/;"	f	class:Array	signature:(int (*compare)(const void *, const void *))
Array::space	array.h	/^	T *space;$/;"	m	class:Array	access:public
Array::~Array	array.h	/^	~Array();$/;"	p	class:Array	access:public	signature:()
Array::~Array	array.h	/^inline Array<T>::~Array() {$/;"	f	class:Array	signature:()
BDD_DFLT_ADHOC_MAX_SIZE	sis_header/bdd.h	105;"	d
BDD_DFLT_ADHOC_ON	sis_header/bdd.h	103;"	d
BDD_DFLT_ADHOC_RESIZE_AT	sis_header/bdd.h	104;"	d
BDD_DFLT_DAEMON	sis_header/bdd.h	107;"	d
BDD_DFLT_GARB_COLLECT_ON	sis_header/bdd.h	106;"	d
BDD_DFLT_INIT_BLOCKS	sis_header/bdd.h	110;"	d
BDD_DFLT_ITE_CONST_MAX_SIZE	sis_header/bdd.h	102;"	d
BDD_DFLT_ITE_CONST_ON	sis_header/bdd.h	100;"	d
BDD_DFLT_ITE_CONST_RESIZE_AT	sis_header/bdd.h	101;"	d
BDD_DFLT_ITE_MAX_SIZE	sis_header/bdd.h	99;"	d
BDD_DFLT_ITE_ON	sis_header/bdd.h	97;"	d
BDD_DFLT_ITE_RESIZE_AT	sis_header/bdd.h	98;"	d
BDD_DFLT_MEMORY_LIMIT	sis_header/bdd.h	108;"	d
BDD_DFLT_NODE_RATIO	sis_header/bdd.h	109;"	d
BDD_MIN_OSDM	sis_header/bdd.h	/^    BDD_MIN_OSDM		\/* one-side DC match *\/$/;"	e	enum:__anon20
BDD_MIN_OSM	sis_header/bdd.h	/^    BDD_MIN_OSM,		\/* one-side match *\/$/;"	e	enum:__anon20
BDD_MIN_TSM	sis_header/bdd.h	/^    BDD_MIN_TSM,		\/* two-side match *\/$/;"	e	enum:__anon20
BDD_NO_LIMIT	sis_header/bdd.h	96;"	d
BDD_REORDER_ANNEALING	sis_header/bdd.h	/^    BDD_REORDER_ANNEALING,$/;"	e	enum:__anon29
BDD_REORDER_GENETIC	sis_header/bdd.h	/^    BDD_REORDER_GENETIC$/;"	e	enum:__anon29
BDD_REORDER_GROUP_SIFT	sis_header/bdd.h	/^    BDD_REORDER_GROUP_SIFT,$/;"	e	enum:__anon29
BDD_REORDER_GROUP_SIFT_CONV	sis_header/bdd.h	/^    BDD_REORDER_GROUP_SIFT_CONV,$/;"	e	enum:__anon29
BDD_REORDER_NONE	sis_header/bdd.h	/^    BDD_REORDER_NONE,$/;"	e	enum:__anon29
BDD_REORDER_RANDOM	sis_header/bdd.h	/^    BDD_REORDER_RANDOM,$/;"	e	enum:__anon29
BDD_REORDER_RANDOM_PIVOT	sis_header/bdd.h	/^    BDD_REORDER_RANDOM_PIVOT,$/;"	e	enum:__anon29
BDD_REORDER_SAME	sis_header/bdd.h	/^    BDD_REORDER_SAME,$/;"	e	enum:__anon29
BDD_REORDER_SIFT	sis_header/bdd.h	/^    BDD_REORDER_SIFT,$/;"	e	enum:__anon29
BDD_REORDER_SIFT_CONVERGE	sis_header/bdd.h	/^    BDD_REORDER_SIFT_CONVERGE,$/;"	e	enum:__anon29
BDD_REORDER_SYMM_SIFT	sis_header/bdd.h	/^    BDD_REORDER_SYMM_SIFT,$/;"	e	enum:__anon29
BDD_REORDER_SYMM_SIFT_CONV	sis_header/bdd.h	/^    BDD_REORDER_SYMM_SIFT_CONV,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW	sis_header/bdd.h	/^    BDD_REORDER_WINDOW,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW2	sis_header/bdd.h	/^    BDD_REORDER_WINDOW2,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW2_CONV	sis_header/bdd.h	/^    BDD_REORDER_WINDOW2_CONV,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW3	sis_header/bdd.h	/^    BDD_REORDER_WINDOW3,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW3_CONV	sis_header/bdd.h	/^    BDD_REORDER_WINDOW3_CONV,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW4	sis_header/bdd.h	/^    BDD_REORDER_WINDOW4,$/;"	e	enum:__anon29
BDD_REORDER_WINDOW4_CONV	sis_header/bdd.h	/^    BDD_REORDER_WINDOW4_CONV,$/;"	e	enum:__anon29
BEFORE_CLOCK_EDGE	sis_header/delay.h	75;"	d
BINATE	sis_header/node.h	/^    POS_UNATE, NEG_UNATE, BINATE, PHASE_UNKNOWN$/;"	e	enum:input_phase_enum
BNODE_ABSDOM_VISITED	bnetwork.h	50;"	d
BNODE_AND	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_AND	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_BUF	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_BUF	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_COMPLEX	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_COMPLEX	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_FANOUT_CONE_MARK	bnetwork.h	49;"	d
BNODE_INV	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_INV	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_IS_ABSDOM	bnetwork.h	53;"	d
BNODE_IS_NOMA	bnetwork.h	52;"	d
BNODE_IS_OMA	bnetwork.h	51;"	d
BNODE_OR	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_OR	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_PI	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_PI	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNODE_PO	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_
BNODE_PO	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	e	enum:BNodeType_t_
BNetwork	bnetwork.h	/^	BNetwork();$/;"	p	class:BNetwork	access:public	signature:()
BNetwork	bnetwork.h	/^class BNetwork: public Graph<BNetworkProperty, BNodeProperty, WireProperty> {$/;"	c	inherits:Graph
BNetwork	bnetwork.h	/^inline BNetwork::BNetwork() {$/;"	f	class:BNetwork	signature:()
BNetwork::BNetwork	bnetwork.h	/^	BNetwork();$/;"	p	class:BNetwork	access:public	signature:()
BNetwork::BNetwork	bnetwork.h	/^inline BNetwork::BNetwork() {$/;"	f	class:BNetwork	signature:()
BNetwork::PI2Node	bnetwork.h	/^	map<string, BNode *> PI2Node;$/;"	m	class:BNetwork	access:public
BNetwork::PO2Node	bnetwork.h	/^	map<string, BNode *> PO2Node;$/;"	m	class:BNetwork	access:public
BNetwork::assignDominator	bnetwork.h	/^	void assignDominator();$/;"	p	class:BNetwork	access:public	signature:()
BNetwork::assignDominator	bnetwork.h	/^inline void BNetwork::assignDominator() {$/;"	f	class:BNetwork	signature:()
BNetwork::assignDominatorRecur	bnetwork.cpp	/^void BNetwork::assignDominatorRecur(BNode *node) {$/;"	f	class:BNetwork	signature:(BNode *node)
BNetwork::assignDominatorRecur	bnetwork.h	/^	void assignDominatorRecur(BNode *node);$/;"	p	class:BNetwork	access:private	signature:(BNode *node)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(char *name, BNode *linkedNode, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, BNode *linkedNode, BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(char *name, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(char *name, char *oName, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, char *oName, BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(string &name, BNode *linkedNode, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(string &name, BNode *linkedNode, BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(string &name, BNodeType type); \/\/ create a new node with "name", allocates new string$/;"	p	class:BNetwork	access:public	signature:(string &name, BNodeType type)
BNetwork::newNode	bnetwork.h	/^	BNode *newNode(string &name, string &oName, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(string &name, string &oName, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(BNodeType type) {$/;"	f	class:BNetwork	signature:(BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, BNode *linkedNode, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, BNode *linkedNode, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, char *oName, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, char *oName, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, BNode *linkedNode, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, BNode *linkedNode, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, BNodeType type)
BNetwork::newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, string &oName, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, string &oName, BNodeType type)
BNetwork::removeNode	bnetwork.h	/^	void removeNode(BNode *node);$/;"	p	class:BNetwork	access:public	signature:(BNode *node)
BNetwork::removeNode	bnetwork.h	/^	void removeNode(char *name);$/;"	p	class:BNetwork	access:public	signature:(char *name)
BNetwork::removeNode	bnetwork.h	/^	void removeNode(string &name); \/\/ remove the node with "name" from the graph$/;"	p	class:BNetwork	access:public	signature:(string &name)
BNetwork::removeNode	bnetwork.h	/^inline void BNetwork::removeNode(BNode *node) {$/;"	f	class:BNetwork	signature:(BNode *node)
BNetwork::removeNode	bnetwork.h	/^inline void BNetwork::removeNode(char *name) {$/;"	f	class:BNetwork	signature:(char *name)
BNetwork::removeNode	bnetwork.h	/^inline void BNetwork::removeNode(string &name) {$/;"	f	class:BNetwork	signature:(string &name)
BNetwork::~BNetwork	bnetwork.h	/^	~BNetwork();$/;"	p	class:BNetwork	access:public	signature:()
BNetwork::~BNetwork	bnetwork.h	/^inline BNetwork::~BNetwork() {$/;"	f	class:BNetwork	signature:()
BNetworkProperty	bnetwork.h	/^class BNetworkProperty {$/;"	c
BNode	bnetwork.h	/^typedef Node<BNodeProperty, WireProperty> BNode;$/;"	t
BNodeProperty	bnetwork.h	/^	BNodeProperty() {$/;"	f	class:BNodeProperty	access:public	signature:()
BNodeProperty	bnetwork.h	/^class BNodeProperty {$/;"	c
BNodeProperty	bnode.h	/^class BNodeProperty {$/;"	c
BNodeProperty::BNodeProperty	bnetwork.h	/^	BNodeProperty() {$/;"	f	class:BNodeProperty	access:public	signature:()
BNodeProperty::absDom	bnetwork.h	/^	Array<BNode *> absDom;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::flag	bnetwork.h	/^	int flag;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::ignodes	bnetwork.h	/^	IGAssociateProperty ignodes;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::linkedNode	bnetwork.h	/^	BNode *linkedNode;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::oName	bnetwork.h	/^	string *oName;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::type	bnetwork.h	/^	BNodeType type;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::value	bnetwork.h	/^	int value;$/;"	m	class:BNodeProperty	access:public
BNodeProperty::~BNodeProperty	bnetwork.h	/^	~BNodeProperty() {$/;"	f	class:BNodeProperty	access:public	signature:()
BNodeType	bnetwork.h	/^typedef enum BNodeType_ BNodeType;$/;"	t	typeref:enum:BNodeType_
BNodeType_	bnetwork.h	/^enum BNodeType_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	g
BNodeType_t	bnode.h	/^typedef enum BNodeType_t_ BNodeType_t;$/;"	t	typeref:enum:BNodeType_t_
BNodeType_t_	bnode.h	/^enum BNodeType_t_ {BNODE_PI, BNODE_PO, BNODE_AND, BNODE_OR, BNODE_INV, BNODE_BUF, BNODE_COMPLEX};$/;"	g
BPI	sis_header/espresso.h	27;"	d
BPI	sis_header/espresso.h	55;"	d
BSD_SIS	util/cpu_time.c	17;"	d	file:
BSD_SIS	util/cpu_time.c	21;"	d	file:
BUFSIZE	util/saveimage.c	30;"	d	file:
BULL_METHOD	sis_header/seqbdd.h	/^    BULL_METHOD,$/;"	e	enum:__anon8
BddFn	sis_header/seqbdd.h	/^typedef bdd_t *(*BddFn)();$/;"	t
CAPACITANCE	sis_header/power.h	35;"	d
CAP_FACTOR	sis_header/power.h	55;"	d
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS	= $(INCLUDE) -g$/;"	m
CLOCK	sis_header/clock.h	18;"	d
CLOCK_ABSOLUTE_VALUE	sis_header/clock.h	/^    CLOCK_NOMINAL_POSITION, CLOCK_ABSOLUTE_VALUE,$/;"	e	enum:clock_param_enum
CLOCK_DATA	sis_header/stg.h	18;"	d
CLOCK_H	sis_header/clock.h	11;"	d
CLOCK_LOWER_RANGE	sis_header/clock.h	/^    CLOCK_LOWER_RANGE, CLOCK_UPPER_RANGE$/;"	e	enum:clock_param_enum
CLOCK_NOMINAL_POSITION	sis_header/clock.h	/^    CLOCK_NOMINAL_POSITION, CLOCK_ABSOLUTE_VALUE,$/;"	e	enum:clock_param_enum
CLOCK_NOT_SET	sis_header/clock.h	23;"	d
CLOCK_SLOT	sis_header/clock.h	17;"	d
CLOCK_UPPER_RANGE	sis_header/clock.h	/^    CLOCK_LOWER_RANGE, CLOCK_UPPER_RANGE$/;"	e	enum:clock_param_enum
COMBINATIONAL	sis_header/latch.h	/^    ACTIVE_HIGH, ACTIVE_LOW, RISING_EDGE, FALLING_EDGE, COMBINATIONAL,$/;"	e	enum:latch_synch_enum
COMBINATIONAL	sis_header/power.h	24;"	d
COMMAND_H	sis_header/command.h	11;"	d
COMPL	sis_header/espresso.h	346;"	d
COMPL_TIME	sis_header/espresso.h	368;"	d
CONDITION	sis_header/spConfig.h	279;"	d
CONSISTENCY_METHOD	sis_header/seqbdd.h	/^    CONSISTENCY_METHOD,$/;"	e	enum:__anon8
CONSISTENT	imply.h	7;"	d
CONST	sis_header/mtr.h	51;"	d
CONST	sis_header/mtr.h	53;"	d
CONST	sis_header/mtr.h	55;"	d
CONSTRAINTS_type	sis_header/espresso.h	338;"	d
CONTROL	sis_header/atpg.h	/^    CONTROL, OBSERVE$/;"	e	enum:redund_type_enum
COVERED	sis_header/espresso.h	123;"	d
CUBELISTSIZE	sis_header/espresso.h	324;"	d
CUBE_TEMP	sis_header/espresso.h	464;"	d
CURRENT	sis_header/stg.h	11;"	d
CUTSET	sis_header/maxflow.h	13;"	d
CXXFLAGS	Makefile	/^CXXFLAGS	= $(CFLAGS)$/;"	m
CleanMatrix	sis_header/spMatrix.h	/^extern  void     CleanMatrix();$/;"	p	signature:()
ClearMatrix	sis_header/spMatrix.h	/^extern  void     ClearMatrix();$/;"	p	signature:()
ClearMatrixError	sis_header/spMatrix.h	/^extern  int      ClearMatrixError();$/;"	p	signature:()
D	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
D	sis_header/node.h	/^    pset_family D;		\/* dc-set -- currently unused *\/$/;"	m	struct:node_struct	access:public
DAEMON_ALLOC	sis_header/node.h	/^    DAEMON_ALLOC=0, DAEMON_FREE=1, DAEMON_INVALID=2, DAEMON_DUP=3$/;"	e	enum:node_daemon_type_enum
DAEMON_DUP	sis_header/node.h	/^    DAEMON_ALLOC=0, DAEMON_FREE=1, DAEMON_INVALID=2, DAEMON_DUP=3$/;"	e	enum:node_daemon_type_enum
DAEMON_FREE	sis_header/node.h	/^    DAEMON_ALLOC=0, DAEMON_FREE=1, DAEMON_INVALID=2, DAEMON_DUP=3$/;"	e	enum:node_daemon_type_enum
DAEMON_INVALID	sis_header/node.h	/^    DAEMON_ALLOC=0, DAEMON_FREE=1, DAEMON_INVALID=2, DAEMON_DUP=3$/;"	e	enum:node_daemon_type_enum
DASH	sis_header/espresso.h	408;"	d
DCSIMPLIFY	sis_header/minimize.h	12;"	d
DEBUG	igl.h	12;"	d
DEBUG	sis_header/spConfig.h	282;"	d
DEBUG_FILE	debug.h	33;"	d
DEBUG_SHOW_TRACE	bnetwork.h	8;"	d
DEBUG_SHOW_TRACE	bnode.h	6;"	d
DEBUG_SHOW_TRACE	graph.h	11;"	d
DEBUG_SHOW_TRACE	ignetwork.h	7;"	d
DEBUG_SHOW_TRACE	imply.cpp	7;"	d	file:
DEBUG_SHOW_TRACE	imply.noforced.cpp	7;"	d	file:
DEBUG_SHOW_TRACE	node.h	9;"	d
DEBUG_SHOW_TRACE	rewire.cpp	8;"	d	file:
DEBUG_SHOW_TRACE	rewire.h	7;"	d
DEBUG_SHOW_TRACE	wire.h	6;"	d
DECL_SORT	sis_header/lsort.h	155;"	d
DECL_SORT	sis_header/lsort.h	71;"	d
DECL_SORT1	sis_header/lsort.h	156;"	d
DECL_SORT1	sis_header/lsort.h	67;"	d
DECL_UNIQ	sis_header/luniq.h	46;"	d
DECL_UNIQ	sis_header/luniq.h	96;"	d
DECOMP_H	sis_header/decomp.h	11;"	d
DEFAULT_LIST_SIZE	imply.cpp	12;"	d	file:
DEFAULT_LIST_SIZE	imply.noforced.cpp	12;"	d	file:
DEFAULT_LIST_SIZE	rewire.cpp	12;"	d	file:
DEFAULT_PARTITION	sis_header/spConfig.h	401;"	d
DEFAULT_THRESHOLD	sis_header/spConfig.h	392;"	d
DELAY_ADD_WIRE_LOAD	sis_header/delay.h	/^    DELAY_ADD_WIRE_LOAD, DELAY_WIRE_LOAD_SLOPE,$/;"	e	enum:delay_param_enum
DELAY_ARRIVAL_FALL	sis_header/delay.h	/^    DELAY_ARRIVAL_RISE, DELAY_ARRIVAL_FALL,$/;"	e	enum:delay_param_enum
DELAY_ARRIVAL_RISE	sis_header/delay.h	/^    DELAY_ARRIVAL_RISE, DELAY_ARRIVAL_FALL,$/;"	e	enum:delay_param_enum
DELAY_BLOCK_FALL	sis_header/delay.h	/^    DELAY_BLOCK_RISE, DELAY_BLOCK_FALL,$/;"	e	enum:delay_param_enum
DELAY_BLOCK_RISE	sis_header/delay.h	/^    DELAY_BLOCK_RISE, DELAY_BLOCK_FALL,$/;"	e	enum:delay_param_enum
DELAY_DEFAULT_ARRIVAL_FALL	sis_header/delay.h	/^    DELAY_DEFAULT_ARRIVAL_RISE, DELAY_DEFAULT_ARRIVAL_FALL, $/;"	e	enum:delay_param_enum
DELAY_DEFAULT_ARRIVAL_RISE	sis_header/delay.h	/^    DELAY_DEFAULT_ARRIVAL_RISE, DELAY_DEFAULT_ARRIVAL_FALL, $/;"	e	enum:delay_param_enum
DELAY_DEFAULT_DRIVE_FALL	sis_header/delay.h	/^    DELAY_DEFAULT_DRIVE_RISE, DELAY_DEFAULT_DRIVE_FALL, $/;"	e	enum:delay_param_enum
DELAY_DEFAULT_DRIVE_RISE	sis_header/delay.h	/^    DELAY_DEFAULT_DRIVE_RISE, DELAY_DEFAULT_DRIVE_FALL, $/;"	e	enum:delay_param_enum
DELAY_DEFAULT_MAX_INPUT_LOAD	sis_header/delay.h	/^    DELAY_DEFAULT_MAX_INPUT_LOAD$/;"	e	enum:delay_param_enum
DELAY_DEFAULT_OUTPUT_LOAD	sis_header/delay.h	/^    DELAY_DEFAULT_OUTPUT_LOAD,$/;"	e	enum:delay_param_enum
DELAY_DEFAULT_REQUIRED_FALL	sis_header/delay.h	/^    DELAY_DEFAULT_REQUIRED_RISE, DELAY_DEFAULT_REQUIRED_FALL,$/;"	e	enum:delay_param_enum
DELAY_DEFAULT_REQUIRED_RISE	sis_header/delay.h	/^    DELAY_DEFAULT_REQUIRED_RISE, DELAY_DEFAULT_REQUIRED_FALL,$/;"	e	enum:delay_param_enum
DELAY_DRIVE_FALL	sis_header/delay.h	/^    DELAY_DRIVE_RISE, DELAY_DRIVE_FALL,$/;"	e	enum:delay_param_enum
DELAY_DRIVE_RISE	sis_header/delay.h	/^    DELAY_DRIVE_RISE, DELAY_DRIVE_FALL,$/;"	e	enum:delay_param_enum
DELAY_H	sis_header/delay.h	11;"	d
DELAY_INPUT_LOAD	sis_header/delay.h	/^    DELAY_INPUT_LOAD, DELAY_MAX_INPUT_LOAD,$/;"	e	enum:delay_param_enum
DELAY_MAX_INPUT_LOAD	sis_header/delay.h	/^    DELAY_INPUT_LOAD, DELAY_MAX_INPUT_LOAD,$/;"	e	enum:delay_param_enum
DELAY_MODEL_LIBRARY	sis_header/delay.h	/^    DELAY_MODEL_UNIT, DELAY_MODEL_LIBRARY, DELAY_MODEL_UNIT_FANOUT,$/;"	e	enum:delay_model_enum
DELAY_MODEL_MAPPED	sis_header/delay.h	/^    DELAY_MODEL_MAPPED, DELAY_MODEL_UNKNOWN, DELAY_MODEL_TDC$/;"	e	enum:delay_model_enum
DELAY_MODEL_TDC	sis_header/delay.h	/^    DELAY_MODEL_MAPPED, DELAY_MODEL_UNKNOWN, DELAY_MODEL_TDC$/;"	e	enum:delay_model_enum
DELAY_MODEL_UNIT	sis_header/delay.h	/^    DELAY_MODEL_UNIT, DELAY_MODEL_LIBRARY, DELAY_MODEL_UNIT_FANOUT,$/;"	e	enum:delay_model_enum
DELAY_MODEL_UNIT_FANOUT	sis_header/delay.h	/^    DELAY_MODEL_UNIT, DELAY_MODEL_LIBRARY, DELAY_MODEL_UNIT_FANOUT,$/;"	e	enum:delay_model_enum
DELAY_MODEL_UNKNOWN	sis_header/delay.h	/^    DELAY_MODEL_MAPPED, DELAY_MODEL_UNKNOWN, DELAY_MODEL_TDC$/;"	e	enum:delay_model_enum
DELAY_NOT_SET	sis_header/delay.h	79;"	d
DELAY_NOT_SET_STRING	sis_header/delay.h	81;"	d
DELAY_OUTPUT_LOAD	sis_header/delay.h	/^    DELAY_OUTPUT_LOAD,$/;"	e	enum:delay_param_enum
DELAY_PHASE	sis_header/delay.h	/^    DELAY_PHASE,$/;"	e	enum:delay_param_enum
DELAY_PHASE_INVERTING	sis_header/delay.h	84;"	d
DELAY_PHASE_NEITHER	sis_header/delay.h	86;"	d
DELAY_PHASE_NONINVERTING	sis_header/delay.h	85;"	d
DELAY_PHASE_NOT_GIVEN	sis_header/delay.h	82;"	d
DELAY_REQUIRED_FALL	sis_header/delay.h	/^    DELAY_REQUIRED_RISE, DELAY_REQUIRED_FALL,$/;"	e	enum:delay_param_enum
DELAY_REQUIRED_RISE	sis_header/delay.h	/^    DELAY_REQUIRED_RISE, DELAY_REQUIRED_FALL,$/;"	e	enum:delay_param_enum
DELAY_VALUE_NOT_GIVEN	sis_header/delay.h	80;"	d
DELAY_WIRE_LOAD_SLOPE	sis_header/delay.h	/^    DELAY_ADD_WIRE_LOAD, DELAY_WIRE_LOAD_SLOPE,$/;"	e	enum:delay_param_enum
DELETE	sis_header/spConfig.h	269;"	d
DETERMINANT	sis_header/spConfig.h	277;"	d
DFS_ORDER	sis_header/order.h	/^typedef enum {DFS_ORDER, RANDOM_ORDER} order_method_t;$/;"	e	enum:__anon15
DIAGONAL_PIVOTING	sis_header/spConfig.h	266;"	d
DIAG_PIVOTING_AS_DEFAULT	sis_header/spConfig.h	393;"	d
DIRECT_COMPARE	sis_header/lsort.h	158;"	d
DIRECT_COMPARE	sis_header/luniq.h	95;"	d
DISJOINT	sis_header/espresso.h	504;"	d
DISJOINT	sis_header/espresso.h	507;"	d
DISJOINT	sis_header/espresso.h	509;"	d
DOCUMENTATION	sis_header/spConfig.h	275;"	d
DR_type	sis_header/espresso.h	342;"	d
DYNAMIC	sis_header/power.h	27;"	d
D_type	sis_header/espresso.h	333;"	d
DeallocateMatrix	sis_header/spMatrix.h	/^extern  void     DeallocateMatrix();$/;"	p	signature:()
DecomposeMatrix	sis_header/spMatrix.h	/^extern  int      DecomposeMatrix();$/;"	p	signature:()
DeleteRowAndColFromMatrix	sis_header/spMatrix.h	/^extern  void     DeleteRowAndColFromMatrix();$/;"	p	signature:()
Determinant	sis_header/spMatrix.h	/^extern  void     Determinant();$/;"	p	signature:()
EDGE_INDEX	sis_header/stg.h	19;"	d
ELEMENTS_PER_ALLOCATION	sis_header/spConfig.h	396;"	d
ENCODING_STRING	sis_header/stg.h	23;"	d
EQNTOTT_type	sis_header/espresso.h	336;"	d
ESP_PFI	sis_header/espresso.h	/^typedef int (*ESP_PFI)();$/;"	t
ESSEN	sis_header/espresso.h	347;"	d
ESSEN_TIME	sis_header/espresso.h	370;"	d
EXACT	sis_header/espresso.h	356;"	d
EXACT_PS	sis_header/power.h	29;"	d
EXEC	sis_header/espresso.h	413;"	d
EXECUTE	sis_header/espresso.h	417;"	d
EXEC_S	sis_header/espresso.h	415;"	d
EXIT	debug.h	53;"	d
EXIT	debug.h	60;"	d
EXIT	debug.h	71;"	d
EXIT	debug.h	76;"	d
EXPAND	sis_header/espresso.h	348;"	d
EXPAND1	sis_header/espresso.h	349;"	d
EXPANDABLE	sis_header/spConfig.h	263;"	d
EXPAND_TIME	sis_header/espresso.h	371;"	d
EXPANSION_FACTOR	sis_header/spConfig.h	398;"	d
EXTERN	sis_header/ansi.h	44;"	d
EXTERN	sis_header/ansi.h	46;"	d
EXTERN	sis_header/mtr.h	61;"	d
EXTERN	sis_header/mtr.h	63;"	d
EXTERN	util/ansi.h	44;"	d
EXTERN	util/ansi.h	46;"	d
EXTERNAL_OUTPUT_NAME	sis_header/seqbdd.h	73;"	d
Edge	edge.h	/^class Edge {$/;"	c
Edge::ep	edge.h	/^	EP ep;$/;"	m	class:Edge	access:public
Edge::fanin	edge.h	/^	Node<NP, EP> *fanin;$/;"	m	class:Edge	access:public
Edge::fanout	edge.h	/^	Node<NP, EP> *fanout;$/;"	m	class:Edge	access:public
Element1	sis_header/spMatrix.h	/^{   spREAL    *Element1       ;$/;"	m	struct:spTemplate	access:public
Element2	sis_header/spMatrix.h	/^    spREAL    *Element2       ;$/;"	m	struct:spTemplate	access:public
Element3Negated	sis_header/spMatrix.h	/^    spREAL    *Element3Negated;$/;"	m	struct:spTemplate	access:public
Element4Negated	sis_header/spMatrix.h	/^    spREAL    *Element4Negated;$/;"	m	struct:spTemplate	access:public
F	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
F	sis_header/node.h	/^    pset_family F;		\/* on-set *\/$/;"	m	struct:node_struct	access:public
FACTORED_FORM	sis_header/power.h	32;"	d
FACTOR_H	sis_header/factor.h	11;"	d
FALLING_EDGE	sis_header/latch.h	/^    ACTIVE_HIGH, ACTIVE_LOW, RISING_EDGE, FALLING_EDGE, COMBINATIONAL,$/;"	e	enum:latch_synch_enum
FALL_TRANSITION	sis_header/clock.h	21;"	d
FALSE	sis_header/espresso.h	247;"	d
FALSE	sis_header/maxflow.h	23;"	d
FATAL	sis_header/spMatrix.h	124;"	d
FDR_type	sis_header/espresso.h	343;"	d
FD_type	sis_header/espresso.h	340;"	d
FFLAGS	Makefile	/^FFLAGS  = -g$/;"	m
FIELD	sis_header/lsort.h	157;"	d
FIELD	sis_header/luniq.h	94;"	d
FORTRAN	sis_header/spConfig.h	281;"	d
FREE	sis_header/util.h	56;"	d
FREE	sis_header/util.h	67;"	d
FREE	util/util.h	56;"	d
FREE	util/util.h	67;"	d
FREQ	sis_header/luniq.h	92;"	d
FR_type	sis_header/espresso.h	341;"	d
FULL	sis_header/spConfig.h	528;"	d
F_type	sis_header/espresso.h	332;"	d
GASP	sis_header/espresso.h	350;"	d
GCD_H	sis_header/gcd.h	11;"	d
GETDIC	sis_header/enc.h	23;"	d
GETINPUT	sis_header/espresso.h	395;"	d
GETOUTPUT	sis_header/espresso.h	397;"	d
GETSET	sis_header/espresso.h	153;"	d
GET_ATPG_ID	sis_header/atpg.h	383;"	d
GEXPAND_TIME	sis_header/espresso.h	374;"	d
GIRRED_TIME	sis_header/espresso.h	375;"	d
GRAPHICS_H	sis_header/graphics.h	11;"	d
GRAPH_PFG	sis_header/graph.h	/^typedef gGeneric (*GRAPH_PFG)();$/;"	t
GRAPH_PFV	sis_header/graph.h	/^typedef void (*GRAPH_PFV)();$/;"	t
GREDUCE_TIME	sis_header/espresso.h	376;"	d
GetMatrixSize	sis_header/spMatrix.h	/^extern  int      GetMatrixSize();$/;"	p	signature:()
Graph	graph.h	/^	Graph();$/;"	p	class:Graph	access:public	signature:()
Graph	graph.h	/^	Graph(Array<string>& names);$/;"	p	class:Graph	access:public	signature:(Array<string>& names)
Graph	graph.h	/^	Graph(Graph<GP, NP, EP> &graph);$/;"	p	class:Graph	access:public	signature:(Graph<GP, NP, EP> &graph)
Graph	graph.h	/^class Graph {$/;"	c
Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph() {$/;"	f	class:Graph	signature:()
Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph(Array<string>& names) {$/;"	f	class:Graph	signature:(Array<string>& names)
Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph(Graph &graph) {$/;"	f	class:Graph	signature:(Graph &graph)
Graph::Graph	graph.h	/^	Graph();$/;"	p	class:Graph	access:public	signature:()
Graph::Graph	graph.h	/^	Graph(Array<string>& names);$/;"	p	class:Graph	access:public	signature:(Array<string>& names)
Graph::Graph	graph.h	/^	Graph(Graph<GP, NP, EP> &graph);$/;"	p	class:Graph	access:public	signature:(Graph<GP, NP, EP> &graph)
Graph::Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph() {$/;"	f	class:Graph	signature:()
Graph::Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph(Array<string>& names) {$/;"	f	class:Graph	signature:(Array<string>& names)
Graph::Graph	graph.h	/^inline Graph<GP, NP, EP>::Graph(Graph &graph) {$/;"	f	class:Graph	signature:(Graph &graph)
Graph::addEdge	graph.h	/^	void addEdge(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
Graph::addEdge	graph.h	/^	void addEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep)
Graph::addEdge	graph.h	/^	void addEdge(char *faninName, char *fanoutName, EP &ep); \/\/ add and remove edges$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName, EP &ep)
Graph::addEdge	graph.h	/^	void addEdge(string &faninName, string &fanoutName, EP &ep);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName, EP &ep)
Graph::addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
Graph::addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep)
Graph::addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(char *faninName, char *fanoutName, EP &ep) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName, EP &ep)
Graph::addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(string &faninName, string &fanoutName, EP &ep) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName, EP &ep)
Graph::findNode	graph.h	/^	Node<NP, EP> *findNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
Graph::findNode	graph.h	/^	Node<NP, EP> *findNode(string &name); \/\/ return the node with "name"$/;"	p	class:Graph	access:public	signature:(string &name)
Graph::findNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::findNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
Graph::findNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::findNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
Graph::getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
Graph::getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Node<NP, EP> *fanin, Node<NP, EP> *fanout);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
Graph::getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Node<NP, EP> *fanin, int fanoutIdx);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, int fanoutIdx)
Graph::getEdgeProperty	graph.h	/^	EP &getEdgeProperty(char *faninName, char *fanoutName); \/\/ get the edge property of the edge$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName)
Graph::getEdgeProperty	graph.h	/^	EP &getEdgeProperty(string &faninName, string &fanoutName);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName)
Graph::getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
Graph::getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Node<NP, EP> *fanin, Node<NP, EP> *fanout) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
Graph::getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Node<NP, EP> *fanin, int fanoutIdx) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, int fanoutIdx)
Graph::getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(char *faninName, char *fanoutName) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName)
Graph::getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(string &faninName, string &fanoutName) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName)
Graph::getNewName	graph.h	/^	static string *getNewName();$/;"	p	class:Graph	access:private	signature:()
Graph::getNodeProperty	graph.h	/^	NP &getNodeProperty(Node<NP, EP> *node) {return node->p;};$/;"	f	class:Graph	access:public	signature:(Node<NP, EP> *node)
Graph::getNodeProperty	graph.h	/^	NP &getNodeProperty(char *name) {return getNodeProperty(findNode(name));};$/;"	f	class:Graph	access:public	signature:(char *name)
Graph::getNodeProperty	graph.h	/^	NP &getNodeProperty(string &name) {return getNodeProperty(findNode(name));};$/;"	f	class:Graph	access:public	signature:(string &name)
Graph::name2Node	graph.h	/^	map<string, Node<NP, EP> *> name2Node;$/;"	m	class:Graph	access:public
Graph::nameCount	graph.h	/^	static int nameCount;$/;"	m	class:Graph	access:public
Graph::nameCount	graph.h	/^int Graph<GP, NP, EP>::nameCount = 0;$/;"	m	class:Graph
Graph::newNode	graph.h	/^	Node<NP, EP> *newNode();$/;"	p	class:Graph	access:public	signature:()
Graph::newNode	graph.h	/^	Node<NP, EP> *newNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
Graph::newNode	graph.h	/^	Node<NP, EP> *newNode(string &name); \/\/ create a new node with "name", allocates new string$/;"	p	class:Graph	access:public	signature:(string &name)
Graph::newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode() {$/;"	f	class:Graph	signature:()
Graph::newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
Graph::newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
Graph::nodeIsMadeupName	graph.h	/^	int nodeIsMadeupName(string &name, int *value);$/;"	p	class:Graph	access:private	signature:(string &name, int *value)
Graph::nodeIsMadeupName	graph.h	/^inline int Graph<GP, NP, EP>::nodeIsMadeupName(string &name, int *value) {$/;"	f	class:Graph	signature:(string &name, int *value)
Graph::p	graph.h	/^	GP p;$/;"	m	class:Graph	access:public
Graph::removeEdge	graph.h	/^	void removeEdge(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
Graph::removeEdge	graph.h	/^	void removeEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
Graph::removeEdge	graph.h	/^	void removeEdge(char *faninName, char *fanoutName);$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName)
Graph::removeEdge	graph.h	/^	void removeEdge(string &faninName, string &fanoutName);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName)
Graph::removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
Graph::removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
Graph::removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(char *faninName, char *fanoutName) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName)
Graph::removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(string &faninName, string &fanoutName) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName)
Graph::removeNode	graph.h	/^	void removeNode(Node<NP, EP> *node);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *node)
Graph::removeNode	graph.h	/^	void removeNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
Graph::removeNode	graph.h	/^	void removeNode(string &name); \/\/ remove the node with "name" from the graph$/;"	p	class:Graph	access:public	signature:(string &name)
Graph::removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(Node<NP, EP> *node) {$/;"	f	class:Graph	signature:(Node<NP, EP> *node)
Graph::removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
Graph::removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
Graph::renameNode	graph.h	/^	void renameNode(Node<NP, EP> *node, string &newName);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *node, string &newName)
Graph::renameNode	graph.h	/^	void renameNode(char *oldName, char *newName); \/\/ rename the node$/;"	p	class:Graph	access:public	signature:(char *oldName, char *newName)
Graph::renameNode	graph.h	/^	void renameNode(string &oldName, string &newName);$/;"	p	class:Graph	access:public	signature:(string &oldName, string &newName)
Graph::renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(Node<NP, EP> *node, string &newName) {$/;"	f	class:Graph	signature:(Node<NP, EP> *node, string &newName)
Graph::renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(char *oldName, char *newName) {$/;"	f	class:Graph	signature:(char *oldName, char *newName)
Graph::renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(string &oldName, string &newName) {$/;"	f	class:Graph	signature:(string &oldName, string &newName)
Graph::~Graph	graph.h	/^	~Graph();$/;"	p	class:Graph	access:public	signature:()
Graph::~Graph	graph.h	/^inline Graph<GP, NP, EP>::~Graph(){$/;"	f	class:Graph	signature:()
HAS_STDARG	sis_header/ansi.h	50;"	d
HAS_STDARG	util/ansi.h	50;"	d
HAVE_GETRLIMIT	util/datalimit.c	10;"	d	file:
HAVE_SYS_RESOURCE_H	util/datalimit.c	4;"	d	file:
HAVE_SYS_TIME_H	util/datalimit.c	7;"	d	file:
HUGE	sis_header/util.h	296;"	d
HUGE	util/util.h	292;"	d
HUGE_VAL	sis_header/util.h	298;"	d
HUGE_VAL	util/util.h	294;"	d
IGAllowBackwardPropagation	imply.cpp	/^void IGAllowBackwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGAllowBackwardPropagation	imply.h	/^void IGAllowBackwardPropagation(IGNode *node);$/;"	p	signature:(IGNode *node)
IGAllowBackwardPropagation	imply.noforced.cpp	/^void IGAllowBackwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGAllowForwardPropagation	imply.cpp	/^void IGAllowForwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGAllowForwardPropagation	imply.h	/^void IGAllowForwardPropagation(IGNode *node);$/;"	p	signature:(IGNode *node)
IGAllowForwardPropagation	imply.noforced.cpp	/^void IGAllowForwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGAssociateProperty	bnetwork.h	/^	IGAssociateProperty() {$/;"	f	class:IGAssociateProperty	access:public	signature:()
IGAssociateProperty	bnetwork.h	/^class IGAssociateProperty {$/;"	c
IGAssociateProperty::IGAssociateProperty	bnetwork.h	/^	IGAssociateProperty() {$/;"	f	class:IGAssociateProperty	access:public	signature:()
IGAssociateProperty::associatedNodes	bnetwork.h	/^	Array<IGNode *> associatedNodes;$/;"	m	class:IGAssociateProperty	access:public
IGAssociateProperty::f0	bnetwork.h	/^	IGNode *f0;$/;"	m	class:IGAssociateProperty	access:public
IGAssociateProperty::f1	bnetwork.h	/^	IGNode *f1;$/;"	m	class:IGAssociateProperty	access:public
IGAssociateProperty::g0	bnetwork.h	/^	IGNode *g0;$/;"	m	class:IGAssociateProperty	access:public
IGAssociateProperty::g1	bnetwork.h	/^	IGNode *g1;$/;"	m	class:IGAssociateProperty	access:public
IGAssociateProperty::~IGAssociateProperty	bnetwork.h	/^	~IGAssociateProperty() { }; \/\/ do nothing$/;"	f	class:IGAssociateProperty	access:public	signature:()
IGClearImplyStack	imply.cpp	/^void IGClearImplyStack() {$/;"	f	signature:()
IGClearImplyStack	imply.h	/^void IGClearImplyStack();$/;"	p	signature:()
IGClearImplyStack	imply.noforced.cpp	/^void IGClearImplyStack() {$/;"	f	signature:()
IGEDGE_B	ignetwork.h	/^enum IGEdgeType_ {IGEDGE_F, IGEDGE_B, IGEDGE_O};$/;"	e	enum:IGEdgeType_
IGEDGE_F	ignetwork.h	/^enum IGEdgeType_ {IGEDGE_F, IGEDGE_B, IGEDGE_O};$/;"	e	enum:IGEdgeType_
IGEDGE_O	ignetwork.h	/^enum IGEdgeType_ {IGEDGE_F, IGEDGE_B, IGEDGE_O};$/;"	e	enum:IGEdgeType_
IGEdgeProperty	ignetwork.h	/^class IGEdgeProperty {$/;"	c
IGEdgeProperty::type	ignetwork.h	/^	IGEdgeType type;$/;"	m	class:IGEdgeProperty	access:public
IGEdgeType	ignetwork.h	/^typedef enum IGEdgeType_ IGEdgeType;$/;"	t	typeref:enum:IGEdgeType_
IGEdgeType_	ignetwork.h	/^enum IGEdgeType_ {IGEDGE_F, IGEDGE_B, IGEDGE_O};$/;"	g
IGEndImply	imply.cpp	/^void IGEndImply() {$/;"	f	signature:()
IGEndImply	imply.h	/^void IGEndImply();$/;"	p	signature:()
IGEndImply	imply.noforced.cpp	/^void IGEndImply() {$/;"	f	signature:()
IGImply	imply.cpp	/^int IGImply(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
IGImply	imply.h	/^int IGImply(int mask, Array<IGNode *> &markedNodes);$/;"	p	signature:(int mask, Array<IGNode *> &markedNodes)
IGImply	imply.noforced.cpp	/^int IGImply(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
IGImplyType	ignetwork.h	/^typedef enum IGImplyType_ IGImplyType;$/;"	t	typeref:enum:IGImplyType_
IGImplyType_	ignetwork.h	/^enum IGImplyType_ {IGNODE_G0, IGNODE_G1, IGNODE_F0, IGNODE_F1};$/;"	g
IGL_CONCAT	igl.h	29;"	d
IGL_FORALL_VAR	igl.h	30;"	d
IGMarkFaultyNodes	imply.cpp	/^void IGMarkFaultyNodes(Array<IGNode *> &initNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes)
IGMarkFaultyNodes	imply.h	/^void IGMarkFaultyNodes(Array<IGNode *> &initNodes);$/;"	p	signature:(Array<IGNode *> &initNodes)
IGMarkFaultyNodes	imply.noforced.cpp	/^void IGMarkFaultyNodes(Array<IGNode *> &initNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes)
IGMarkInitNodes	imply.cpp	/^int IGMarkInitNodes(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGMarkInitNodes	imply.h	/^int IGMarkInitNodes(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes);$/;"	p	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGMarkInitNodes	imply.noforced.cpp	/^int IGMarkInitNodes(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGMarkInitNodesForced	imply.cpp	/^int IGMarkInitNodesForced(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGMarkInitNodesForced	imply.h	/^int IGMarkInitNodesForced(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes);$/;"	p	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGMarkInitNodesForced	imply.noforced.cpp	/^int IGMarkInitNodesForced(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes, Array<IGNode *> &markedNodes)
IGNODE_AND	ignetwork.h	/^enum IGNodeType_ {IGNODE_AND, IGNODE_SIGNAL};$/;"	e	enum:IGNodeType_
IGNODE_F0	ignetwork.h	/^enum IGImplyType_ {IGNODE_G0, IGNODE_G1, IGNODE_F0, IGNODE_F1};$/;"	e	enum:IGImplyType_
IGNODE_F1	ignetwork.h	/^enum IGImplyType_ {IGNODE_G0, IGNODE_G1, IGNODE_F0, IGNODE_F1};$/;"	e	enum:IGImplyType_
IGNODE_G0	ignetwork.h	/^enum IGImplyType_ {IGNODE_G0, IGNODE_G1, IGNODE_F0, IGNODE_F1};$/;"	e	enum:IGImplyType_
IGNODE_G1	ignetwork.h	/^enum IGImplyType_ {IGNODE_G0, IGNODE_G1, IGNODE_F0, IGNODE_F1};$/;"	e	enum:IGImplyType_
IGNODE_SIGNAL	ignetwork.h	/^enum IGNodeType_ {IGNODE_AND, IGNODE_SIGNAL};$/;"	e	enum:IGNodeType_
IGNetwork	ignetwork.h	/^	IGNetwork(BNetwork *bnet);$/;"	p	class:IGNetwork	access:public	signature:(BNetwork *bnet)
IGNetwork	ignetwork.h	/^class IGNetwork: public Graph<IGNetworkProperty, IGNodeProperty, IGEdgeProperty> {$/;"	c	inherits:Graph
IGNetwork	ignetwork.h	/^inline IGNetwork::IGNetwork(BNetwork *bnet_) {$/;"	f	class:IGNetwork	signature:(BNetwork *bnet_)
IGNetwork::IGNetwork	ignetwork.h	/^	IGNetwork(BNetwork *bnet);$/;"	p	class:IGNetwork	access:public	signature:(BNetwork *bnet)
IGNetwork::IGNetwork	ignetwork.h	/^inline IGNetwork::IGNetwork(BNetwork *bnet_) {$/;"	f	class:IGNetwork	signature:(BNetwork *bnet_)
IGNetwork::addBNodeSignal	ignetwork.h	/^	void addBNodeSignal(BNode *node);$/;"	p	class:IGNetwork	access:private	signature:(BNode *node)
IGNetwork::addBNodeSignal	ignetwork.h	/^inline void IGNetwork::addBNodeSignal(BNode *node) {$/;"	f	class:IGNetwork	signature:(BNode *node)
IGNetwork::addSignal	ignetwork.h	/^	void addSignal(string &name, IGNode *ignodes[]);$/;"	p	class:IGNetwork	access:private	signature:(string &name, IGNode *ignodes[])
IGNetwork::addSignal	ignetwork.h	/^inline void IGNetwork::addSignal(string &name, IGNode *ignodes[]) {$/;"	f	class:IGNetwork	signature:(string &name, IGNode *ignodes[])
IGNetwork::bnet	ignetwork.h	/^	BNetwork *bnet;$/;"	m	class:IGNetwork	access:public
IGNetwork::buildAnd2Subgraph	ignetwork.h	/^	void buildAnd2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
IGNetwork::buildAnd2Subgraph	ignetwork.h	/^inline void IGNetwork::buildAnd2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate) {$/;"	f	class:IGNetwork	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
IGNetwork::buildBufSubgraph	ignetwork.h	/^	void buildBufSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
IGNetwork::buildBufSubgraph	ignetwork.h	/^inline void IGNetwork::buildBufSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_) {$/;"	f	class:IGNetwork	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
IGNetwork::buildImplySubgraph	ignetwork.h	/^	void buildImplySubgraph(BNode *node);$/;"	p	class:IGNetwork	access:private	signature:(BNode *node)
IGNetwork::buildImplySubgraph	ignetwork.h	/^inline void IGNetwork::buildImplySubgraph(BNode *node) {$/;"	f	class:IGNetwork	signature:(BNode *node)
IGNetwork::buildInvSubgraph	ignetwork.h	/^	void buildInvSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
IGNetwork::buildInvSubgraph	ignetwork.h	/^inline void IGNetwork::buildInvSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_) {$/;"	f	class:IGNetwork	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
IGNetwork::buildOr2Subgraph	ignetwork.h	/^	void buildOr2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
IGNetwork::buildOr2Subgraph	ignetwork.h	/^inline void IGNetwork::buildOr2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate) {$/;"	f	class:IGNetwork	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
IGNetwork::~IGNetwork	ignetwork.h	/^	~IGNetwork();$/;"	p	class:IGNetwork	access:public	signature:()
IGNetwork::~IGNetwork	ignetwork.h	/^inline IGNetwork::~IGNetwork() {$/;"	f	class:IGNetwork	signature:()
IGNetworkProperty	ignetwork.h	/^class IGNetworkProperty{$/;"	c
IGNode	bnetwork.h	/^typedef Node<IGNodeProperty, IGEdgeProperty> IGNode;$/;"	t
IGNode	ignetwork.h	/^typedef Node<IGNodeProperty, IGEdgeProperty> IGNode;$/;"	t
IGNodeProperty	ignetwork.h	/^	IGNodeProperty() { mark = 0; forced = 0; flag[0] = 0; flag[1] = 0; flag[2] = 0; flag[3] = 0;};$/;"	f	class:IGNodeProperty	access:public	signature:()
IGNodeProperty	ignetwork.h	/^class IGNodeProperty {$/;"	c
IGNodeProperty::IGNodeProperty	ignetwork.h	/^	IGNodeProperty() { mark = 0; forced = 0; flag[0] = 0; flag[1] = 0; flag[2] = 0; flag[3] = 0;};$/;"	f	class:IGNodeProperty	access:public	signature:()
IGNodeProperty::bnode	ignetwork.h	/^	BNode *bnode;$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::flag	ignetwork.h	/^	int flag[4]; \/\/ flag[0] flag[1]: inStack, inStackForced. flag[2]: unjustified, flag[3]: justified$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::forced	ignetwork.h	/^	int forced;$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::implyType	ignetwork.h	/^	IGImplyType implyType;$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::link	ignetwork.h	/^	Array<IGNode *> link; \/\/ point to the conflicting nodes for SIGNAL nodes, nodes in the same clause for AND nodes$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::mark	ignetwork.h	/^	int mark;$/;"	m	class:IGNodeProperty	access:public
IGNodeProperty::type	ignetwork.h	/^	IGNodeType type;$/;"	m	class:IGNodeProperty	access:public
IGNodeType	ignetwork.h	/^typedef enum IGNodeType_ IGNodeType;$/;"	t	typeref:enum:IGNodeType_
IGNodeType_	ignetwork.h	/^enum IGNodeType_ {IGNODE_AND, IGNODE_SIGNAL};$/;"	g
IGResetImply	imply.cpp	/^void IGResetImply(Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &markedNodes)
IGResetImply	imply.h	/^void IGResetImply(Array<IGNode *> &markedNodes);$/;"	p	signature:(Array<IGNode *> &markedNodes)
IGResetImply	imply.noforced.cpp	/^void IGResetImply(Array<IGNode *> &markedNodes) {$/;"	f	signature:(Array<IGNode *> &markedNodes)
IGRlearnImply	imply.cpp	/^int IGRlearnImply(int r, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int r, Array<IGNode *> &markedNodes)
IGRlearnImply	imply.h	/^int IGRlearnImply(int r, Array<IGNode *> &markedNodes);$/;"	p	signature:(int r, Array<IGNode *> &markedNodes)
IGRlearnImply	imply.noforced.cpp	/^int IGRlearnImply(int r, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int r, Array<IGNode *> &markedNodes)
IGStackElement	imply.cpp	/^typedef struct IGStackElement_ IGStackElement;$/;"	t	typeref:struct:IGStackElement_	file:
IGStackElement	imply.noforced.cpp	/^typedef struct IGStackElement_ IGStackElement;$/;"	t	typeref:struct:IGStackElement_	file:
IGStackElement_	imply.cpp	/^struct IGStackElement_ {$/;"	s	file:
IGStackElement_	imply.noforced.cpp	/^struct IGStackElement_ {$/;"	s	file:
IGStackElement_::forced	imply.cpp	/^	int forced;$/;"	m	struct:IGStackElement_	file:	access:public
IGStackElement_::forced	imply.noforced.cpp	/^	int forced;$/;"	m	struct:IGStackElement_	file:	access:public
IGStackElement_::node	imply.cpp	/^	IGNode *node;$/;"	m	struct:IGStackElement_	file:	access:public
IGStackElement_::node	imply.noforced.cpp	/^	IGNode *node;$/;"	m	struct:IGStackElement_	file:	access:public
IGStopBackwardPropagation	imply.cpp	/^void IGStopBackwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGStopBackwardPropagation	imply.h	/^void IGStopBackwardPropagation(IGNode *node);$/;"	p	signature:(IGNode *node)
IGStopBackwardPropagation	imply.noforced.cpp	/^void IGStopBackwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGStopForwardPropagation	imply.cpp	/^void IGStopForwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGStopForwardPropagation	imply.h	/^void IGStopForwardPropagation(IGNode *node);$/;"	p	signature:(IGNode *node)
IGStopForwardPropagation	imply.noforced.cpp	/^void IGStopForwardPropagation(IGNode *node) {$/;"	f	signature:(IGNode *node)
IGUnmarkFaultyNodes	imply.cpp	/^void IGUnmarkFaultyNodes(Array<IGNode *> &initNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes)
IGUnmarkFaultyNodes	imply.h	/^void IGUnmarkFaultyNodes(Array<IGNode *> &initNodes);$/;"	p	signature:(Array<IGNode *> &initNodes)
IGUnmarkFaultyNodes	imply.noforced.cpp	/^void IGUnmarkFaultyNodes(Array<IGNode *> &initNodes) {$/;"	f	signature:(Array<IGNode *> &initNodes)
IG_INSTACK	ignetwork.h	31;"	d
IG_INSTACKFORCED	ignetwork.h	32;"	d
IG_JUSTIFIED	ignetwork.h	34;"	d
IG_UNJUSTIFIED	ignetwork.h	33;"	d
ILL_CONDITIONED	sis_header/spMatrix.h	119;"	d
IN	sis_header/espresso.h	327;"	d
INCLUDE	Makefile	/^INCLUDE	= -I$(SISHDR)$/;"	m
INCONSISTENT	imply.h	8;"	d
INFINITY	sis_header/sis.h	85;"	d
INITIALIZE	sis_header/spConfig.h	265;"	d
INIT_MASK	imply.cpp	11;"	d	file:
INIT_MASK	imply.noforced.cpp	11;"	d	file:
INIT_SIZE	array/array.c	16;"	d	file:
INIT_STATE_OUTPUT_NAME	sis_header/seqbdd.h	72;"	d
INLABEL	sis_header/espresso.h	392;"	d
INLINEset_and	sis_header/espresso.h	171;"	d
INLINEset_and	sis_header/espresso.h	194;"	d
INLINEset_clear	sis_header/espresso.h	169;"	d
INLINEset_clear	sis_header/espresso.h	189;"	d
INLINEset_copy	sis_header/espresso.h	168;"	d
INLINEset_copy	sis_header/espresso.h	187;"	d
INLINEset_diff	sis_header/espresso.h	173;"	d
INLINEset_diff	sis_header/espresso.h	200;"	d
INLINEset_fill	sis_header/espresso.h	170;"	d
INLINEset_fill	sis_header/espresso.h	191;"	d
INLINEset_merge	sis_header/espresso.h	177;"	d
INLINEset_merge	sis_header/espresso.h	217;"	d
INLINEset_ndiff	sis_header/espresso.h	174;"	d
INLINEset_ndiff	sis_header/espresso.h	203;"	d
INLINEset_or	sis_header/espresso.h	172;"	d
INLINEset_or	sis_header/espresso.h	197;"	d
INLINEset_xnor	sis_header/espresso.h	176;"	d
INLINEset_xnor	sis_header/espresso.h	208;"	d
INLINEset_xnor	sis_header/espresso.h	213;"	d
INLINEset_xor	sis_header/espresso.h	175;"	d
INLINEset_xor	sis_header/espresso.h	207;"	d
INLINEset_xor	sis_header/espresso.h	210;"	d
INLINEsetp_disjoint	sis_header/espresso.h	180;"	d
INLINEsetp_disjoint	sis_header/espresso.h	223;"	d
INLINEsetp_equal	sis_header/espresso.h	182;"	d
INLINEsetp_equal	sis_header/espresso.h	226;"	d
INLINEsetp_implies	sis_header/espresso.h	178;"	d
INLINEsetp_implies	sis_header/espresso.h	220;"	d
INOUT	sis_header/espresso.h	329;"	d
INPUT_STRING	sis_header/stg.h	26;"	d
INTERNAL	sis_header/node.h	/^    PRIMARY_INPUT, PRIMARY_OUTPUT, INTERNAL, UNASSIGNED$/;"	e	enum:node_type_enum
IN_ORDER	array/arr_main.c	50;"	d	file:
IO_H	sis_header/io.h	11;"	d
IRRED	sis_header/espresso.h	351;"	d
IRRED1	sis_header/espresso.h	360;"	d
IRRED_TIME	sis_header/espresso.h	372;"	d
ITE_cache	sis_header/bdd.h	/^	unsigned int ITE_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
ITE_cache	sis_header/bdd.h	/^    } ITE_cache,$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
ITE_const_cache	sis_header/bdd.h	/^	unsigned int ITE_const_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
ITE_const_cache	sis_header/bdd.h	/^      ITE_const_cache,$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
ITE_constant_ops	sis_header/bdd.h	/^      ITE_constant_ops,$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
ITE_ops	sis_header/bdd.h	/^    } ITE_ops,$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
IntFn	sis_header/seqbdd.h	/^typedef int (*IntFn)();$/;"	t
KISS_type	sis_header/espresso.h	337;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	446;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	455;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	465;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	475;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	485;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	495;"	d
LARGEST_LONG_INTEGER	sis_header/spConfig.h	505;"	d
LARGEST_REAL	sis_header/spConfig.h	443;"	d
LARGEST_REAL	sis_header/spConfig.h	452;"	d
LARGEST_REAL	sis_header/spConfig.h	462;"	d
LARGEST_REAL	sis_header/spConfig.h	472;"	d
LARGEST_REAL	sis_header/spConfig.h	482;"	d
LARGEST_REAL	sis_header/spConfig.h	492;"	d
LARGEST_REAL	sis_header/spConfig.h	502;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	445;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	454;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	464;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	474;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	484;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	494;"	d
LARGEST_SHORT_INTEGER	sis_header/spConfig.h	504;"	d
LDFLAGS	Makefile	/^LDFLAGS	= -ltermcap -lreadline -g$/;"	m
LIBRARY_H	sis_header/library.h	13;"	d
LIBS	Makefile	/^LIBS	= $(SIS)\/lib\/libsis.a$/;"	m
LIMIT	sis_header/enc.h	2;"	d
LINTFLAGS	Makefile	/^LINTFLAGS = $(INCLUDE)$/;"	m
LINTLIBS	Makefile	/^LINTLIBS= $(SIS)\/lib\/llib-lsis.ln	$/;"	m
LOGBPI	sis_header/espresso.h	59;"	d
LOGBPI	sis_header/espresso.h	61;"	d
LONG_NAME_MODE	sis_header/node.h	/^    LONG_NAME_MODE, SHORT_NAME_MODE$/;"	e	enum:name_mode_enum
LOOP	sis_header/espresso.h	96;"	d
LOOPCOPY	sis_header/espresso.h	103;"	d
LOOPCOPY	sis_header/espresso.h	99;"	d
LOOPINIT	sis_header/espresso.h	109;"	d
LS_AFTER	sis_header/list.h	43;"	d
LS_ASSERT	sis_header/network.h	19;"	d
LS_BADPARAM	sis_header/list.h	37;"	d
LS_BADSTATE	sis_header/list.h	36;"	d
LS_BEFORE	sis_header/list.h	42;"	d
LS_DEFINED	sis_header/list.h	21;"	d
LS_DELETE	sis_header/list.h	45;"	d
LS_NH	sis_header/list.h	52;"	d
LS_NIL	sis_header/list.h	34;"	d
LS_NOMORE	sis_header/list.h	38;"	d
LS_OK	sis_header/list.h	40;"	d
LS_PFLSG	sis_header/list.h	/^typedef lsGeneric (*LS_PFLSG)();$/;"	t
LS_STOP	sis_header/list.h	44;"	d
MACHINE	Makefile	/^MACHINE = linux$/;"	m
MACHINE_RESOLUTION	sis_header/spConfig.h	442;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	451;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	461;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	471;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	481;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	491;"	d
MACHINE_RESOLUTION	sis_header/spConfig.h	501;"	d
MAP_H	sis_header/map.h	13;"	d
MAX	igl.h	26;"	d
MAX	sis_header/util.h	256;"	d
MAX	util/util.h	252;"	d
MAXFLOW_H	sis_header/maxflow.h	11;"	d
MAXINT	sis_header/util.h	301;"	d
MAXINT	util/util.h	297;"	d
MAXSTR	main.stdio.cpp	/^const int MAXSTR=80;$/;"	v
MAX_BIT	imply.cpp	31;"	d	file:
MAX_BIT	imply.noforced.cpp	31;"	d	file:
MAX_MARKOWITZ_TIES	sis_header/spConfig.h	399;"	d
MAYBE	sis_header/espresso.h	252;"	d
MERGE1	sis_header/enc.h	25;"	d
MERGE2	sis_header/enc.h	26;"	d
MF_CUTSET	sis_header/maxflow.h	/^struct MF_CUTSET {$/;"	s
MF_CUTSET::capacity	sis_header/maxflow.h	/^    int *capacity;$/;"	m	struct:MF_CUTSET	access:public
MF_CUTSET::from_node	sis_header/maxflow.h	/^    char **from_node;$/;"	m	struct:MF_CUTSET	access:public
MF_CUTSET::graph	sis_header/maxflow.h	/^    mfgptr graph;$/;"	m	struct:MF_CUTSET	access:public
MF_CUTSET::narcs	sis_header/maxflow.h	/^    int narcs;$/;"	m	struct:MF_CUTSET	access:public
MF_CUTSET::to_node	sis_header/maxflow.h	/^    char **to_node;$/;"	m	struct:MF_CUTSET	access:public
MF_EDGE	sis_header/maxflow.h	/^struct MF_EDGE {$/;"	s
MF_EDGE::capacity	sis_header/maxflow.h	/^    int capacity;         \/* capacity of the edge *\/$/;"	m	struct:MF_EDGE	access:public
MF_EDGE::flag	sis_header/maxflow.h	/^    int flag;             \/* flag word *\/$/;"	m	struct:MF_EDGE	access:public
MF_EDGE::flow	sis_header/maxflow.h	/^    int flow;             \/* flow of the edge *\/$/;"	m	struct:MF_EDGE	access:public
MF_EDGE::inode	sis_header/maxflow.h	/^    mfnptr inode;         \/* edge incident from this node *\/$/;"	m	struct:MF_EDGE	access:public
MF_EDGE::onode	sis_header/maxflow.h	/^    mfnptr onode;         \/* edge incident to this node *\/$/;"	m	struct:MF_EDGE	access:public
MF_GRAPH	sis_header/maxflow.h	/^struct MF_GRAPH {$/;"	s
MF_GRAPH::first_label_element	sis_header/maxflow.h	/^    mfnptr first_label_element; \/* first element in the scan list *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::last_label_element	sis_header/maxflow.h	/^    mfnptr last_label_element;  \/* last element in the scan list *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::max_num_of_nptr	sis_header/maxflow.h	/^    int max_num_of_nptr;        \/* total no. of available node pointers *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::nlist	sis_header/maxflow.h	/^    mfnptr *nlist;              \/* node list *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::node_table	sis_header/maxflow.h	/^    st_table *node_table;	\/* hash table of nodes *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::num_of_node	sis_header/maxflow.h	/^    int num_of_node;            \/* total no. of nodes in the circuit *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::sink_node	sis_header/maxflow.h	/^    mfnptr sink_node;           \/* sink node *\/$/;"	m	struct:MF_GRAPH	access:public
MF_GRAPH::source_node	sis_header/maxflow.h	/^    mfnptr source_node;         \/* source node *\/$/;"	m	struct:MF_GRAPH	access:public
MF_NODE	sis_header/maxflow.h	/^struct MF_NODE {$/;"	s
MF_NODE::direction	sis_header/maxflow.h	/^    short direction;      \/* direction of the link: 1 = from; -1 = to *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::flag	sis_header/maxflow.h	/^    short flag;           \/* flag word *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::fname	sis_header/maxflow.h	/^    char *fname;          \/* store the fictitious node name pointer *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::in_edge	sis_header/maxflow.h	/^    mfeptr *in_edge;      \/* edges incident to this node *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::increment_flow	sis_header/maxflow.h	/^    int increment_flow;   \/* the increment flow *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::max_nout	sis_header/maxflow.h	/^    short max_nout;       \/* total no. of available out_edge *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::name	sis_header/maxflow.h	/^    char *name;           \/* asciz name of node *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::nfict	sis_header/maxflow.h	/^    short nfict;          \/* no. of fictitious nodes using same name *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::nin	sis_header/maxflow.h	/^    short nin;            \/* number of in_edges *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::nout	sis_header/maxflow.h	/^    short nout;           \/* number of out_edges *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::out_edge	sis_header/maxflow.h	/^    mfeptr *out_edge;     \/* edges incident from this node *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::path_edge	sis_header/maxflow.h	/^    mfeptr path_edge;     \/* augmenting path edge *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::path_node	sis_header/maxflow.h	/^    mfnptr path_node;     \/* augmenting path node *\/$/;"	m	struct:MF_NODE	access:public
MF_NODE::pnext	sis_header/maxflow.h	/^    mfnptr pnext;         \/* general usage link *\/$/;"	m	struct:MF_NODE	access:public
MIN	igl.h	22;"	d
MIN	sis_header/util.h	259;"	d
MIN	util/util.h	255;"	d
MINCOV	sis_header/espresso.h	357;"	d
MINCOV1	sis_header/espresso.h	358;"	d
MINCOV_TIME	sis_header/espresso.h	378;"	d
MINIMIZE_H	sis_header/minimize.h	15;"	d
MINIMUM_ALLOCATED_SIZE	sis_header/spConfig.h	397;"	d
MISC	Makefile	/^MISC    = $(P).1 $(P).doc Makefile$/;"	m
MMalloc	sis_header/util.h	/^EXTERN char *MMalloc ARGS((long));$/;"	p	signature:(long)
MMalloc	util/safe_mem.c	/^MMalloc(size)$/;"	f
MMalloc	util/safe_mem.c	/^extern char *MMalloc();$/;"	p	file:
MMalloc	util/util.h	/^EXTERN char *MMalloc ARGS((long));$/;"	p	signature:(long)
MMfree	sis_header/util.h	/^EXTERN void MMfree ARGS((char *));$/;"	p	signature:(char *)
MMfree	util/safe_mem.c	/^MMfree(obj)$/;"	f
MMfree	util/util.h	/^EXTERN void MMfree ARGS((char *));$/;"	p	signature:(char *)
MMoutOfMemory	util/safe_mem.c	/^void (*MMoutOfMemory)() = MMout_of_memory;$/;"	v
MMout_of_memory	sis_header/util.h	/^EXTERN void MMout_of_memory ARGS((long));$/;"	p	signature:(long)
MMout_of_memory	util/safe_mem.c	/^MMout_of_memory(size)$/;"	f
MMout_of_memory	util/safe_mem.c	/^extern void MMout_of_memory();$/;"	p	file:
MMout_of_memory	util/util.h	/^EXTERN void MMout_of_memory ARGS((long));$/;"	p	signature:(long)
MMrealloc	sis_header/util.h	/^EXTERN char *MMrealloc ARGS((char *, long));$/;"	p	signature:(char *, long)
MMrealloc	util/safe_mem.c	/^MMrealloc(obj, size)$/;"	f
MMrealloc	util/safe_mem.c	/^extern char *MMrealloc();$/;"	p	file:
MMrealloc	util/util.h	/^EXTERN char *MMrealloc ARGS((char *, long));$/;"	p	signature:(char *, long)
MODIFIED_MARKOWITZ	sis_header/spConfig.h	268;"	d
MODIFIED_NODAL	sis_header/spConfig.h	271;"	d
MTR_DEFAULT	sis_header/mtr.h	87;"	d
MTR_FIXED	sis_header/mtr.h	90;"	d
MTR_INLINE	sis_header/mtr.h	75;"	d
MTR_INLINE	sis_header/mtr.h	82;"	d
MTR_MAXHIGH	sis_header/mtr.h	100;"	d
MTR_MAXHIGH	sis_header/mtr.h	98;"	d
MTR_NEWNODE	sis_header/mtr.h	91;"	d
MTR_RESET	sis_header/mtr.h	142;"	d
MTR_SET	sis_header/mtr.h	141;"	d
MTR_SOFT	sis_header/mtr.h	89;"	d
MTR_TERMINAL	sis_header/mtr.h	88;"	d
MTR_TEST	sis_header/mtr.h	143;"	d
MTR_UNUSED	sis_header/mtr.h	77;"	d
MTR_UNUSED	sis_header/mtr.h	79;"	d
MTR_UNUSED	sis_header/mtr.h	83;"	d
MULTIPLICATION	sis_header/spConfig.h	276;"	d
MV_REDUCE_TIME	sis_header/espresso.h	379;"	d
MatrixElementCount	sis_header/spMatrix.h	/^extern  int      MatrixElementCount();$/;"	p	signature:()
MatrixError	sis_header/spMatrix.h	/^extern  int      MatrixError();$/;"	p	signature:()
MatrixFillinCount	sis_header/spMatrix.h	/^extern  int      MatrixFillinCount();$/;"	p	signature:()
MatrixMultiply	sis_header/spMatrix.h	/^extern  void     MatrixMultiply();$/;"	p	signature:()
MatrixRoundoffError	sis_header/spMatrix.h	/^extern  spREAL   MatrixRoundoffError();$/;"	p	signature:()
MtrHalfWord	sis_header/mtr.h	/^typedef unsigned int   MtrHalfWord;$/;"	t
MtrHalfWord	sis_header/mtr.h	/^typedef unsigned short MtrHalfWord;$/;"	t
MtrNode	sis_header/mtr.h	/^typedef struct MtrNode {$/;"	s
MtrNode	sis_header/mtr.h	/^} MtrNode;$/;"	t	typeref:struct:MtrNode
MtrNode::child	sis_header/mtr.h	/^    struct MtrNode *child;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
MtrNode::elder	sis_header/mtr.h	/^    struct MtrNode *elder;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
MtrNode::flags	sis_header/mtr.h	/^    MtrHalfWord flags;$/;"	m	struct:MtrNode	access:public
MtrNode::index	sis_header/mtr.h	/^    MtrHalfWord index;$/;"	m	struct:MtrNode	access:public
MtrNode::low	sis_header/mtr.h	/^    MtrHalfWord low;$/;"	m	struct:MtrNode	access:public
MtrNode::parent	sis_header/mtr.h	/^    struct MtrNode *parent;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
MtrNode::size	sis_header/mtr.h	/^    MtrHalfWord size;$/;"	m	struct:MtrNode	access:public
MtrNode::younger	sis_header/mtr.h	/^    struct MtrNode *younger;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
Mtr_AllocNode	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_AllocNode ARGS(());$/;"	p	signature:()
Mtr_CopyTree	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_CopyTree ARGS((MtrNode *node, int expansion));$/;"	p	signature:(MtrNode *node, int expansion)
Mtr_CreateFirstChild	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_CreateFirstChild ARGS((MtrNode *parent));$/;"	p	signature:(MtrNode *parent)
Mtr_CreateLastChild	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_CreateLastChild ARGS((MtrNode *parent));$/;"	p	signature:(MtrNode *parent)
Mtr_DeallocNode	sis_header/mtr.h	/^EXTERN void Mtr_DeallocNode ARGS((MtrNode *node));$/;"	p	signature:(MtrNode *node)
Mtr_DissolveGroup	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_DissolveGroup ARGS((MtrNode *group));$/;"	p	signature:(MtrNode *group)
Mtr_FindGroup	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_FindGroup ARGS((MtrNode *root, unsigned int low, unsigned int high));$/;"	p	signature:(MtrNode *root, unsigned int low, unsigned int high)
Mtr_FreeTree	sis_header/mtr.h	/^EXTERN void Mtr_FreeTree ARGS((MtrNode *node));$/;"	p	signature:(MtrNode *node)
Mtr_InitGroupTree	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_InitGroupTree ARGS((int lower, int size));$/;"	p	signature:(int lower, int size)
Mtr_InitTree	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_InitTree ARGS(());$/;"	p	signature:()
Mtr_MakeFirstChild	sis_header/mtr.h	/^EXTERN void Mtr_MakeFirstChild ARGS((MtrNode *parent, MtrNode *child));$/;"	p	signature:(MtrNode *parent, MtrNode *child)
Mtr_MakeGroup	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_MakeGroup ARGS((MtrNode *root, unsigned int low, unsigned int high, unsigned int flags));$/;"	p	signature:(MtrNode *root, unsigned int low, unsigned int high, unsigned int flags)
Mtr_MakeLastChild	sis_header/mtr.h	/^EXTERN void Mtr_MakeLastChild ARGS((MtrNode *parent, MtrNode *child));$/;"	p	signature:(MtrNode *parent, MtrNode *child)
Mtr_MakeNextSibling	sis_header/mtr.h	/^EXTERN void Mtr_MakeNextSibling ARGS((MtrNode *first, MtrNode *second));$/;"	p	signature:(MtrNode *first, MtrNode *second)
Mtr_PrintGroups	sis_header/mtr.h	/^EXTERN void Mtr_PrintGroups ARGS((MtrNode *root, int silent));$/;"	p	signature:(MtrNode *root, int silent)
Mtr_PrintTree	sis_header/mtr.h	/^EXTERN void Mtr_PrintTree ARGS((MtrNode *node));$/;"	p	signature:(MtrNode *node)
Mtr_ReadGroups	sis_header/mtr.h	/^EXTERN MtrNode * Mtr_ReadGroups ARGS((FILE *fp, int nleaves));$/;"	p	signature:(FILE *fp, int nleaves)
Mtr_SwapGroups	sis_header/mtr.h	/^EXTERN int Mtr_SwapGroups ARGS((MtrNode *first, MtrNode *second));$/;"	p	signature:(MtrNode *first, MtrNode *second)
NEG_UNATE	sis_header/node.h	/^    POS_UNATE, NEG_UNATE, BINATE, PHASE_UNKNOWN$/;"	e	enum:input_phase_enum
NELEM	sis_header/espresso.h	108;"	d
NETWORK_H	sis_header/network.h	11;"	d
NEXT	sis_header/lsort.h	159;"	d
NEXT	sis_header/lsort.h	63;"	d
NEXT	sis_header/luniq.h	42;"	d
NEXT	sis_header/luniq.h	93;"	d
NIL	sis_header/util.h	42;"	d
NIL	util/util.h	42;"	d
NOCOMP	sis_header/minimize.h	10;"	d
NODEINDEX_H	sis_header/nodeindex.h	11;"	d
NODE_0	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_1	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_AND	sis_header/node.h	/^    NODE_AND, NODE_OR, NODE_COMPLEX, NODE_UNDEFINED$/;"	e	enum:node_function_enum
NODE_BUF	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_COMPLEX	sis_header/node.h	/^    NODE_AND, NODE_OR, NODE_COMPLEX, NODE_UNDEFINED$/;"	e	enum:node_function_enum
NODE_H	sis_header/node.h	11;"	d
NODE_INV	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_OR	sis_header/node.h	/^    NODE_AND, NODE_OR, NODE_COMPLEX, NODE_UNDEFINED$/;"	e	enum:node_function_enum
NODE_PI	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_PO	sis_header/node.h	/^    NODE_PI, NODE_PO, NODE_0, NODE_1, NODE_BUF, NODE_INV, $/;"	e	enum:node_function_enum
NODE_SIM_DCSIMP	sis_header/node.h	/^    NODE_SIM_EXACT, NODE_SIM_EXACT_LITS, NODE_SIM_DCSIMP,$/;"	e	enum:node_sim_enum
NODE_SIM_ESPRESSO	sis_header/node.h	/^    NODE_SIM_SCC, NODE_SIM_SIMPCOMP, NODE_SIM_ESPRESSO,$/;"	e	enum:node_sim_enum
NODE_SIM_EXACT	sis_header/node.h	/^    NODE_SIM_EXACT, NODE_SIM_EXACT_LITS, NODE_SIM_DCSIMP,$/;"	e	enum:node_sim_enum
NODE_SIM_EXACT_LITS	sis_header/node.h	/^    NODE_SIM_EXACT, NODE_SIM_EXACT_LITS, NODE_SIM_DCSIMP,$/;"	e	enum:node_sim_enum
NODE_SIM_NOCOMP	sis_header/node.h	/^    NODE_SIM_NOCOMP, NODE_SIM_SNOCOMP$/;"	e	enum:node_sim_enum
NODE_SIM_SCC	sis_header/node.h	/^    NODE_SIM_SCC, NODE_SIM_SIMPCOMP, NODE_SIM_ESPRESSO,$/;"	e	enum:node_sim_enum
NODE_SIM_SIMPCOMP	sis_header/node.h	/^    NODE_SIM_SCC, NODE_SIM_SIMPCOMP, NODE_SIM_ESPRESSO,$/;"	e	enum:node_sim_enum
NODE_SIM_SNOCOMP	sis_header/node.h	/^    NODE_SIM_NOCOMP, NODE_SIM_SNOCOMP$/;"	e	enum:node_sim_enum
NODE_UNDEFINED	sis_header/node.h	/^    NODE_AND, NODE_OR, NODE_COMPLEX, NODE_UNDEFINED$/;"	e	enum:node_function_enum
NONE	sis_header/spConfig.h	526;"	d
NONESSEN	sis_header/espresso.h	120;"	d
NONREDUNDANT	rewire.h	15;"	d
NONREDUNDANT	rewire_c.h	6;"	d
NO_ERROR	sis_header/spMatrix.h	116;"	d
NO_INLINE	sis_header/espresso.h	26;"	d
NO_MEMORY	sis_header/spMatrix.h	121;"	d
NTBDD_H	sis_header/ntbdd.h	2;"	d
NULLARGS	sis_header/ansi.h	38;"	d
NULLARGS	sis_header/ansi.h	40;"	d
NULLARGS	util/ansi.h	38;"	d
NULLARGS	util/ansi.h	40;"	d
NUMINPUTS	sis_header/espresso.h	386;"	d
NUMOUTPUTS	sis_header/espresso.h	387;"	d
NUM_G_SLOTS	sis_header/stg.h	20;"	d
NUM_INPUTS	sis_header/stg.h	12;"	d
NUM_OUTPUTS	sis_header/stg.h	13;"	d
NUM_PRODUCTS	sis_header/stg.h	14;"	d
NUM_STATES	sis_header/stg.h	15;"	d
NUM_S_SLOTS	sis_header/stg.h	24;"	d
NUM_T_SLOTS	sis_header/stg.h	28;"	d
Node	node.h	/^	Node(string &inName, void *graph); \/\/ allocate a new node$/;"	p	class:Node	access:public	signature:(string &inName, void *graph)
Node	node.h	/^class Node {$/;"	c
Node	node.h	/^inline Node<NP, EP>::Node(string &inName, void *graph) {$/;"	f	class:Node	signature:(string &inName, void *graph)
Node::Node	node.h	/^	Node(string &inName, void *graph); \/\/ allocate a new node$/;"	p	class:Node	access:public	signature:(string &inName, void *graph)
Node::Node	node.h	/^inline Node<NP, EP>::Node(string &inName, void *graph) {$/;"	f	class:Node	signature:(string &inName, void *graph)
Node::NodeEdge	node.h	/^	class NodeEdge {$/;"	c	class:Node	access:public
Node::NodeEdge::ep	node.h	/^		EP ep;$/;"	m	class:Node::NodeEdge	access:public
Node::NodeEdge::node	node.h	/^		Node<NP, EP> *node;$/;"	m	class:Node::NodeEdge	access:public
Node::NodeEdge::operator <	node.h	/^		int operator< (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
Node::NodeEdge::operator <=	node.h	/^		int operator<= (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
Node::NodeEdge::operator ==	node.h	/^		int operator== (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
Node::NodeEdge::operator >	node.h	/^		int operator> (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
Node::NodeEdge::operator >=	node.h	/^		int operator>= (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
Node::addFanin	node.h	/^	void addFanin(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
Node::addFanin	node.h	/^inline void Node<NP, EP>::addFanin(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
Node::addFanout	node.h	/^	void addFanout(Node<NP, EP> *node, EP &ep);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node, EP &ep)
Node::addFanout	node.h	/^inline void Node<NP, EP>::addFanout(Node<NP, EP> *node, EP &ep) {$/;"	f	class:Node	signature:(Node<NP, EP> *node, EP &ep)
Node::belongTo	node.h	/^	void *belongTo;$/;"	m	class:Node	access:public
Node::getFaninProperty	node.h	/^	EP &getFaninProperty(Node<NP, EP> *fanin);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *fanin)
Node::getFaninProperty	node.h	/^inline EP& Node<NP, EP>::getFaninProperty(Node<NP, EP> *fanin) {$/;"	f	class:Node	signature:(Node<NP, EP> *fanin)
Node::getFanoutProperty	node.h	/^	EP &getFanoutProperty(Node<NP, EP> *fanout);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *fanout)
Node::getFanoutProperty	node.h	/^	EP &getFanoutProperty(int idx);$/;"	p	class:Node	access:public	signature:(int idx)
Node::getFanoutProperty	node.h	/^inline EP &Node<NP, EP>::getFanoutProperty(int idx) {$/;"	f	class:Node	signature:(int idx)
Node::getFanoutProperty	node.h	/^inline EP& Node<NP, EP>::getFanoutProperty(Node<NP, EP> *fanout) {$/;"	f	class:Node	signature:(Node<NP, EP> *fanout)
Node::in	node.h	/^	Array<Node<NP, EP> *> in;$/;"	m	class:Node	access:public
Node::name	node.h	/^	string *name;$/;"	m	class:Node	access:public
Node::numIn	node.h	/^	int numIn() { return in.size;};$/;"	f	class:Node	access:public	signature:()
Node::numOut	node.h	/^	int numOut() { return in.size;};$/;"	f	class:Node	access:public	signature:()
Node::out	node.h	/^	Array<NodeEdge> out;$/;"	m	class:Node	access:public
Node::p	node.h	/^	NP p; \/\/ node property$/;"	m	class:Node	access:public
Node::removeFanin	node.h	/^	void removeFanin(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
Node::removeFanin	node.h	/^inline void Node<NP, EP>::removeFanin(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
Node::removeFanout	node.h	/^	void removeFanout(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
Node::removeFanout	node.h	/^inline void Node<NP, EP>::removeFanout(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
Node::rename	node.h	/^	void rename(char *newName);$/;"	p	class:Node	access:public	signature:(char *newName)
Node::rename	node.h	/^	void rename(string &newName);$/;"	p	class:Node	access:public	signature:(string &newName)
Node::rename	node.h	/^inline void Node<NP, EP>::rename(char *newName) {};$/;"	f	class:Node	signature:(char *newName)
Node::rename	node.h	/^inline void Node<NP, EP>::rename(string &newName) {};$/;"	f	class:Node	signature:(string &newName)
Node::~Node	node.h	/^	~Node();$/;"	p	class:Node	access:public	signature:()
Node::~Node	node.h	/^inline Node<NP, EP>::~Node(){$/;"	f	class:Node	signature:()
NodeEdge	node.h	/^	class NodeEdge {$/;"	c	class:Node	access:public
OBSERVE	sis_header/atpg.h	/^    CONTROL, OBSERVE$/;"	e	enum:redund_type_enum
OCTIO_H	sis_header/octio.h	11;"	d
ONE	sis_header/espresso.h	409;"	d
ONE_AT_A_TIME	sis_header/ntbdd.h	/^typedef enum {ONE_AT_A_TIME, ALL_TOGETHER} ntbdd_verify_method_t;$/;"	e	enum:__anon3
ONSET_TIME	sis_header/espresso.h	369;"	d
ON_STRANGE_BEHAVIOR	sis_header/spConfig.h	527;"	d
ORDER_H	sis_header/order.h	11;"	d
OUT	sis_header/espresso.h	328;"	d
OUTLABEL	sis_header/espresso.h	393;"	d
OUTPUT_STRING	sis_header/stg.h	27;"	d
OVER_FLOW	sis_header/spMatrix.h	118;"	d
OrderAndDecomposeMatrix	sis_header/spMatrix.h	/^extern  int      OrderAndDecomposeMatrix();$/;"	p	signature:()
OutputMatrixToFile	sis_header/spMatrix.h	/^extern  void     OutputMatrixToFile();$/;"	p	signature:()
OutputStatisticsToFile	sis_header/spMatrix.h	/^extern  void     OutputStatisticsToFile();$/;"	p	signature:()
OutputVectorToFile	sis_header/spMatrix.h	/^extern  void     OutputVectorToFile();$/;"	p	signature:()
PHASE_H	sis_header/phase.h	11;"	d
PHASE_INVERTING	sis_header/delay.h	/^    PHASE_NOT_GIVEN, PHASE_INVERTING, PHASE_NONINVERTING, PHASE_NEITHER$/;"	e	enum:pin_phase_enum
PHASE_NEITHER	sis_header/delay.h	/^    PHASE_NOT_GIVEN, PHASE_INVERTING, PHASE_NONINVERTING, PHASE_NEITHER$/;"	e	enum:pin_phase_enum
PHASE_NONINVERTING	sis_header/delay.h	/^    PHASE_NOT_GIVEN, PHASE_INVERTING, PHASE_NONINVERTING, PHASE_NEITHER$/;"	e	enum:pin_phase_enum
PHASE_NOT_GIVEN	sis_header/delay.h	/^    PHASE_NOT_GIVEN, PHASE_INVERTING, PHASE_NONINVERTING, PHASE_NEITHER$/;"	e	enum:pin_phase_enum
PHASE_UNKNOWN	sis_header/node.h	/^    POS_UNATE, NEG_UNATE, BINATE, PHASE_UNKNOWN$/;"	e	enum:input_phase_enum
PHDR	Makefile	/^PHDR	= igl.h debug.h array.h graph.h node.h edge.h bnetwork.h ignetwork.h imply.h rewire.h$/;"	m
PI2Node	bnetwork.h	/^	map<string, BNode *> PI2Node;$/;"	m	class:BNetwork	access:public
PIPELINE	sis_header/power.h	26;"	d
PLA_labels	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN int PLA_labels ARGS((pPLA));$/;"	p	signature:(pPLA)
PLA_permute	sis_header/espresso.h	/^\/* verify.c *\/	EXTERN int PLA_permute ARGS((pPLA, pPLA));$/;"	p	signature:(pPLA, pPLA)
PLA_summary	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN void PLA_summary ARGS((pPLA));$/;"	p	signature:(pPLA)
PLA_t	sis_header/espresso.h	/^} PLA_t, *pPLA;$/;"	t	typeref:struct:__anon14
PLA_verify	sis_header/espresso.h	/^\/* verify.c *\/	EXTERN bool PLA_verify ARGS((pPLA, pPLA));$/;"	p	signature:(pPLA, pPLA)
PLEASURE_type	sis_header/espresso.h	335;"	d
PMT_only	sis_header/atpg.h	/^    bool PMT_only;$/;"	m	struct:__anon32	access:public
PO2Node	bnetwork.h	/^	map<string, BNode *> PO2Node;$/;"	m	class:BNetwork	access:public
POBJ	Makefile	/^POBJ	= $(PSRC:.cpp=.o)$/;"	m
POSITIVE_PHASE	sis_header/espresso.h	389;"	d
POS_UNATE	sis_header/node.h	/^    POS_UNATE, NEG_UNATE, BINATE, PHASE_UNKNOWN$/;"	e	enum:input_phase_enum
POWER_GENERAL_D	sis_header/power.h	23;"	d
POWER_H	sis_header/power.h	18;"	d
POWER_UNIT_D	sis_header/power.h	22;"	d
POWER_ZERO_D	sis_header/power.h	21;"	d
PRIMARY_INPUT	sis_header/node.h	/^    PRIMARY_INPUT, PRIMARY_OUTPUT, INTERNAL, UNASSIGNED$/;"	e	enum:node_type_enum
PRIMARY_OUTPUT	sis_header/node.h	/^    PRIMARY_INPUT, PRIMARY_OUTPUT, INTERNAL, UNASSIGNED$/;"	e	enum:node_type_enum
PRIME	sis_header/espresso.h	119;"	d
PRIMES_TIME	sis_header/espresso.h	377;"	d
PRINTER_WIDTH	sis_header/spConfig.h	420;"	d
PRODUCT_METHOD	sis_header/seqbdd.h	/^    PRODUCT_METHOD$/;"	e	enum:__anon8
PSEUDOCONDITION	sis_header/spConfig.h	280;"	d
PSRC	Makefile	/^PSRC	= main.stdio.cpp sis_interface.cpp imply.cpp bnetwork.cpp rewire.cpp$/;"	m
PUTINPUT	sis_header/espresso.h	400;"	d
PUTLOOP	sis_header/espresso.h	97;"	d
PUTOUTPUT	sis_header/espresso.h	403;"	d
PUTSIZE	sis_header/espresso.h	101;"	d
PUTSIZE	sis_header/espresso.h	105;"	d
PreorderForModifiedNodal	sis_header/spMatrix.h	/^extern  void     PreorderForModifiedNodal();$/;"	p	signature:()
PrintMatrix	sis_header/spMatrix.h	/^extern  void     PrintMatrix();$/;"	p	signature:()
QUAD_ELEMENT	sis_header/spConfig.h	272;"	d
R	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
R	sis_header/node.h	/^    pset_family R;		\/* off-set *\/$/;"	m	struct:node_struct	access:public
RAISE_IN_TIME	sis_header/espresso.h	380;"	d
RANDOM	array/arr_main.c	52;"	d	file:
RANDOM_ORDER	sis_header/order.h	/^typedef enum {DFS_ORDER, RANDOM_ORDER} order_method_t;$/;"	e	enum:__anon15
RANDOM_RANGE	array/arr_main.c	53;"	d	file:
RANGE	sis_header/spMatrix.h	122;"	d
READ_TIME	sis_header/espresso.h	367;"	d
REAL	sis_header/spConfig.h	262;"	d
REALLOC	sis_header/util.h	240;"	d
REALLOC	sis_header/util.h	242;"	d
REALLOC	sis_header/util.h	53;"	d
REALLOC	sis_header/util.h	65;"	d
REALLOC	util/util.h	236;"	d
REALLOC	util/util.h	238;"	d
REALLOC	util/util.h	53;"	d
REALLOC	util/util.h	65;"	d
REDUCE	sis_header/espresso.h	352;"	d
REDUCE1	sis_header/espresso.h	353;"	d
REDUCE_TIME	sis_header/espresso.h	373;"	d
REDUND	sis_header/espresso.h	122;"	d
REDUNDANT	rewire.h	14;"	d
REDUNDANT	rewire_c.h	5;"	d
REDUNDANT	sis_header/atpg.h	/^    REDUNDANT, ABORTED, TESTED, UNTESTED$/;"	e	enum:fault_status_enum
RELESSEN	sis_header/espresso.h	124;"	d
RESET	sis_header/espresso.h	115;"	d
RESUB_H	sis_header/resub.h	11;"	d
RETIME_H	sis_header/retime.h	11;"	d
REVERSE_ORDER	array/arr_main.c	51;"	d	file:
RE_IGNORE	sis_header/retime.h	/^    RE_PRIMARY_INPUT, RE_PRIMARY_OUTPUT, RE_INTERNAL, RE_IGNORE$/;"	e	enum:re_node_type
RE_INTERNAL	sis_header/retime.h	/^    RE_PRIMARY_INPUT, RE_PRIMARY_OUTPUT, RE_INTERNAL, RE_IGNORE$/;"	e	enum:re_node_type
RE_PRIMARY_INPUT	sis_header/retime.h	/^    RE_PRIMARY_INPUT, RE_PRIMARY_OUTPUT, RE_INTERNAL, RE_IGNORE$/;"	e	enum:re_node_type
RE_PRIMARY_OUTPUT	sis_header/retime.h	/^    RE_PRIMARY_INPUT, RE_PRIMARY_OUTPUT, RE_INTERNAL, RE_IGNORE$/;"	e	enum:re_node_type
RISE_TRANSITION	sis_header/clock.h	20;"	d
RISING_EDGE	sis_header/latch.h	/^    ACTIVE_HIGH, ACTIVE_LOW, RISING_EDGE, FALLING_EDGE, COMBINATIONAL,$/;"	e	enum:latch_synch_enum
RLIMIT_DATA_DEFAULT	util/datalimit.c	21;"	d	file:
RTG	sis_header/atpg.h	/^    long RTG;$/;"	m	struct:__anon33	access:public
R_type	sis_header/espresso.h	334;"	d
RewireAW	rewire.h	/^} RewireAW;$/;"	t	typeref:struct:__anon2
SATISFY_H	sis_header/sat.h	11;"	d
SAT_ABSURD	sis_header/sat.h	/^    SAT_ABSURD,                 \/* Formula has no satisfying solution.  *\/$/;"	e	enum:sat_result
SAT_GAVEUP	sis_header/sat.h	/^    SAT_GAVEUP                  \/* SAT package gave up search.  *\/$/;"	e	enum:sat_result
SAT_SOLVED	sis_header/sat.h	/^    SAT_SOLVED,                 \/* Satisfying solution is found.        *\/$/;"	e	enum:sat_result
SAT_clauses	sis_header/atpg.h	/^    long SAT_clauses;$/;"	m	struct:__anon33	access:public
SAT_solve	sis_header/atpg.h	/^    long SAT_solve;$/;"	m	struct:__anon33	access:public
SCALING	sis_header/spConfig.h	274;"	d
SEQUENTIAL	sis_header/power.h	25;"	d
SET	sis_header/espresso.h	114;"	d
SET_ATPG_ID	sis_header/atpg.h	384;"	d
SET_SIZE	sis_header/espresso.h	84;"	d
SET_SIZE	sis_header/espresso.h	86;"	d
SHARP	sis_header/espresso.h	359;"	d
SHORT	sis_header/extract.h	17;"	d
SHORT_NAME_MODE	sis_header/node.h	/^    LONG_NAME_MODE, SHORT_NAME_MODE$/;"	e	enum:name_mode_enum
SIGNAL_FN	sis_header/util.h	140;"	d
SIGNAL_FN	sis_header/util.h	143;"	d
SIGNAL_FN	util/util.h	140;"	d
SIGNAL_FN	util/util.h	143;"	d
SIMPLIFY_H	sis_header/simplify.h	11;"	d
SIM_ACCEPT_ALWAYS	sis_header/simplify.h	/^    SIM_ACCEPT_ALWAYS, SIM_ACCEPT_UNKNOWN$/;"	e	enum:sim_accept_enum
SIM_ACCEPT_CUBES	sis_header/simplify.h	/^    SIM_ACCEPT_FCT_LITS, SIM_ACCEPT_CUBES, SIM_ACCEPT_SOP_LITS,$/;"	e	enum:sim_accept_enum
SIM_ACCEPT_FCT_LITS	sis_header/simplify.h	/^    SIM_ACCEPT_FCT_LITS, SIM_ACCEPT_CUBES, SIM_ACCEPT_SOP_LITS,$/;"	e	enum:sim_accept_enum
SIM_ACCEPT_SOP_LITS	sis_header/simplify.h	/^    SIM_ACCEPT_FCT_LITS, SIM_ACCEPT_CUBES, SIM_ACCEPT_SOP_LITS,$/;"	e	enum:sim_accept_enum
SIM_ACCEPT_UNKNOWN	sis_header/simplify.h	/^    SIM_ACCEPT_ALWAYS, SIM_ACCEPT_UNKNOWN$/;"	e	enum:sim_accept_enum
SIM_DCTYPE_ALL	sis_header/simplify.h	/^    SIM_DCTYPE_INOUT, SIM_DCTYPE_ALL, SIM_DCTYPE_SUB_FANIN,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_FANIN	sis_header/simplify.h	/^    SIM_DCTYPE_NONE, SIM_DCTYPE_FANIN, SIM_DCTYPE_FANOUT,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_FANOUT	sis_header/simplify.h	/^    SIM_DCTYPE_NONE, SIM_DCTYPE_FANIN, SIM_DCTYPE_FANOUT,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_INOUT	sis_header/simplify.h	/^    SIM_DCTYPE_INOUT, SIM_DCTYPE_ALL, SIM_DCTYPE_SUB_FANIN,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_LEVEL	sis_header/simplify.h	/^    SIM_DCTYPE_LEVEL, SIM_DCTYPE_UNKNOWN,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_NONE	sis_header/simplify.h	/^    SIM_DCTYPE_NONE, SIM_DCTYPE_FANIN, SIM_DCTYPE_FANOUT,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_SUB_FANIN	sis_header/simplify.h	/^    SIM_DCTYPE_INOUT, SIM_DCTYPE_ALL, SIM_DCTYPE_SUB_FANIN,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_UNKNOWN	sis_header/simplify.h	/^    SIM_DCTYPE_LEVEL, SIM_DCTYPE_UNKNOWN,$/;"	e	enum:sim_dctype_enum
SIM_DCTYPE_X	sis_header/simplify.h	/^    SIM_DCTYPE_X$/;"	e	enum:sim_dctype_enum
SIM_FILTER_ALL	sis_header/simplify.h	/^    SIM_FILTER_ALL $/;"	e	enum:sim_filter_enum
SIM_FILTER_DISJ_SUPPORT	sis_header/simplify.h	/^    SIM_FILTER_NONE, SIM_FILTER_EXACT, SIM_FILTER_DISJ_SUPPORT, $/;"	e	enum:sim_filter_enum
SIM_FILTER_EXACT	sis_header/simplify.h	/^    SIM_FILTER_NONE, SIM_FILTER_EXACT, SIM_FILTER_DISJ_SUPPORT, $/;"	e	enum:sim_filter_enum
SIM_FILTER_FDIST	sis_header/simplify.h	/^    SIM_FILTER_SIZE, SIM_FILTER_FDIST, SIM_FILTER_SDIST, SIM_FILTER_LEVEL,$/;"	e	enum:sim_filter_enum
SIM_FILTER_LEVEL	sis_header/simplify.h	/^    SIM_FILTER_SIZE, SIM_FILTER_FDIST, SIM_FILTER_SDIST, SIM_FILTER_LEVEL,$/;"	e	enum:sim_filter_enum
SIM_FILTER_NONE	sis_header/simplify.h	/^    SIM_FILTER_NONE, SIM_FILTER_EXACT, SIM_FILTER_DISJ_SUPPORT, $/;"	e	enum:sim_filter_enum
SIM_FILTER_SDIST	sis_header/simplify.h	/^    SIM_FILTER_SIZE, SIM_FILTER_FDIST, SIM_FILTER_SDIST, SIM_FILTER_LEVEL,$/;"	e	enum:sim_filter_enum
SIM_FILTER_SIZE	sis_header/simplify.h	/^    SIM_FILTER_SIZE, SIM_FILTER_FDIST, SIM_FILTER_SDIST, SIM_FILTER_LEVEL,$/;"	e	enum:sim_filter_enum
SIM_METHOD_DCSIMP	sis_header/simplify.h	/^    SIM_METHOD_EXACT_LITS, SIM_METHOD_DCSIMP, SIM_METHOD_NOCOMP,$/;"	e	enum:sim_method_enum
SIM_METHOD_ESPRESSO	sis_header/simplify.h	/^    SIM_METHOD_SIMPCOMP, SIM_METHOD_ESPRESSO, SIM_METHOD_EXACT,$/;"	e	enum:sim_method_enum
SIM_METHOD_EXACT	sis_header/simplify.h	/^    SIM_METHOD_SIMPCOMP, SIM_METHOD_ESPRESSO, SIM_METHOD_EXACT,$/;"	e	enum:sim_method_enum
SIM_METHOD_EXACT_LITS	sis_header/simplify.h	/^    SIM_METHOD_EXACT_LITS, SIM_METHOD_DCSIMP, SIM_METHOD_NOCOMP,$/;"	e	enum:sim_method_enum
SIM_METHOD_NOCOMP	sis_header/simplify.h	/^    SIM_METHOD_EXACT_LITS, SIM_METHOD_DCSIMP, SIM_METHOD_NOCOMP,$/;"	e	enum:sim_method_enum
SIM_METHOD_SIMPCOMP	sis_header/simplify.h	/^    SIM_METHOD_SIMPCOMP, SIM_METHOD_ESPRESSO, SIM_METHOD_EXACT,$/;"	e	enum:sim_method_enum
SIM_METHOD_SNOCOMP	sis_header/simplify.h	/^    SIM_METHOD_SNOCOMP, SIM_METHOD_UNKNOWN$/;"	e	enum:sim_method_enum
SIM_METHOD_UNKNOWN	sis_header/simplify.h	/^    SIM_METHOD_SNOCOMP, SIM_METHOD_UNKNOWN$/;"	e	enum:sim_method_enum
SINGULAR	sis_header/spMatrix.h	120;"	d
SIS	Makefile	/^SIS = \/cad\/sis-1.4\/sis$/;"	m
SISHDR	Makefile	/^SISHDR = sis_header$/;"	m
SIS_H	sis_header/sis.h	11;"	d
SIS_PKG_NAME	sis_header/octio.h	13;"	d
SIZE	sis_header/espresso.h	100;"	d
SIZE	sis_header/espresso.h	104;"	d
SIZEOF_INT	sis_header/mtr.h	48;"	d
SIZEOF_VOID_P	sis_header/mtr.h	45;"	d
SMALLEST_REAL	sis_header/spConfig.h	444;"	d
SMALLEST_REAL	sis_header/spConfig.h	453;"	d
SMALLEST_REAL	sis_header/spConfig.h	463;"	d
SMALLEST_REAL	sis_header/spConfig.h	473;"	d
SMALLEST_REAL	sis_header/spConfig.h	483;"	d
SMALLEST_REAL	sis_header/spConfig.h	493;"	d
SMALLEST_REAL	sis_header/spConfig.h	503;"	d
SNOCOMP	sis_header/minimize.h	11;"	d
SORT	sis_header/lsort.h	/^DECL_SORT TYPE *SORT();$/;"	p	signature:()
SORT	sis_header/lsort.h	153;"	d
SORT1	sis_header/lsort.h	154;"	d
SPACE_FOR_ELEMENTS	sis_header/spConfig.h	394;"	d
SPACE_FOR_FILL_INS	sis_header/spConfig.h	395;"	d
SPARSE	sis_header/espresso.h	354;"	d
SPARSE_H	sis_header/sparse.h	11;"	d
SPARSE_REAL	sis_header/spMatrix.h	153;"	d
SPECIFICATION	sis_header/clock.h	/^    SPECIFICATION = 0,$/;"	e	enum:clock_setting_enum
SPEED_H	sis_header/speed.h	11;"	d
STABILITY	sis_header/spConfig.h	278;"	d
START	sis_header/stg.h	10;"	d
STATELINE_PS	sis_header/power.h	30;"	d
STATE_STRING	sis_header/stg.h	22;"	d
STG_INPUT_NAMES	sis_header/stg.h	16;"	d
STG_OUTPUT_NAMES	sis_header/stg.h	17;"	d
STRIP	sis_header/spConfig.h	270;"	d
ST_CONTINUE	sis_header/st.h	/^enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE};$/;"	e	enum:st_retval
ST_DEFAULT_GROW_FACTOR	sis_header/st.h	77;"	d
ST_DEFAULT_INIT_TABLE_SIZE	sis_header/st.h	76;"	d
ST_DEFAULT_MAX_DENSITY	sis_header/st.h	75;"	d
ST_DEFAULT_REORDER_FLAG	sis_header/st.h	78;"	d
ST_DELETE	sis_header/st.h	/^enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE};$/;"	e	enum:st_retval
ST_INCLUDED	sis_header/st.h	15;"	d
ST_OUT_OF_MEM	sis_header/st.h	86;"	d
ST_PFI	sis_header/st.h	/^typedef int (*ST_PFI)();$/;"	t
ST_PFSR	sis_header/st.h	/^typedef enum st_retval (*ST_PFSR)();$/;"	t	typeref:enum:ST_PFSR
ST_STOP	sis_header/st.h	/^enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE};$/;"	e	enum:st_retval
SUM_OF_PRODUCTS	sis_header/power.h	33;"	d
SWITCH_PROB	sis_header/power.h	54;"	d
SYMBOLIC_CONSTRAINTS_type	sis_header/espresso.h	339;"	d
S_A_0	sis_header/atpg.h	/^    S_A_0, S_A_1$/;"	e	enum:stuck_value_enum
S_A_1	sis_header/atpg.h	/^    S_A_0, S_A_1$/;"	e	enum:stuck_value_enum
ScaleMatrix	sis_header/spMatrix.h	/^extern  void     ScaleMatrix();$/;"	p	signature:()
SetMatrixComplex	sis_header/spMatrix.h	/^extern  void     SetMatrixComplex();$/;"	p	signature:()
SetMatrixReal	sis_header/spMatrix.h	/^extern  void     SetMatrixReal();$/;"	p	signature:()
SolveMatrix	sis_header/spMatrix.h	/^extern  void     SolveMatrix();$/;"	p	signature:()
SolveTransposedMatrix	sis_header/spMatrix.h	/^extern  void     SolveTransposedMatrix();$/;"	p	signature:()
TARGET	Makefile	/^TARGET	= rewire$/;"	m
TAUT	sis_header/espresso.h	355;"	d
TESTED	sis_header/atpg.h	/^    REDUNDANT, ABORTED, TESTED, UNTESTED$/;"	e	enum:fault_status_enum
TESTP	sis_header/espresso.h	116;"	d
TIES_MULTIPLIER	sis_header/spConfig.h	400;"	d
TIME_COUNT	sis_header/espresso.h	366;"	d
TRANSLATE	sis_header/spConfig.h	264;"	d
TRANSPOSE	sis_header/spConfig.h	273;"	d
TRUE	sis_header/espresso.h	250;"	d
TRUE	sis_header/maxflow.h	19;"	d
TWO	sis_header/espresso.h	407;"	d
TYPE	sis_header/lsort.h	152;"	d
UNASSIGNED	sis_header/node.h	/^    PRIMARY_INPUT, PRIMARY_OUTPUT, INTERNAL, UNASSIGNED$/;"	e	enum:node_type_enum
UNDER_FLOW	sis_header/spMatrix.h	117;"	d
UNIFORM_PS	sis_header/power.h	31;"	d
UNIQ	sis_header/luniq.h	91;"	d
UNIX100	util/cpu_time.c	35;"	d	file:
UNKNOWN	sis_header/latch.h	/^    ASYNCH, UNKNOWN$/;"	e	enum:latch_synch_enum
UNSIGNED	sis_header/extract.h	18;"	d
UNTESTED	sis_header/atpg.h	/^    REDUNDANT, ABORTED, TESTED, UNTESTED$/;"	e	enum:fault_status_enum
UTIL_H	sis_header/util.h	11;"	d
UTIL_H	util/util.h	11;"	d
VAR_SET_ALL_ONES	sis_header/var_set.h	43;"	d
VAR_SET_ALL_ZEROS	sis_header/var_set.h	42;"	d
VAR_SET_BYTE_SIZE	sis_header/var_set.h	40;"	d
VAR_SET_EXTRACT_BIT	sis_header/var_set.h	44;"	d
VAR_SET_H	sis_header/var_set.h	2;"	d
VAR_SET_WORD_SIZE	sis_header/var_set.h	41;"	d
VERIFY_TIME	sis_header/espresso.h	381;"	d
VERIF_INT_H	sis_header/seqbdd.h	14;"	d
VERSION	sis_header/espresso.h	362;"	d
VOID_HACK	sis_header/util.h	74;"	d
VOID_HACK	sis_header/util.h	76;"	d
VOID_HACK	util/util.h	74;"	d
VOID_HACK	util/util.h	76;"	d
VoidFN	sis_header/atpg.h	/^typedef void (*VoidFN)();$/;"	t
VoidFn	sis_header/map.h	/^typedef void (*VoidFn)();$/;"	t
WHICH_BIT	sis_header/espresso.h	80;"	d
WHICH_WORD	sis_header/espresso.h	79;"	d
WORKING	sis_header/clock.h	/^    WORKING = 1$/;"	e	enum:clock_setting_enum
WRITE_TIME	sis_header/espresso.h	382;"	d
WireProperty	bnetwork.h	/^class WireProperty {$/;"	c
WireProperty	wire.h	/^class WireProperty {$/;"	c
WireProperty::polarity	bnetwork.h	/^	int polarity;$/;"	m	class:WireProperty	access:public
XXLIBS	Makefile	/^XXLIBS	= $(SIS)\/lib\/libsis.a $/;"	m
ZERO	sis_header/espresso.h	410;"	d
_ALL_SOURCE	sis_header/util.h	18;"	d
_ALL_SOURCE	util/util.h	18;"	d
_ANSI_C_SOURCE	sis_header/util.h	21;"	d
_ANSI_C_SOURCE	util/util.h	21;"	d
_BDD	sis_header/bdd.h	38;"	d
_BSD	sis_header/util.h	30;"	d
_BSD	util/util.h	30;"	d
_POSIX_SOURCE	sis_header/util.h	15;"	d
_POSIX_SOURCE	util/util.h	15;"	d
__ARRAY_H	array.h	2;"	d
__BNETWORK_H	bnetwork.h	2;"	d
__BNODE_H	bnode.h	2;"	d
__DEBUG_H_INCLUDE	debug.h	27;"	d
__EDGE_H	edge.h	2;"	d
__GRAPH_H	graph.h	2;"	d
__IGL_H	igl.h	6;"	d
__IGL_MALLOC_H	igl_malloc.h	2;"	d
__IGNETWORK_H	ignetwork.h	2;"	d
__IMPLY_H	imply.h	2;"	d
__MTR	sis_header/mtr.h	33;"	d
__NODE_H	node.h	2;"	d
__REWIRE_C_H	rewire_c.h	2;"	d
__REWIRE_H	rewire.h	2;"	d
__SIS_INTERFACE_H	sis_interface.h	2;"	d
__WIRE_H	wire.h	2;"	d
__anon10::consistency_fn	sis_header/seqbdd.h	/^  bdd_t *consistency_fn;		\/* for CONSISTENCY_METHOD *\/$/;"	m	struct:__anon10	access:public
__anon10::external_outputs	sis_header/seqbdd.h	/^  array_t *external_outputs;		$/;"	m	struct:__anon10	access:public
__anon10::init_state_fn	sis_header/seqbdd.h	/^  bdd_t *init_state_fn;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
__anon10::input_vars	sis_header/seqbdd.h	/^  array_t *input_vars;			\/* for CONSISTENCY2_METHOD (should be merged with pi_inputs) *\/$/;"	m	struct:__anon10	access:public
__anon10::manager	sis_header/seqbdd.h	/^  bdd_manager *manager;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
__anon10::output_fn	sis_header/seqbdd.h	/^  bdd_t *output_fn;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
__anon10::output_fns	sis_header/seqbdd.h	/^  array_t *output_fns;			\/* for BULL_METHOD  *\/$/;"	m	struct:__anon10	access:public
__anon10::output_vars	sis_header/seqbdd.h	/^  array_t *output_vars;			\/* for CONSISTENCY2_METHOD *\/$/;"	m	struct:__anon10	access:public
__anon10::pi_inputs	sis_header/seqbdd.h	/^  array_t *pi_inputs;		\/* should always be computed: array of BDD's for PI current state *\/$/;"	m	struct:__anon10	access:public
__anon10::smoothing_inputs	sis_header/seqbdd.h	/^  array_t *smoothing_inputs;		\/* for CONSISTENCY_METHOD *\/$/;"	m	struct:__anon10	access:public
__anon10::total_set	sis_header/seqbdd.h	/^  bdd_t *total_set;			\/* should be computed by general stg traversal routine (read-only) *\/$/;"	m	struct:__anon10	access:public
__anon10::transition_outputs	sis_header/seqbdd.h	/^  array_t *transition_outputs;		\/* for CONSISTENCY2 (one bdd_t per (y_i==f_i(x))) *\/$/;"	m	struct:__anon10	access:public
__anon10::type	sis_header/seqbdd.h	/^  range_method_t type;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
__anon11::n_sets	sis_header/seqbdd.h	/^  int n_sets;$/;"	m	struct:__anon11	access:public
__anon11::n_vars	sis_header/seqbdd.h	/^  int n_vars;$/;"	m	struct:__anon11	access:public
__anon11::sets	sis_header/seqbdd.h	/^  var_set_t **sets;$/;"	m	struct:__anon11	access:public
__anon12::fns	sis_header/seqbdd.h	/^  array_t *fns;$/;"	m	struct:__anon12	access:public
__anon13::fns	sis_header/seqbdd.h	/^  array_t *fns;$/;"	m	struct:__anon13	access:public
__anon13::ins	sis_header/seqbdd.h	/^  array_t *ins;$/;"	m	struct:__anon13	access:public
__anon13::range	sis_header/seqbdd.h	/^  bdd_t *range;$/;"	m	struct:__anon13	access:public
__anon14::D	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
__anon14::F	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
__anon14::R	sis_header/espresso.h	/^    pcover F, D, R;		\/* on-set, off-set and dc-set *\/$/;"	m	struct:__anon14	access:public
__anon14::filename	sis_header/espresso.h	/^    char *filename;             \/* filename *\/$/;"	m	struct:__anon14	access:public
__anon14::label	sis_header/espresso.h	/^    char **label;		\/* labels for the columns *\/$/;"	m	struct:__anon14	access:public
__anon14::pair	sis_header/espresso.h	/^    ppair pair;                 \/* how to pair variables *\/$/;"	m	struct:__anon14	access:public
__anon14::phase	sis_header/espresso.h	/^    pcube phase;                \/* phase to split into on-set and off-set *\/$/;"	m	struct:__anon14	access:public
__anon14::pla_type	sis_header/espresso.h	/^    int pla_type;               \/* logical PLA format *\/$/;"	m	struct:__anon14	access:public
__anon14::symbolic	sis_header/espresso.h	/^    symbolic_t *symbolic;	\/* allow binary->symbolic mapping *\/$/;"	m	struct:__anon14	access:public
__anon14::symbolic_output	sis_header/espresso.h	/^    symbolic_t *symbolic_output;\/* allow symbolic output mapping *\/$/;"	m	struct:__anon14	access:public
__anon1::dst	rewire_c.h	/^	node_t *dst;$/;"	m	struct:__anon1	access:public
__anon1::dst_function	rewire_c.h	/^	node_function_t dst_function;$/;"	m	struct:__anon1	access:public
__anon1::polarity	rewire_c.h	/^	int polarity;$/;"	m	struct:__anon1	access:public
__anon1::src	rewire_c.h	/^	node_t *src;$/;"	m	struct:__anon1	access:public
__anon2::dst	rewire.h	/^	BNode *dst;$/;"	m	struct:__anon2	access:public
__anon2::dstFunction	rewire.h	/^	BNodeType dstFunction;$/;"	m	struct:__anon2	access:public
__anon2::polarity	rewire.h	/^	int polarity;$/;"	m	struct:__anon2	access:public
__anon2::src	rewire.h	/^	BNode *src;$/;"	m	struct:__anon2	access:public
__anon30::index	sis_header/atpg.h	/^    int index;$/;"	m	struct:__anon30	access:public
__anon30::node	sis_header/atpg.h	/^    node_t *node;$/;"	m	struct:__anon30	access:public
__anon31::index	sis_header/atpg.h	/^    int index;$/;"	m	struct:__anon31	access:public
__anon31::n_covers	sis_header/atpg.h	/^    int n_covers;$/;"	m	struct:__anon31	access:public
__anon31::vectors	sis_header/atpg.h	/^    array_t *vectors;$/;"	m	struct:__anon31	access:public
__anon32::PMT_only	sis_header/atpg.h	/^    bool PMT_only;$/;"	m	struct:__anon32	access:public
__anon32::build_product_machines	sis_header/atpg.h	/^    bool build_product_machines;$/;"	m	struct:__anon32	access:public
__anon32::deterministic_prop	sis_header/atpg.h	/^    bool deterministic_prop;$/;"	m	struct:__anon32	access:public
__anon32::fast_sat	sis_header/atpg.h	/^    bool fast_sat;$/;"	m	struct:__anon32	access:public
__anon32::fault_simulate	sis_header/atpg.h	/^    bool fault_simulate;$/;"	m	struct:__anon32	access:public
__anon32::force_comb	sis_header/atpg.h	/^    bool force_comb;$/;"	m	struct:__anon32	access:public
__anon32::fp	sis_header/atpg.h	/^    FILE *fp;$/;"	m	struct:__anon32	access:public
__anon32::n_random_prop_iter	sis_header/atpg.h	/^    int n_random_prop_iter;$/;"	m	struct:__anon32	access:public
__anon32::n_sim_sequences	sis_header/atpg.h	/^    int n_sim_sequences;$/;"	m	struct:__anon32	access:public
__anon32::print_sequences	sis_header/atpg.h	/^    bool print_sequences;$/;"	m	struct:__anon32	access:public
__anon32::prop_rtg_depth	sis_header/atpg.h	/^    int prop_rtg_depth;$/;"	m	struct:__anon32	access:public
__anon32::quick_redund	sis_header/atpg.h	/^    bool quick_redund;$/;"	m	struct:__anon32	access:public
__anon32::random_prop	sis_header/atpg.h	/^    bool random_prop;$/;"	m	struct:__anon32	access:public
__anon32::real_filename	sis_header/atpg.h	/^    char *real_filename;$/;"	m	struct:__anon32	access:public
__anon32::reverse_fault_sim	sis_header/atpg.h	/^    bool reverse_fault_sim;$/;"	m	struct:__anon32	access:public
__anon32::rtg	sis_header/atpg.h	/^    bool rtg;$/;"	m	struct:__anon32	access:public
__anon32::rtg_depth	sis_header/atpg.h	/^    int rtg_depth;$/;"	m	struct:__anon32	access:public
__anon32::tech_decomp	sis_header/atpg.h	/^    bool tech_decomp;$/;"	m	struct:__anon32	access:public
__anon32::timeout	sis_header/atpg.h	/^    int timeout;$/;"	m	struct:__anon32	access:public
__anon32::use_internal_states	sis_header/atpg.h	/^    bool use_internal_states;$/;"	m	struct:__anon32	access:public
__anon32::verbosity	sis_header/atpg.h	/^    int verbosity;$/;"	m	struct:__anon32	access:public
__anon33::RTG	sis_header/atpg.h	/^    long RTG;$/;"	m	struct:__anon33	access:public
__anon33::SAT_clauses	sis_header/atpg.h	/^    long SAT_clauses;$/;"	m	struct:__anon33	access:public
__anon33::SAT_solve	sis_header/atpg.h	/^    long SAT_solve;$/;"	m	struct:__anon33	access:public
__anon33::fault_simulate	sis_header/atpg.h	/^    long fault_simulate;$/;"	m	struct:__anon33	access:public
__anon33::ff_propagate	sis_header/atpg.h	/^    long ff_propagate;$/;"	m	struct:__anon33	access:public
__anon33::justify	sis_header/atpg.h	/^    long justify;$/;"	m	struct:__anon33	access:public
__anon33::product_machine_verify	sis_header/atpg.h	/^    long product_machine_verify;$/;"	m	struct:__anon33	access:public
__anon33::random_propagate	sis_header/atpg.h	/^    long random_propagate;$/;"	m	struct:__anon33	access:public
__anon33::reverse_fault_sim	sis_header/atpg.h	/^    long reverse_fault_sim;$/;"	m	struct:__anon33	access:public
__anon33::setup	sis_header/atpg.h	/^    long setup;$/;"	m	struct:__anon33	access:public
__anon33::total_time	sis_header/atpg.h	/^    long total_time;$/;"	m	struct:__anon33	access:public
__anon33::traverse_stg	sis_header/atpg.h	/^    long traverse_stg;$/;"	m	struct:__anon33	access:public
__anon34::initial_faults	sis_header/atpg.h	/^    int initial_faults;$/;"	m	struct:__anon34	access:public
__anon34::n_RTG_tested	sis_header/atpg.h	/^    int n_RTG_tested;$/;"	m	struct:__anon34	access:public
__anon34::n_det_propagations	sis_header/atpg.h	/^    int n_det_propagations;$/;"	m	struct:__anon34	access:public
__anon34::n_ff_propagated	sis_header/atpg.h	/^    int n_ff_propagated;$/;"	m	struct:__anon34	access:public
__anon34::n_just_reused	sis_header/atpg.h	/^    int n_just_reused;$/;"	m	struct:__anon34	access:public
__anon34::n_not_ff_propagated	sis_header/atpg.h	/^    int n_not_ff_propagated;$/;"	m	struct:__anon34	access:public
__anon34::n_prop_reused	sis_header/atpg.h	/^    int n_prop_reused;$/;"	m	struct:__anon34	access:public
__anon34::n_random_propagated	sis_header/atpg.h	/^    int n_random_propagated;$/;"	m	struct:__anon34	access:public
__anon34::n_random_propagations	sis_header/atpg.h	/^    int n_random_propagations;$/;"	m	struct:__anon34	access:public
__anon34::n_sequences	sis_header/atpg.h	/^    int n_sequences;$/;"	m	struct:__anon34	access:public
__anon34::n_untested_by_main_loop	sis_header/atpg.h	/^    int n_untested_by_main_loop;$/;"	m	struct:__anon34	access:public
__anon34::n_vectors	sis_header/atpg.h	/^    int n_vectors;$/;"	m	struct:__anon34	access:public
__anon34::n_verifications	sis_header/atpg.h	/^    int n_verifications;$/;"	m	struct:__anon34	access:public
__anon34::sat_red	sis_header/atpg.h	/^    int sat_red;$/;"	m	struct:__anon34	access:public
__anon34::stg_depth	sis_header/atpg.h	/^    int stg_depth;$/;"	m	struct:__anon34	access:public
__anon34::verified_red	sis_header/atpg.h	/^    int verified_red;$/;"	m	struct:__anon34	access:public
__anon35::atpg_opt	sis_header/atpg.h	/^    atpg_options_t *atpg_opt;		\/* all user options *\/$/;"	m	struct:__anon35	access:public
__anon35::control_node_table	sis_header/atpg.h	/^    st_table *control_node_table;$/;"	m	struct:__anon35	access:public
__anon35::faults	sis_header/atpg.h	/^    lsList faults;			\/* fault list *\/$/;"	m	struct:__anon35	access:public
__anon35::final_untested_faults	sis_header/atpg.h	/^    lsList final_untested_faults;$/;"	m	struct:__anon35	access:public
__anon35::n_latch	sis_header/atpg.h	/^    int n_latch;$/;"	m	struct:__anon35	access:public
__anon35::n_pi	sis_header/atpg.h	/^    int n_pi;$/;"	m	struct:__anon35	access:public
__anon35::n_po	sis_header/atpg.h	/^    int n_po;$/;"	m	struct:__anon35	access:public
__anon35::n_real_pi	sis_header/atpg.h	/^    int n_real_pi;$/;"	m	struct:__anon35	access:public
__anon35::n_real_po	sis_header/atpg.h	/^    int n_real_po;$/;"	m	struct:__anon35	access:public
__anon35::network	sis_header/atpg.h	/^    network_t *network;$/;"	m	struct:__anon35	access:public
__anon35::redund_table	sis_header/atpg.h	/^    st_table *redund_table;$/;"	m	struct:__anon35	access:public
__anon35::redundant_faults	sis_header/atpg.h	/^    lsList redundant_faults;$/;"	m	struct:__anon35	access:public
__anon35::seq	sis_header/atpg.h	/^    bool seq;				\/* false if the circuit has no latches *\/$/;"	m	struct:__anon35	access:public
__anon35::sequence_table	sis_header/atpg.h	/^    st_table *sequence_table;		\/* test sequences *\/$/;"	m	struct:__anon35	access:public
__anon35::statistics	sis_header/atpg.h	/^    statistics_t *statistics;		\/* stores execution statistics *\/$/;"	m	struct:__anon35	access:public
__anon35::tested_faults	sis_header/atpg.h	/^    lsList tested_faults;$/;"	m	struct:__anon35	access:public
__anon35::time_info	sis_header/atpg.h	/^    time_info_t *time_info;		\/* stores stats about execution time *\/$/;"	m	struct:__anon35	access:public
__anon35::untested_faults	sis_header/atpg.h	/^    lsList untested_faults;$/;"	m	struct:__anon35	access:public
__anon36::all_po_values	sis_header/atpg.h	/^    unsigned *all_po_values;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::all_true_value	sis_header/atpg.h	/^    unsigned *all_true_value;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::alloc_sequences	sis_header/atpg.h	/^    sequence_t **alloc_sequences;	\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::atpg_sat	sis_header/atpg.h	/^    sat_t *atpg_sat;			\/* sat structure *\/$/;"	m	struct:__anon36	access:public
__anon36::changed_node_indices	sis_header/atpg.h	/^    int *changed_node_indices;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::faults_ptr	sis_header/atpg.h	/^    fault_t **faults_ptr;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::faulty_state	sis_header/atpg.h	/^    unsigned *faulty_state;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::n_latch	sis_header/atpg.h	/^    int n_latch;$/;"	m	struct:__anon36	access:public
__anon36::n_nodes	sis_header/atpg.h	/^    int n_nodes;$/;"	m	struct:__anon36	access:public
__anon36::n_pi	sis_header/atpg.h	/^    int n_pi;$/;"	m	struct:__anon36	access:public
__anon36::n_po	sis_header/atpg.h	/^    int n_po;$/;"	m	struct:__anon36	access:public
__anon36::n_real_pi	sis_header/atpg.h	/^    int n_real_pi;$/;"	m	struct:__anon36	access:public
__anon36::n_real_po	sis_header/atpg.h	/^    int n_real_po;$/;"	m	struct:__anon36	access:public
__anon36::network	sis_header/atpg.h	/^    network_t *network;$/;"	m	struct:__anon36	access:public
__anon36::pi_po_table	sis_header/atpg.h	/^    st_table *pi_po_table;		\/* pi-po reference index *\/$/;"	m	struct:__anon36	access:public
__anon36::pi_uid	sis_header/atpg.h	/^    int *pi_uid;			\/* uid for pi's *\/$/;"	m	struct:__anon36	access:public
__anon36::po_uid	sis_header/atpg.h	/^    int *po_uid;			\/* uid for po's *\/$/;"	m	struct:__anon36	access:public
__anon36::prop_word_vectors	sis_header/atpg.h	/^    array_t *prop_word_vectors;		\/* tmp space for random propagation -$/;"	m	struct:__anon36	access:public
__anon36::real_po_values	sis_header/atpg.h	/^    unsigned *real_po_values;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::reset_state	sis_header/atpg.h	/^    unsigned *reset_state;		\/* reset state used in faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::sat_input_vars	sis_header/atpg.h	/^    array_t *sat_input_vars;		\/* pi's used in sat call *\/$/;"	m	struct:__anon36	access:public
__anon36::sim_nodes	sis_header/atpg.h	/^    atpg_sim_node_t *sim_nodes;		\/* simulation nodes  *\/$/;"	m	struct:__anon36	access:public
__anon36::tfo	sis_header/atpg.h	/^    int *tfo;$/;"	m	struct:__anon36	access:public
__anon36::true_state	sis_header/atpg.h	/^    unsigned *true_state;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::true_value	sis_header/atpg.h	/^    unsigned *true_value;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::used	sis_header/atpg.h	/^    int *used;				\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon36::word_vectors	sis_header/atpg.h	/^    array_t *word_vectors;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
__anon37::faulty_state	sis_header/atpg.h	/^    array_t *faulty_state;$/;"	m	struct:__anon37	access:public
__anon37::good_state	sis_header/atpg.h	/^    array_t *good_state;$/;"	m	struct:__anon37	access:public
__anon37::input_trace	sis_header/atpg.h	/^    array_t *input_trace;		\/* tmp space - justification *\/$/;"	m	struct:__anon37	access:public
__anon37::input_vars	sis_header/atpg.h	/^    array_t *input_vars;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
__anon37::just_sequence	sis_header/atpg.h	/^    array_t *just_sequence;		\/* tmp space - justification *\/$/;"	m	struct:__anon37	access:public
__anon37::just_sequence_table	sis_header/atpg.h	/^    st_table *just_sequence_table;$/;"	m	struct:__anon37	access:public
__anon37::justified_states	sis_header/atpg.h	/^    bdd_t *justified_states;$/;"	m	struct:__anon37	access:public
__anon37::latch_to_pi_ordering	sis_header/atpg.h	/^    array_t *latch_to_pi_ordering;	\/* used in short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::latch_to_product_pi_ordering	sis_header/atpg.h	/^    array_t *latch_to_product_pi_ordering;	\/* used in short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::network_copy	sis_header/atpg.h	/^    network_t *network_copy;$/;"	m	struct:__anon37	access:public
__anon37::orig_external_outputs	sis_header/atpg.h	/^    array_t *orig_external_outputs;$/;"	m	struct:__anon37	access:public
__anon37::orig_transition_outputs	sis_header/atpg.h	/^    array_t *orig_transition_outputs;$/;"	m	struct:__anon37	access:public
__anon37::product_input_vars	sis_header/atpg.h	/^    array_t *product_input_vars;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
__anon37::product_machine_built	sis_header/atpg.h	/^    bool product_machine_built;$/;"	m	struct:__anon37	access:public
__anon37::product_network	sis_header/atpg.h	/^    network_t *product_network;$/;"	m	struct:__anon37	access:public
__anon37::product_range_data	sis_header/atpg.h	/^    range_data_t *product_range_data;$/;"	m	struct:__anon37	access:public
__anon37::product_reached_sets	sis_header/atpg.h	/^    array_t *product_reached_sets;$/;"	m	struct:__anon37	access:public
__anon37::product_real_pi_bdds	sis_header/atpg.h	/^    array_t *product_real_pi_bdds;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
__anon37::product_start_states	sis_header/atpg.h	/^    bdd_t *product_start_states;	\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::product_var_table	sis_header/atpg.h	/^    st_table *product_var_table;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
__anon37::prop_sequence	sis_header/atpg.h	/^    array_t *prop_sequence;		\/* tmp space - propagation *\/$/;"	m	struct:__anon37	access:public
__anon37::prop_sequence_table	sis_header/atpg.h	/^    st_table *prop_sequence_table;$/;"	m	struct:__anon37	access:public
__anon37::range_data	sis_header/atpg.h	/^    range_data_t *range_data;$/;"	m	struct:__anon37	access:public
__anon37::reached_sets	sis_header/atpg.h	/^    array_t *reached_sets;$/;"	m	struct:__anon37	access:public
__anon37::real_pi_bdds	sis_header/atpg.h	/^    array_t *real_pi_bdds;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
__anon37::seq_opt	sis_header/atpg.h	/^    verif_options_t *seq_opt;$/;"	m	struct:__anon37	access:public
__anon37::seq_product_opt	sis_header/atpg.h	/^    verif_options_t *seq_product_opt;$/;"	m	struct:__anon37	access:public
__anon37::start_state_used	sis_header/atpg.h	/^    bdd_t *start_state_used;		\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::start_states	sis_header/atpg.h	/^    bdd_t *start_states;		\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::state_sequence_table	sis_header/atpg.h	/^    st_table *state_sequence_table;	\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
__anon37::valid_states_network	sis_header/atpg.h	/^    network_t *valid_states_network;$/;"	m	struct:__anon37	access:public
__anon37::var_table	sis_header/atpg.h	/^    st_table *var_table;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
__anon38::active_id	sis_header/atpg.h	/^    int active_id;$/;"	m	struct:__anon38	access:public
__anon38::current_id	sis_header/atpg.h	/^    int current_id; \/* either true_id, fault_id *\/$/;"	m	struct:__anon38	access:public
__anon38::fanin	sis_header/atpg.h	/^    int *fanin;$/;"	m	struct:__anon38	access:public
__anon38::fanout	sis_header/atpg.h	/^    node_t **fanout;$/;"	m	struct:__anon38	access:public
__anon38::fault_id	sis_header/atpg.h	/^    int fault_id;$/;"	m	struct:__anon38	access:public
__anon38::nfanin	sis_header/atpg.h	/^    int nfanin;$/;"	m	struct:__anon38	access:public
__anon38::nfanout	sis_header/atpg.h	/^    int nfanout;$/;"	m	struct:__anon38	access:public
__anon38::order	sis_header/atpg.h	/^    int order;$/;"	m	struct:__anon38	access:public
__anon38::tmp	sis_header/atpg.h	/^    int tmp;$/;"	m	struct:__anon38	access:public
__anon38::true_id	sis_header/atpg.h	/^    int true_id;$/;"	m	struct:__anon38	access:public
__anon38::visited	sis_header/atpg.h	/^    int visited;$/;"	m	struct:__anon38	access:public
__anon4::add_nli	sis_header/sat.h	/^    bool add_nli;	\/* Add nonlocal implications? *\/$/;"	m	struct:__anon4	access:public
__anon4::add_unique	sis_header/sat.h	/^    bool add_unique;	\/* Assign values found by contradition?	*\/$/;"	m	struct:__anon4	access:public
__anon4::bktrack_lim	sis_header/sat.h	/^    int	bktrack_lim;	\/* Limit on backtracks for this phase *\/$/;"	m	struct:__anon4	access:public
__anon4::cl_order	sis_header/sat.h	/^    int cl_order;	\/* Subformula clause ordering *\/$/;"	m	struct:__anon4	access:public
__anon4::n_static_pass	sis_header/sat.h	/^    int	n_static_pass;	\/* Number of static GI passes to make *\/$/;"	m	struct:__anon4	access:public
__anon4::var_order	sis_header/sat.h	/^    int	var_order;	\/* Variable ordering for branching *\/$/;"	m	struct:__anon4	access:public
__anon5::bktrack	sis_header/sat.h	/^    int bktrack;$/;"	m	struct:__anon5	access:public
__anon5::gaveup	sis_header/sat.h	/^    bool gaveup;$/;"	m	struct:__anon5	access:public
__anon5::imply	sis_header/sat.h	/^    array_t *imply;$/;"	m	struct:__anon5	access:public
__anon5::lit_index	sis_header/sat.h	/^    int lit_index;$/;"	m	struct:__anon5	access:public
__anon5::matrix	sis_header/sat.h	/^    sm_matrix *matrix;$/;"	m	struct:__anon5	access:public
__anon5::n_impl	sis_header/sat.h	/^    int n_impl;$/;"	m	struct:__anon5	access:public
__anon5::nclause	sis_header/sat.h	/^    int nclause;$/;"	m	struct:__anon5	access:public
__anon5::one_clauses	sis_header/sat.h	/^    array_t *one_clauses;$/;"	m	struct:__anon5	access:public
__anon5::stk_cla	sis_header/sat.h	/^    array_t *stk_cla;$/;"	m	struct:__anon5	access:public
__anon5::stk_inc	sis_header/sat.h	/^    array_t *stk_inc;$/;"	m	struct:__anon5	access:public
__anon5::stk_var	sis_header/sat.h	/^    array_t *stk_var;$/;"	m	struct:__anon5	access:public
__anon5::strategy	sis_header/sat.h	/^    sat_strategy_t *strategy;$/;"	m	struct:__anon5	access:public
__anon6::info	sis_header/sat.h	/^    char *info;$/;"	m	struct:__anon6	access:public
__anon6::sat_id	sis_header/sat.h	/^    int sat_id;$/;"	m	struct:__anon6	access:public
__anon7::cap_factor	sis_header/power.h	/^    int cap_factor;        \/* The load of the gate *\/$/;"	m	struct:__anon7	access:public
__anon7::switching_prob	sis_header/power.h	/^    double switching_prob; \/* Expected number of transistions in one cycle *\/$/;"	m	struct:__anon7	access:public
__anon9::extern_pi	sis_header/seqbdd.h	/^  array_t *extern_pi;			\/* the external PI's (not present states) *\/$/;"	m	struct:__anon9	access:public
__anon9::generate_global_output	sis_header/seqbdd.h	/^  int generate_global_output;		\/* 0\/1 *\/$/;"	m	struct:__anon9	access:public
__anon9::init_node	sis_header/seqbdd.h	/^  node_t *init_node;			\/* initial state *\/$/;"	m	struct:__anon9	access:public
__anon9::is_product_network	sis_header/seqbdd.h	/^  int is_product_network;		\/* 0\/1 *\/$/;"	m	struct:__anon9	access:public
__anon9::main_node	sis_header/seqbdd.h	/^  node_t *main_node;			\/* main consistency output node: AND of the two net_nodes *\/$/;"	m	struct:__anon9	access:public
__anon9::main_nodes	sis_header/seqbdd.h	/^  node_t *main_nodes[2];		\/* net nodes: consistency output for each net (for verification only) *\/$/;"	m	struct:__anon9	access:public
__anon9::name_table	sis_header/seqbdd.h	/^  st_table *name_table;			\/* PIPO name is mapped to 0 or 1 (network 0 or network 1) *\/$/;"	m	struct:__anon9	access:public
__anon9::new_pi	sis_header/seqbdd.h	/^  array_t *new_pi;			$/;"	m	struct:__anon9	access:public
__anon9::org_pi	sis_header/seqbdd.h	/^  array_t *org_pi;			\/* the PI's before we introduce the consistency PI's *\/$/;"	m	struct:__anon9	access:public
__anon9::output_node	sis_header/seqbdd.h	/^  node_t *output_node;			\/* the main output node: AND of the xnor_nodes *\/$/;"	m	struct:__anon9	access:public
__anon9::pi_ordering	sis_header/seqbdd.h	/^  st_table *pi_ordering;		\/* some good order of the PI's *\/$/;"	m	struct:__anon9	access:public
__anon9::po_ordering	sis_header/seqbdd.h	/^  array_t *po_ordering;			\/* next_state_po, in some good order *\/$/;"	m	struct:__anon9	access:public
__anon9::transition_nodes	sis_header/seqbdd.h	/^  array_t *transition_nodes;		\/* nodes corresponding to (y_i == f_i(x)) for each i; product is trans relation *\/$/;"	m	struct:__anon9	access:public
__anon9::xnor_nodes	sis_header/seqbdd.h	/^  array_t *xnor_nodes;			\/* array of all xnor_nodes  (xnor of external outputs) *\/$/;"	m	struct:__anon9	access:public
__ftrace	debug.h	40;"	d
__trace	debug.h	39;"	d
_bnodelists	rewire.cpp	/^static Array<Array<BNode *> *> _bnodelists;$/;"	v	file:
_ignodelists	rewire.cpp	/^static Array<Array<IGNode *> *> _ignodelists;$/;"	v	file:
_nodelists	imply.cpp	/^static Array<Array<IGNode *> *> _nodelists;$/;"	v	file:
_nodelists	imply.noforced.cpp	/^static Array<Array<IGNode *> *> _nodelists;$/;"	v	file:
abort	array.h	/^	int abort(int error, int idx); \/\/ show error message and exit$/;"	p	class:Array	access:public	signature:(int error, int idx)
abort	array.h	/^int Array<T>::abort(int error, int idx) {$/;"	f	class:Array	signature:(int error, int idx)
abort	sis_header/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
abort	util/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
absDom	bnetwork.h	/^	Array<BNode *> absDom;$/;"	m	class:BNodeProperty	access:public
act_map_network	sis_header/pld.h	/^extern network_t *act_map_network(); \/* act_map.c *\/$/;"	p	signature:()
active_count	sis_header/espresso.h	/^    int active_count;           \/* Number of "active" sets *\/$/;"	m	struct:set_family	access:public
active_id	sis_header/atpg.h	/^    int active_id;$/;"	m	struct:__anon38	access:public
addBNodeSignal	ignetwork.h	/^	void addBNodeSignal(BNode *node);$/;"	p	class:IGNetwork	access:private	signature:(BNode *node)
addBNodeSignal	ignetwork.h	/^inline void IGNetwork::addBNodeSignal(BNode *node) {$/;"	f	class:IGNetwork	signature:(BNode *node)
addEdge	graph.h	/^	void addEdge(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
addEdge	graph.h	/^	void addEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep)
addEdge	graph.h	/^	void addEdge(char *faninName, char *fanoutName, EP &ep); \/\/ add and remove edges$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName, EP &ep)
addEdge	graph.h	/^	void addEdge(string &faninName, string &fanoutName, EP &ep);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName, EP &ep)
addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout, EP &ep)
addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(char *faninName, char *fanoutName, EP &ep) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName, EP &ep)
addEdge	graph.h	/^inline void Graph<GP, NP, EP>::addEdge(string &faninName, string &fanoutName, EP &ep) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName, EP &ep)
addFanin	node.h	/^	void addFanin(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
addFanin	node.h	/^inline void Node<NP, EP>::addFanin(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
addFanout	node.h	/^	void addFanout(Node<NP, EP> *node, EP &ep);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node, EP &ep)
addFanout	node.h	/^inline void Node<NP, EP>::addFanout(Node<NP, EP> *node, EP &ep) {$/;"	f	class:Node	signature:(Node<NP, EP> *node, EP &ep)
addSignal	ignetwork.h	/^	void addSignal(string &name, IGNode *ignodes[]);$/;"	p	class:IGNetwork	access:private	signature:(string &name, IGNode *ignodes[])
addSignal	ignetwork.h	/^inline void IGNetwork::addSignal(string &name, IGNode *ignodes[]) {$/;"	f	class:IGNetwork	signature:(string &name, IGNode *ignodes[])
add_inv_network	sis_header/phase.h	/^EXTERN void add_inv_network ARGS((network_t *));$/;"	p	signature:(network_t *)
add_inv_node	sis_header/phase.h	/^EXTERN int  add_inv_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
add_inverter	sis_header/library.h	/^    int add_inverter;$/;"	m	struct:library_struct	access:public
add_nli	sis_header/sat.h	/^    bool add_nli;	\/* Add nonlocal implications? *\/$/;"	m	struct:__anon4	access:public
add_unique	sis_header/sat.h	/^    bool add_unique;	\/* Assign values found by contradition?	*\/$/;"	m	struct:__anon4	access:public
adhoc	sis_header/bdd.h	/^	bdd_cache_stats adhoc;$/;"	m	struct:bdd_stats::__anon21	access:public
adhoc_cache	sis_header/bdd.h	/^	unsigned int adhoc_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
adhoc_cache	sis_header/bdd.h	/^      adhoc_cache;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
adhoc_ops	sis_header/bdd.h	/^      adhoc_ops;$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
all_po_values	sis_header/atpg.h	/^    unsigned *all_po_values;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
all_primes	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN pcover all_primes ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
all_true_value	sis_header/atpg.h	/^    unsigned *all_true_value;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
allocBNodelist	rewire.cpp	14;"	d	file:
allocIGNodelist	rewire.cpp	18;"	d	file:
allocNodelist	imply.cpp	14;"	d	file:
allocNodelist	imply.noforced.cpp	14;"	d	file:
alloc_range_data	sis_header/seqbdd.h	/^  seqbdd_range_f  *alloc_range_data;$/;"	m	struct:verif_options_t	access:public
alloc_sequences	sis_header/atpg.h	/^    sequence_t **alloc_sequences;	\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
and_input_masks	sis_header/atpg.h	/^    unsigned        *and_input_masks;$/;"	m	struct:atpg_sim_node_struct	access:public
and_output_mask	sis_header/atpg.h	/^    unsigned        and_output_mask;$/;"	m	struct:atpg_sim_node_struct	access:public
append	array.h	/^	void append(Array<T>& anotherArray); \/\/ append anotherArray to the end of this array$/;"	p	class:Array	access:public	signature:(Array<T>& anotherArray)
append	array.h	/^inline void Array<T>::append(Array<T>& anotherArray) {$/;"	f	class:Array	signature:(Array<T>& anotherArray)
area	sis_header/library.h	/^  double area; 			\/* the gate area *\/$/;"	m	struct:lib_gate_struct	access:public
area	sis_header/network.h	/^    double area;		\/* HACK: support area keyword *\/$/;"	m	struct:network_struct	access:public
area_given	sis_header/network.h	/^    int area_given;		\/* HACK: support area keyword *\/$/;"	m	struct:network_struct	access:public
arrayForEachItem	array/array.h	77;"	d
arrayForEachItem	sis_header/array.h	77;"	d
array_abort	array/array.c	/^array_abort(a,i)$/;"	f
array_abort	array/array.h	/^EXTERN int array_abort ARGS((array_t *, int));$/;"	p	signature:(array_t *, int)
array_abort	sis_header/array.h	/^EXTERN int array_abort ARGS((array_t *, int));$/;"	p	signature:(array_t *, int)
array_alloc	array/array.h	39;"	d
array_alloc	sis_header/array.h	39;"	d
array_append	array/array.c	/^array_append(array1, array2)$/;"	f
array_append	array/array.h	/^EXTERN int array_append ARGS((array_t *, array_t *));$/;"	p	signature:(array_t *, array_t *)
array_append	sis_header/array.h	/^EXTERN int array_append ARGS((array_t *, array_t *));$/;"	p	signature:(array_t *, array_t *)
array_data	array/array.h	74;"	d
array_data	sis_header/array.h	74;"	d
array_do_alloc	array/array.c	/^array_do_alloc(size, number)$/;"	f
array_do_alloc	array/array.h	/^EXTERN array_t *array_do_alloc ARGS((int, int));$/;"	p	signature:(int, int)
array_do_alloc	sis_header/array.h	/^EXTERN array_t *array_do_alloc ARGS((int, int));$/;"	p	signature:(int, int)
array_do_data	array/array.c	/^array_do_data(array)$/;"	f
array_do_data	array/array.h	/^EXTERN char *array_do_data ARGS((array_t *));$/;"	p	signature:(array_t *)
array_do_data	sis_header/array.h	/^EXTERN char *array_do_data ARGS((array_t *));$/;"	p	signature:(array_t *)
array_dup	array/array.c	/^array_dup(old)$/;"	f
array_dup	array/array.h	/^EXTERN array_t *array_dup ARGS((array_t *));$/;"	p	signature:(array_t *)
array_dup	sis_header/array.h	/^EXTERN array_t *array_dup ARGS((array_t *));$/;"	p	signature:(array_t *)
array_fetch	array.h	26;"	d
array_fetch	array.h	31;"	d
array_fetch	array/array.h	58;"	d
array_fetch	rewire_c.cpp	4;"	d	file:
array_fetch	sis_header/array.h	58;"	d
array_fetch	sis_interface.cpp	4;"	d	file:
array_fetch_last	array/array.h	68;"	d
array_fetch_last	sis_header/array.h	68;"	d
array_fetch_p	array/array.h	63;"	d
array_fetch_p	sis_header/array.h	63;"	d
array_free	array/array.c	/^array_free(array)$/;"	f
array_free	array/array.h	/^EXTERN void array_free ARGS((array_t *));$/;"	p	signature:(array_t *)
array_free	sis_header/array.h	/^EXTERN void array_free ARGS((array_t *));$/;"	p	signature:(array_t *)
array_global_index	array/array.c	/^unsigned int array_global_index;$/;"	v
array_global_insert	array/array.c	/^int array_global_insert;$/;"	v
array_insert	array/array.h	42;"	d
array_insert	sis_header/array.h	42;"	d
array_insert_last	array/array.h	55;"	d
array_insert_last	sis_header/array.h	55;"	d
array_join	array/array.c	/^array_join(array1, array2)$/;"	f
array_join	array/array.h	/^EXTERN array_t *array_join ARGS((array_t *, array_t *));$/;"	p	signature:(array_t *, array_t *)
array_join	sis_header/array.h	/^EXTERN array_t *array_join ARGS((array_t *, array_t *));$/;"	p	signature:(array_t *, array_t *)
array_n	array/array.h	71;"	d
array_n	sis_header/array.h	71;"	d
array_resize	array/array.c	/^array_resize(array, new_size)$/;"	f
array_resize	array/array.h	/^EXTERN int array_resize ARGS((array_t *, int));$/;"	p	signature:(array_t *, int)
array_resize	sis_header/array.h	/^EXTERN int array_resize ARGS((array_t *, int));$/;"	p	signature:(array_t *, int)
array_sort	array/array.c	/^array_sort(array, compare)$/;"	f
array_sort	array/array.h	/^EXTERN void array_sort ARGS((array_t *, int (*)()));$/;"	p	signature:(array_t *, int (*)())
array_sort	sis_header/array.h	/^EXTERN void array_sort ARGS((array_t *, int (*)()));$/;"	p	signature:(array_t *, int (*)())
array_t	array/array.h	/^typedef struct array_t {$/;"	s
array_t	array/array.h	/^} array_t;$/;"	t	typeref:struct:array_t
array_t	sis_header/array.h	/^typedef struct array_t {$/;"	s
array_t	sis_header/array.h	/^} array_t;$/;"	t	typeref:struct:array_t
array_t::index	array/array.h	/^    int	 index;		\/* combined index and locking flag.	*\/$/;"	m	struct:array_t	access:public
array_t::index	sis_header/array.h	/^    int	 index;		\/* combined index and locking flag.	*\/$/;"	m	struct:array_t	access:public
array_t::n_size	array/array.h	/^    int	 n_size;	\/* size of 'data' array (in objects)	*\/$/;"	m	struct:array_t	access:public
array_t::n_size	sis_header/array.h	/^    int	 n_size;	\/* size of 'data' array (in objects)	*\/$/;"	m	struct:array_t	access:public
array_t::num	array/array.h	/^    int	 num;		\/* number of array elements.		*\/$/;"	m	struct:array_t	access:public
array_t::num	sis_header/array.h	/^    int	 num;		\/* number of array elements.		*\/$/;"	m	struct:array_t	access:public
array_t::obj_size	array/array.h	/^    int	 obj_size;	\/* size of each array object.		*\/$/;"	m	struct:array_t	access:public
array_t::obj_size	sis_header/array.h	/^    int	 obj_size;	\/* size of each array object.		*\/$/;"	m	struct:array_t	access:public
array_t::space	array/array.h	/^    char *space;$/;"	m	struct:array_t	access:public
array_t::space	sis_header/array.h	/^    char *space;$/;"	m	struct:array_t	access:public
array_uniq	array/array.c	/^array_uniq(array, compare, free_func)$/;"	f
array_uniq	array/array.h	/^EXTERN void array_uniq ARGS((array_t *, int (*)(), void (*)()));$/;"	p	signature:(array_t *, int (*)(), void (*)())
array_uniq	sis_header/array.h	/^EXTERN void array_uniq ARGS((array_t *, int (*)(), void (*)()));$/;"	p	signature:(array_t *, int (*)(), void (*)())
ascend	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int ascend ARGS((pset *, pset *));$/;"	p	signature:(pset *, pset *)
assert	sis_header/util.h	211;"	d
assert	sis_header/util.h	215;"	d
assert	sis_header/util.h	217;"	d
assert	util/util.h	211;"	d
assert	util/util.h	213;"	d
assignDominator	bnetwork.h	/^	void assignDominator();$/;"	p	class:BNetwork	access:public	signature:()
assignDominator	bnetwork.h	/^inline void BNetwork::assignDominator() {$/;"	f	class:BNetwork	signature:()
assignDominatorRecur	bnetwork.cpp	/^void BNetwork::assignDominatorRecur(BNode *node) {$/;"	f	class:BNetwork	signature:(BNode *node)
assignDominatorRecur	bnetwork.h	/^	void assignDominatorRecur(BNode *node);$/;"	p	class:BNetwork	access:private	signature:(BNode *node)
associatedNodes	bnetwork.h	/^	Array<IGNode *> associatedNodes;$/;"	m	class:IGAssociateProperty	access:public
astg	sis_header/network.h	/^    astg_t *astg;		\/* Asynch. Signal Transition Graph.	*\/$/;"	m	struct:network_struct	access:public
astg_dup	sis_header/astg.h	/^astg_t	*astg_dup ARGS((astg_t *));$/;"	p	signature:(astg_t *)
astg_free	sis_header/astg.h	/^void	 astg_free ARGS((astg_t *));$/;"	p	signature:(astg_t *)
astg_t	sis_header/astg.h	/^typedef char astg_t;$/;"	t
atof	sis_header/util.h	/^extern double atof();$/;"	p	signature:()
atof	util/util.h	/^extern double atof();$/;"	p	signature:()
atpg	sis_header/node.h	/^    char *atpg;			\/* reserved for atpg package *\/$/;"	m	struct:node_struct	access:public
atpg_clause_info_free	sis_header/atpg.h	/^extern void atpg_clause_info_free();$/;"	p	signature:()
atpg_clause_t	sis_header/atpg.h	/^} atpg_clause_t;$/;"	t	typeref:struct:__anon38
atpg_comb_sim_setup	sis_header/atpg.h	/^extern void atpg_comb_sim_setup();$/;"	p	signature:()
atpg_comb_sim_unsetup	sis_header/atpg.h	/^extern void atpg_comb_sim_unsetup();$/;"	p	signature:()
atpg_comb_simulate_old_sequences	sis_header/atpg.h	/^extern void atpg_comb_simulate_old_sequences();$/;"	p	signature:()
atpg_comb_single_fault_simulate	sis_header/atpg.h	/^extern lsList atpg_comb_single_fault_simulate();$/;"	p	signature:()
atpg_derive_excitation_vector	sis_header/atpg.h	/^extern void atpg_derive_excitation_vector();$/;"	p	signature:()
atpg_exdc_sim_link	sis_header/atpg.h	/^extern void atpg_exdc_sim_link();$/;"	p	signature:()
atpg_free_info	sis_header/atpg.h	/^extern void atpg_free_info();$/;"	p	signature:()
atpg_gen_faults	sis_header/atpg.h	/^extern void atpg_gen_faults();$/;"	p	signature:()
atpg_gen_node_faults	sis_header/atpg.h	/^extern void atpg_gen_node_faults();$/;"	p	signature:()
atpg_info_init	sis_header/atpg.h	/^extern atpg_info_t *atpg_info_init();$/;"	p	signature:()
atpg_info_t	sis_header/atpg.h	/^} atpg_info_t;$/;"	t	typeref:struct:__anon35
atpg_network_fault_clauses	sis_header/atpg.h	/^extern int atpg_network_fault_clauses();$/;"	p	signature:()
atpg_node_clause	sis_header/atpg.h	/^extern void atpg_node_clause();$/;"	p	signature:()
atpg_opt	sis_header/atpg.h	/^    atpg_options_t *atpg_opt;		\/* all user options *\/$/;"	m	struct:__anon35	access:public
atpg_options_t	sis_header/atpg.h	/^} atpg_options_t;$/;"	t	typeref:struct:__anon32
atpg_print_bdd	sis_header/atpg.h	/^extern void atpg_print_bdd();$/;"	p	signature:()
atpg_print_fault	sis_header/atpg.h	/^extern void atpg_print_fault();$/;"	p	signature:()
atpg_print_results	sis_header/atpg.h	/^extern void atpg_print_results();$/;"	p	signature:()
atpg_print_some_vectors	sis_header/atpg.h	/^extern void atpg_print_some_vectors();$/;"	p	signature:()
atpg_print_vectors	sis_header/atpg.h	/^extern void atpg_print_vectors();$/;"	p	signature:()
atpg_product_setup_seq_info	sis_header/atpg.h	/^extern void atpg_product_setup_seq_info();$/;"	p	signature:()
atpg_random_cover	sis_header/atpg.h	/^extern lsList atpg_random_cover();$/;"	p	signature:()
atpg_reset_sim_masks	sis_header/atpg.h	/^extern void atpg_reset_sim_masks();$/;"	p	signature:()
atpg_sat	sis_header/atpg.h	/^    sat_t *atpg_sat;			\/* sat structure *\/$/;"	m	struct:__anon36	access:public
atpg_sat_clause_begin	sis_header/atpg.h	/^extern void atpg_sat_clause_begin();$/;"	p	signature:()
atpg_sat_clause_end	sis_header/atpg.h	/^extern void atpg_sat_clause_end();$/;"	p	signature:()
atpg_sat_free	sis_header/atpg.h	/^extern void atpg_sat_free();$/;"	p	signature:()
atpg_sat_init	sis_header/atpg.h	/^extern void atpg_sat_init();$/;"	p	signature:()
atpg_sat_node_info_setup	sis_header/atpg.h	/^extern void atpg_sat_node_info_setup();$/;"	p	signature:()
atpg_seq_info_init	sis_header/atpg.h	/^extern seq_info_t *atpg_seq_info_init();$/;"	p	signature:()
atpg_seq_single_fault_simulate	sis_header/atpg.h	/^extern lsList atpg_seq_single_fault_simulate();$/;"	p	signature:()
atpg_set_sim_masks	sis_header/atpg.h	/^extern void atpg_set_sim_masks();$/;"	p	signature:()
atpg_setup_clause_info	sis_header/atpg.h	/^extern void atpg_setup_clause_info();$/;"	p	signature:()
atpg_setup_seq_info	sis_header/atpg.h	/^extern void atpg_setup_seq_info();$/;"	p	signature:()
atpg_sf_reset_sim_masks	sis_header/atpg.h	/^extern void atpg_sf_reset_sim_masks();$/;"	p	signature:()
atpg_sf_set_sim_masks	sis_header/atpg.h	/^extern void atpg_sf_set_sim_masks();$/;"	p	signature:()
atpg_sim_free	sis_header/atpg.h	/^extern void atpg_sim_free();$/;"	p	signature:()
atpg_sim_node_struct	sis_header/atpg.h	/^struct atpg_sim_node_struct {$/;"	s
atpg_sim_node_struct::and_input_masks	sis_header/atpg.h	/^    unsigned        *and_input_masks;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::and_output_mask	sis_header/atpg.h	/^    unsigned        and_output_mask;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::eval	sis_header/atpg.h	/^    VoidFN          eval;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::fanin_values	sis_header/atpg.h	/^    unsigned        **fanin_values;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::fanout	sis_header/atpg.h	/^    int  	    *fanout;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::function	sis_header/atpg.h	/^    int             **function; 	\/* function[cube][input] is 0, 1, 2 *\/$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::inputs	sis_header/atpg.h	/^    unsigned        **inputs; 		\/* inputs[0] is negative,$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::n_cubes	sis_header/atpg.h	/^    int             n_cubes;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::n_inputs	sis_header/atpg.h	/^    int             n_inputs;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::nfanout	sis_header/atpg.h	/^    int             nfanout;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::node	sis_header/atpg.h	/^    node_t 	    *node;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::or_input_masks	sis_header/atpg.h	/^    unsigned        *or_input_masks;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::or_output_mask	sis_header/atpg.h	/^    unsigned        or_output_mask;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::type	sis_header/atpg.h	/^    node_function_t type;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::uid	sis_header/atpg.h	/^    int             uid;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::value	sis_header/atpg.h	/^    unsigned        value;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_struct::visited	sis_header/atpg.h	/^    int 	    visited;$/;"	m	struct:atpg_sim_node_struct	access:public
atpg_sim_node_t	sis_header/atpg.h	/^typedef struct atpg_sim_node_struct atpg_sim_node_t;$/;"	t	typeref:struct:atpg_sim_node_struct
atpg_sim_sat_info_init	sis_header/atpg.h	/^extern atpg_ss_info_t *atpg_sim_sat_info_init();$/;"	p	signature:()
atpg_sim_setup	sis_header/atpg.h	/^extern void atpg_sim_setup();$/;"	p	signature:()
atpg_sim_unsetup	sis_header/atpg.h	/^extern void atpg_sim_unsetup();$/;"	p	signature:()
atpg_simulate_old_sequences	sis_header/atpg.h	/^extern void atpg_simulate_old_sequences();$/;"	p	signature:()
atpg_simulate_pattern_fault	sis_header/atpg.h	/^extern void atpg_simulate_pattern_fault();$/;"	p	signature:()
atpg_ss_info_t	sis_header/atpg.h	/^} atpg_ss_info_t;$/;"	t	typeref:struct:__anon36
atpg_verify_test	sis_header/atpg.h	/^extern bool atpg_verify_test();$/;"	p	signature:()
attach_dcnetwork_to_network	sis_header/network.h	/^EXTERN st_table *attach_dcnetwork_to_network ARGS((network_t *));$/;"	p	signature:(network_t *)
avl_count	sis_header/avl.h	/^EXTERN int avl_count ARGS((avl_tree *));$/;"	p	signature:(avl_tree *)
avl_delete	sis_header/avl.h	/^EXTERN int avl_delete ARGS((avl_tree *, char **, char **));$/;"	p	signature:(avl_tree *, char **, char **)
avl_find_or_add	sis_header/avl.h	/^EXTERN int avl_find_or_add ARGS((avl_tree *, char *, char ***));$/;"	p	signature:(avl_tree *, char *, char ***)
avl_first	sis_header/avl.h	/^EXTERN int avl_first ARGS((avl_tree *, char **, char **));$/;"	p	signature:(avl_tree *, char **, char **)
avl_foreach	sis_header/avl.h	/^EXTERN void avl_foreach ARGS((avl_tree *, void (*)(), int));$/;"	p	signature:(avl_tree *, void (*)(), int)
avl_foreach_item	sis_header/avl.h	61;"	d
avl_free_gen	sis_header/avl.h	/^EXTERN void avl_free_gen ARGS((avl_generator *));$/;"	p	signature:(avl_generator *)
avl_free_table	sis_header/avl.h	/^EXTERN void avl_free_table ARGS((avl_tree *, void (*)(), void (*)()));$/;"	p	signature:(avl_tree *, void (*)(), void (*)())
avl_gen	sis_header/avl.h	/^EXTERN int avl_gen ARGS((avl_generator *, char **, char **));$/;"	p	signature:(avl_generator *, char **, char **)
avl_generator	sis_header/avl.h	/^typedef struct avl_generator_struct avl_generator;$/;"	t	typeref:struct:avl_generator_struct
avl_generator_struct	sis_header/avl.h	/^struct avl_generator_struct {$/;"	s
avl_generator_struct::count	sis_header/avl.h	/^    int count;$/;"	m	struct:avl_generator_struct	access:public
avl_generator_struct::nodelist	sis_header/avl.h	/^    avl_node **nodelist;$/;"	m	struct:avl_generator_struct	access:public
avl_generator_struct::tree	sis_header/avl.h	/^    avl_tree *tree;$/;"	m	struct:avl_generator_struct	access:public
avl_init_gen	sis_header/avl.h	/^EXTERN avl_generator *avl_init_gen ARGS((avl_tree *, int));$/;"	p	signature:(avl_tree *, int)
avl_init_table	sis_header/avl.h	/^EXTERN avl_tree *avl_init_table ARGS((int (*)()));$/;"	p	signature:(int (*)())
avl_insert	sis_header/avl.h	/^EXTERN int avl_insert ARGS((avl_tree *, char *, char *));$/;"	p	signature:(avl_tree *, char *, char *)
avl_is_member	sis_header/avl.h	59;"	d
avl_last	sis_header/avl.h	/^EXTERN int avl_last ARGS((avl_tree *, char **, char **));$/;"	p	signature:(avl_tree *, char **, char **)
avl_lookup	sis_header/avl.h	/^EXTERN int avl_lookup ARGS((avl_tree *, char *, char **));$/;"	p	signature:(avl_tree *, char *, char **)
avl_node	sis_header/avl.h	/^typedef struct avl_node_struct avl_node;$/;"	t	typeref:struct:avl_node_struct
avl_node_struct	sis_header/avl.h	/^struct avl_node_struct {$/;"	s
avl_node_struct::height	sis_header/avl.h	/^    int height;$/;"	m	struct:avl_node_struct	access:public
avl_node_struct::key	sis_header/avl.h	/^    char *key;$/;"	m	struct:avl_node_struct	access:public
avl_node_struct::left	sis_header/avl.h	/^    avl_node *left, *right;$/;"	m	struct:avl_node_struct	access:public
avl_node_struct::right	sis_header/avl.h	/^    avl_node *left, *right;$/;"	m	struct:avl_node_struct	access:public
avl_node_struct::value	sis_header/avl.h	/^    char *value;$/;"	m	struct:avl_node_struct	access:public
avl_numcmp	sis_header/avl.h	/^EXTERN int avl_numcmp ARGS((char *, char *));$/;"	p	signature:(char *, char *)
avl_tree	sis_header/avl.h	/^typedef struct avl_tree_struct avl_tree;$/;"	t	typeref:struct:avl_tree_struct
avl_tree_struct	sis_header/avl.h	/^struct avl_tree_struct {$/;"	s
avl_tree_struct::compar	sis_header/avl.h	/^    int (*compar)();$/;"	m	struct:avl_tree_struct	access:public
avl_tree_struct::modified	sis_header/avl.h	/^    int modified;$/;"	m	struct:avl_tree_struct	access:public
avl_tree_struct::num_entries	sis_header/avl.h	/^    int num_entries;$/;"	m	struct:avl_tree_struct	access:public
avl_tree_struct::root	sis_header/avl.h	/^    avl_node *root;$/;"	m	struct:avl_tree_struct	access:public
bdd	sis_header/node.h	/^    char *bdd;			\/* reserved for bdd package *\/$/;"	m	struct:node_struct	access:public
bdd_add_varids_to_table	sis_header/atpg.h	/^extern void bdd_add_varids_to_table();$/;"	p	signature:()
bdd_and	sis_header/bdd.h	/^EXTERN bdd_t *bdd_and ARGS((bdd_t *, bdd_t *, boolean, boolean));$/;"	p	signature:(bdd_t *, bdd_t *, boolean, boolean)
bdd_and_smooth	sis_header/bdd.h	/^EXTERN bdd_t *bdd_and_smooth ARGS((bdd_t *, bdd_t *, array_t *));$/;"	p	signature:(bdd_t *, bdd_t *, array_t *)
bdd_between	sis_header/bdd.h	/^EXTERN bdd_t *bdd_between ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_cache_stats	sis_header/bdd.h	/^typedef struct bdd_cache_stats {$/;"	s
bdd_cache_stats	sis_header/bdd.h	/^} bdd_cache_stats;$/;"	t	typeref:struct:bdd_cache_stats
bdd_cache_stats::collisions	sis_header/bdd.h	/^    unsigned int collisions;$/;"	m	struct:bdd_cache_stats	access:public
bdd_cache_stats::hits	sis_header/bdd.h	/^    unsigned int hits;$/;"	m	struct:bdd_cache_stats	access:public
bdd_cache_stats::inserts	sis_header/bdd.h	/^    unsigned int inserts;$/;"	m	struct:bdd_cache_stats	access:public
bdd_cache_stats::misses	sis_header/bdd.h	/^    unsigned int misses;$/;"	m	struct:bdd_cache_stats	access:public
bdd_cofactor	sis_header/bdd.h	/^EXTERN bdd_t *bdd_cofactor ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_compose	sis_header/bdd.h	/^EXTERN bdd_t *bdd_compose ARGS((bdd_t *, bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *, bdd_t *)
bdd_consensus	sis_header/bdd.h	/^EXTERN bdd_t *bdd_consensus ARGS((bdd_t *, array_t *));$/;"	p	signature:(bdd_t *, array_t *)
bdd_count_onset	sis_header/bdd.h	/^EXTERN double bdd_count_onset ARGS((bdd_t *, array_t *));$/;"	p	signature:(bdd_t *, array_t *)
bdd_cproject	sis_header/bdd.h	/^EXTERN bdd_t *bdd_cproject ARGS((bdd_t *, array_t *));$/;"	p	signature:(bdd_t *, array_t *)
bdd_create_variable	sis_header/bdd.h	/^EXTERN bdd_t *bdd_create_variable ARGS((bdd_manager *));		$/;"	p	signature:(bdd_manager *)
bdd_create_variable_after	sis_header/bdd.h	/^EXTERN bdd_t *bdd_create_variable_after ARGS((bdd_manager *, bdd_variableId));$/;"	p	signature:(bdd_manager *, bdd_variableId)
bdd_dup	sis_header/bdd.h	/^EXTERN bdd_t *bdd_dup ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_dynamic_reordering	sis_header/bdd.h	/^EXTERN void bdd_dynamic_reordering ARGS((bdd_manager *, bdd_reorder_type_t));$/;"	p	signature:(bdd_manager *, bdd_reorder_type_t)
bdd_else	sis_header/bdd.h	/^EXTERN bdd_t *bdd_else ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_end	sis_header/bdd.h	/^EXTERN void bdd_end ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
bdd_equal	sis_header/bdd.h	/^EXTERN boolean bdd_equal ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_external_hooks	sis_header/bdd.h	/^typedef struct bdd_external_hooks {$/;"	s
bdd_external_hooks	sis_header/bdd.h	/^} bdd_external_hooks;$/;"	t	typeref:struct:bdd_external_hooks
bdd_external_hooks::mdd	sis_header/bdd.h	/^    char *mdd;$/;"	m	struct:bdd_external_hooks	access:public
bdd_external_hooks::network	sis_header/bdd.h	/^    char *network;$/;"	m	struct:bdd_external_hooks	access:public
bdd_external_hooks::undef1	sis_header/bdd.h	/^    char *undef1;$/;"	m	struct:bdd_external_hooks	access:public
bdd_extract_var_array	sis_header/seqbdd.h	/^extern array_t *bdd_extract_var_array(\/* array_t *node_list *\/);$/;"	p	signature:( )
bdd_first_cube	sis_header/bdd.h	/^EXTERN bdd_gen *bdd_first_cube ARGS((bdd_t *, array_t **));$/;"	p	signature:(bdd_t *, array_t **)
bdd_first_node	sis_header/bdd.h	/^EXTERN bdd_gen *bdd_first_node ARGS((bdd_t *, bdd_node **));$/;"	p	signature:(bdd_t *, bdd_node **)
bdd_free	sis_header/bdd.h	/^EXTERN void bdd_free ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_gen	sis_header/bdd.h	/^typedef struct bdd_gen bdd_gen;$/;"	t	typeref:struct:bdd_gen
bdd_gen_free	sis_header/bdd.h	/^EXTERN int bdd_gen_free ARGS((bdd_gen *));$/;"	p	signature:(bdd_gen *)
bdd_get_external_hooks	sis_header/bdd.h	/^EXTERN bdd_external_hooks *bdd_get_external_hooks ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
bdd_get_id_from_level	sis_header/bdd.h	/^EXTERN bdd_variableId bdd_get_id_from_level ARGS((bdd_manager *, long));$/;"	p	signature:(bdd_manager *, long)
bdd_get_manager	sis_header/bdd.h	/^EXTERN bdd_manager *bdd_get_manager ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_get_node	sis_header/bdd.h	/^EXTERN bdd_node *bdd_get_node ARGS((bdd_t *, boolean *));$/;"	p	signature:(bdd_t *, boolean *)
bdd_get_sorted_varids	sis_header/seqbdd.h	/^extern array_t *bdd_get_sorted_varids(\/* array_t *var_array *\/);$/;"	p	signature:( )
bdd_get_stats	sis_header/bdd.h	/^EXTERN void bdd_get_stats ARGS((bdd_manager *, bdd_stats *));$/;"	p	signature:(bdd_manager *, bdd_stats *)
bdd_get_support	sis_header/bdd.h	/^EXTERN var_set_t *bdd_get_support ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_get_variable	sis_header/bdd.h	/^EXTERN bdd_t *bdd_get_variable ARGS((bdd_manager *, bdd_variableId));	$/;"	p	signature:(bdd_manager *, bdd_variableId)
bdd_get_varids	sis_header/bdd.h	/^EXTERN array_t *bdd_get_varids ARGS((array_t *));$/;"	p	signature:(array_t *)
bdd_get_varids	sis_header/seqbdd.h	/^extern array_t *bdd_get_varids(\/* array_t *var_array *\/);$/;"	p	signature:( )
bdd_incr_and_smooth	sis_header/seqbdd.h	/^extern bdd_t *bdd_incr_and_smooth();$/;"	p	signature:()
bdd_is_cube	sis_header/atpg.h	/^extern bool bdd_is_cube();$/;"	p	signature:()
bdd_is_cube	sis_header/bdd.h	/^EXTERN boolean bdd_is_cube ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_is_gen_empty	sis_header/bdd.h	/^EXTERN boolean bdd_is_gen_empty ARGS((bdd_gen *));$/;"	p	signature:(bdd_gen *)
bdd_is_tautology	sis_header/bdd.h	/^EXTERN boolean bdd_is_tautology ARGS((bdd_t *, boolean));$/;"	p	signature:(bdd_t *, boolean)
bdd_ite	sis_header/bdd.h	/^EXTERN bdd_t *bdd_ite ARGS((bdd_t *, bdd_t *, bdd_t *, boolean, boolean, boolean));$/;"	p	signature:(bdd_t *, bdd_t *, bdd_t *, boolean, boolean, boolean)
bdd_leq	sis_header/bdd.h	/^EXTERN boolean bdd_leq ARGS((bdd_t *, bdd_t *, boolean, boolean));$/;"	p	signature:(bdd_t *, bdd_t *, boolean, boolean)
bdd_list	sis_header/network.h	/^    lsList bdd_list;            \/* list of bdd managers *\/$/;"	m	struct:network_struct	access:public
bdd_literal	sis_header/bdd.h	/^typedef int bdd_literal;	                \/* integers in the set { 0, 1, 2 } *\/$/;"	t
bdd_manager	sis_header/bdd.h	/^typedef struct DdManager bdd_manager;	        \/* referenced via a pointer only *\/$/;"	t	typeref:struct:DdManager
bdd_mgr_init	sis_header/bdd.h	/^typedef struct bdd_mgr_init {$/;"	s
bdd_mgr_init	sis_header/bdd.h	/^} bdd_mgr_init;$/;"	t	typeref:struct:bdd_mgr_init
bdd_mgr_init::ITE_cache	sis_header/bdd.h	/^    } ITE_cache,$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::ITE_const_cache	sis_header/bdd.h	/^      ITE_const_cache,$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::__anon16::max_size	sis_header/bdd.h	/^        unsigned int max_size;        \/* max allowable number of buckets; for adhoc, max allowable number of entries *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::__anon16::on	sis_header/bdd.h	/^        boolean on;                   \/* TRUE\/FALSE: is the cache on *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::__anon16::resize_at	sis_header/bdd.h	/^        unsigned int resize_at;       \/* percentage at which to resize (e.g. 85% is 85); doesn't apply to adhoc *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::__anon17::on	sis_header/bdd.h	/^      boolean on;                     \/* TRUE\/FALSE: is the garbage collector on *\/$/;"	m	struct:bdd_mgr_init::__anon17	access:public
bdd_mgr_init::__anon18::daemon	sis_header/bdd.h	/^      void (*daemon)();               \/* used for callback when memory limit exceeded *\/$/;"	m	struct:bdd_mgr_init::__anon18	access:public
bdd_mgr_init::__anon18::limit	sis_header/bdd.h	/^      unsigned int limit;             \/* upper bound on memory allocated by the manager; in megabytes *\/$/;"	m	struct:bdd_mgr_init::__anon18	access:public
bdd_mgr_init::__anon19::init_blocks	sis_header/bdd.h	/^      unsigned int init_blocks;       \/* number of bdd_nodeBlocks initially allocated *\/$/;"	m	struct:bdd_mgr_init::__anon19	access:public
bdd_mgr_init::__anon19::ratio	sis_header/bdd.h	/^      float ratio;                    \/* allocate new bdd_nodes to achieve ratio of used to unused nodes *\/$/;"	m	struct:bdd_mgr_init::__anon19	access:public
bdd_mgr_init::adhoc_cache	sis_header/bdd.h	/^      adhoc_cache;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon16	access:public
bdd_mgr_init::garbage_collector	sis_header/bdd.h	/^    } garbage_collector;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon17	access:public
bdd_mgr_init::memory	sis_header/bdd.h	/^    } memory;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon18	access:public
bdd_mgr_init::nodes	sis_header/bdd.h	/^    } nodes;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon19	access:public
bdd_min_match_type_t	sis_header/bdd.h	/^} bdd_min_match_type_t;$/;"	t	typeref:enum:__anon20
bdd_minimize	sis_header/bdd.h	/^EXTERN bdd_t *bdd_minimize ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_minimize_with_params	sis_header/bdd.h	/^EXTERN bdd_t *bdd_minimize_with_params ARGS((bdd_t *, bdd_t *, bdd_min_match_type_t, boolean, boolean, boolean));$/;"	p	signature:(bdd_t *, bdd_t *, bdd_min_match_type_t, boolean, boolean, boolean)
bdd_next_cube	sis_header/bdd.h	/^EXTERN boolean bdd_next_cube ARGS((bdd_gen *, array_t **));$/;"	p	signature:(bdd_gen *, array_t **)
bdd_next_node	sis_header/bdd.h	/^EXTERN boolean bdd_next_node ARGS((bdd_gen *, bdd_node **));$/;"	p	signature:(bdd_gen *, bdd_node **)
bdd_node	sis_header/bdd.h	/^typedef struct DdNode bdd_node;                 \/* referenced via a pointer only *\/$/;"	t	typeref:struct:DdNode
bdd_not	sis_header/bdd.h	/^EXTERN bdd_t *bdd_not ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_num_vars	sis_header/bdd.h	/^EXTERN unsigned int bdd_num_vars ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
bdd_one	sis_header/bdd.h	/^EXTERN bdd_t *bdd_one ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
bdd_or	sis_header/bdd.h	/^EXTERN bdd_t *bdd_or ARGS((bdd_t *, bdd_t *, boolean, boolean));$/;"	p	signature:(bdd_t *, bdd_t *, boolean, boolean)
bdd_print	sis_header/bdd.h	/^EXTERN void bdd_print ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_print_any_minterm	sis_header/seqbdd.h	/^extern void bdd_print_any_minterm(\/* bdd_t *fn *\/);$/;"	p	signature:( )
bdd_print_stats	sis_header/bdd.h	/^EXTERN void bdd_print_stats ARGS((bdd_stats, FILE *));$/;"	p	signature:(bdd_stats, FILE *)
bdd_range_fill_options	sis_header/seqbdd.h	/^extern int bdd_range_fill_options();$/;"	p	signature:()
bdd_read_reordering_flag	sis_header/bdd.h	/^EXTERN int bdd_read_reordering_flag ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
bdd_register_daemon	sis_header/bdd.h	/^EXTERN void bdd_register_daemon ARGS((bdd_manager *, void (*daemon)()));$/;"	p	signature:(bdd_manager *, void (*daemon)())
bdd_reorder_type_t	sis_header/bdd.h	/^} bdd_reorder_type_t;$/;"	t	typeref:enum:__anon29
bdd_set_gc_mode	sis_header/bdd.h	/^EXTERN void bdd_set_gc_mode ARGS((bdd_manager *, boolean));$/;"	p	signature:(bdd_manager *, boolean)
bdd_set_mgr_init_dflts	sis_header/bdd.h	/^EXTERN void bdd_set_mgr_init_dflts ARGS((bdd_mgr_init *));$/;"	p	signature:(bdd_mgr_init *)
bdd_size	sis_header/bdd.h	/^EXTERN int bdd_size ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_sizes	sis_header/seqbdd.h	/^  seqbdd_sizes_f  *bdd_sizes;$/;"	m	struct:verif_options_t	access:public
bdd_smooth	sis_header/bdd.h	/^EXTERN bdd_t *bdd_smooth ARGS((bdd_t *, array_t *));$/;"	p	signature:(bdd_t *, array_t *)
bdd_start	sis_header/bdd.h	/^EXTERN bdd_manager *bdd_start ARGS((int));$/;"	p	signature:(int)
bdd_start_with_params	sis_header/bdd.h	/^EXTERN bdd_manager *bdd_start_with_params ARGS((int, bdd_mgr_init *));$/;"	p	signature:(int, bdd_mgr_init *)
bdd_stats	sis_header/bdd.h	/^typedef struct bdd_stats {$/;"	s
bdd_stats	sis_header/bdd.h	/^} bdd_stats;$/;"	t	typeref:struct:bdd_stats
bdd_stats::ITE_constant_ops	sis_header/bdd.h	/^      ITE_constant_ops,$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
bdd_stats::ITE_ops	sis_header/bdd.h	/^    } ITE_ops,$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
bdd_stats::__anon21::adhoc	sis_header/bdd.h	/^	bdd_cache_stats adhoc;$/;"	m	struct:bdd_stats::__anon21	access:public
bdd_stats::__anon21::consttable	sis_header/bdd.h	/^	bdd_cache_stats consttable;$/;"	m	struct:bdd_stats::__anon21	access:public
bdd_stats::__anon21::hashtable	sis_header/bdd.h	/^	bdd_cache_stats hashtable;   \/* the unique table; collisions and inserts fields not used *\/ $/;"	m	struct:bdd_stats::__anon21	access:public
bdd_stats::__anon21::itetable	sis_header/bdd.h	/^	bdd_cache_stats itetable;$/;"	m	struct:bdd_stats::__anon21	access:public
bdd_stats::__anon22::__anon23::cached	sis_header/bdd.h	/^	    unsigned int cached;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
bdd_stats::__anon22::__anon23::full	sis_header/bdd.h	/^	    unsigned int full;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
bdd_stats::__anon22::__anon23::trivial	sis_header/bdd.h	/^	    unsigned int trivial;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
bdd_stats::__anon22::calls	sis_header/bdd.h	/^	unsigned int calls;$/;"	m	struct:bdd_stats::__anon22	access:public
bdd_stats::__anon22::returns	sis_header/bdd.h	/^	} returns;$/;"	m	struct:bdd_stats::__anon22	typeref:struct:bdd_stats::__anon22::__anon23	access:public
bdd_stats::__anon24::total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon24	access:public
bdd_stats::__anon25::peak	sis_header/bdd.h	/^        unsigned int peak;$/;"	m	struct:bdd_stats::__anon25	access:public
bdd_stats::__anon25::total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon25	access:public
bdd_stats::__anon25::unused	sis_header/bdd.h	/^	unsigned int unused;$/;"	m	struct:bdd_stats::__anon25	access:public
bdd_stats::__anon25::used	sis_header/bdd.h	/^	unsigned int used;$/;"	m	struct:bdd_stats::__anon25	access:public
bdd_stats::__anon26::blocks	sis_header/bdd.h	/^        unsigned int blocks; $/;"	m	struct:bdd_stats::__anon26	access:public
bdd_stats::__anon26::total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon26	access:public
bdd_stats::__anon26::unused	sis_header/bdd.h	/^	unsigned int unused;$/;"	m	struct:bdd_stats::__anon26	access:public
bdd_stats::__anon26::used	sis_header/bdd.h	/^	unsigned int used;$/;"	m	struct:bdd_stats::__anon26	access:public
bdd_stats::__anon27::nodes_collected	sis_header/bdd.h	/^        unsigned int nodes_collected; \/* cumulative number of nodes collected over life of manager *\/$/;"	m	struct:bdd_stats::__anon27	access:public
bdd_stats::__anon27::runtime	sis_header/bdd.h	/^        long runtime;           \/* cumulative CPU time spent garbage collecting *\/$/;"	m	struct:bdd_stats::__anon27	access:public
bdd_stats::__anon27::times	sis_header/bdd.h	/^	unsigned int times;     \/* the number of times the garbage-collector has run *\/$/;"	m	struct:bdd_stats::__anon27	access:public
bdd_stats::__anon28::ITE_cache	sis_header/bdd.h	/^	unsigned int ITE_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::ITE_const_cache	sis_header/bdd.h	/^	unsigned int ITE_const_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::adhoc_cache	sis_header/bdd.h	/^	unsigned int adhoc_cache;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::ext_ptrs	sis_header/bdd.h	/^	unsigned int ext_ptrs;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::first_sbrk	sis_header/bdd.h	/^        int first_sbrk;         \/* value of sbrk at start of manager; used to analyze memory usage *\/$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::hashtable	sis_header/bdd.h	/^	unsigned int hashtable;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::last_sbrk	sis_header/bdd.h	/^        int last_sbrk;          \/* value of last sbrk (see "man sbrk") fetched; used to analyze memory usage *\/$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::manager	sis_header/bdd.h	/^        unsigned int manager;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::nodes	sis_header/bdd.h	/^	unsigned int nodes;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::__anon28::total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon28	access:public
bdd_stats::adhoc_ops	sis_header/bdd.h	/^      adhoc_ops;$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon22	access:public
bdd_stats::blocks	sis_header/bdd.h	/^    } blocks;		\/* bdd_nodeBlock count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon24	access:public
bdd_stats::cache	sis_header/bdd.h	/^    } cache;		\/* various cache statistics *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon21	access:public
bdd_stats::extptrs	sis_header/bdd.h	/^    } extptrs;		\/* bdd_t count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon26	access:public
bdd_stats::gc	sis_header/bdd.h	/^    } gc;$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon27	access:public
bdd_stats::memory	sis_header/bdd.h	/^    } memory;           \/* memory usage *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon28	access:public
bdd_stats::nodes	sis_header/bdd.h	/^    } nodes;		\/* bdd_node count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon25	access:public
bdd_substitute	sis_header/bdd.h	/^EXTERN bdd_t *bdd_substitute ARGS((bdd_t *, array_t *, array_t *));$/;"	p	signature:(bdd_t *, array_t *, array_t *)
bdd_t	sis_header/bdd.h	/^typedef struct bdd_t {$/;"	s
bdd_t	sis_header/bdd.h	/^} bdd_t;	$/;"	t	typeref:struct:bdd_t
bdd_t::free	sis_header/bdd.h	/^    boolean free;	                        \/* TRUE if this is free, FALSE otherwise ... *\/$/;"	m	struct:bdd_t	access:public
bdd_t::mgr	sis_header/bdd.h	/^    bdd_manager *mgr;                           \/* the manager *\/$/;"	m	struct:bdd_t	access:public
bdd_t::node	sis_header/bdd.h	/^    bdd_node *node;                             \/* ptr to the top node of the function *\/$/;"	m	struct:bdd_t	access:public
bdd_then	sis_header/bdd.h	/^EXTERN bdd_t *bdd_then ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_top_var	sis_header/bdd.h	/^EXTERN bdd_t *bdd_top_var ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_top_var_id	sis_header/bdd.h	/^EXTERN bdd_variableId bdd_top_var_id ARGS((bdd_t *));$/;"	p	signature:(bdd_t *)
bdd_top_var_level	sis_header/bdd.h	/^EXTERN long bdd_top_var_level ARGS((bdd_manager *, bdd_t *));$/;"	p	signature:(bdd_manager *, bdd_t *)
bdd_variableId	sis_header/bdd.h	/^typedef unsigned int bdd_variableId;		\/* the id of the variable in a bdd node *\/$/;"	t
bdd_varid_cmp	sis_header/seqbdd.h	/^extern int bdd_varid_cmp(\/* char *obj1, char *obj2 *\/);$/;"	p	signature:( )
bdd_xnor	sis_header/bdd.h	/^EXTERN bdd_t *bdd_xnor ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_xor	sis_header/bdd.h	/^EXTERN bdd_t *bdd_xor ARGS((bdd_t *, bdd_t *));$/;"	p	signature:(bdd_t *, bdd_t *)
bdd_zero	sis_header/bdd.h	/^EXTERN bdd_t *bdd_zero ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
belongTo	node.h	/^	void *belongTo;$/;"	m	class:Node	access:public
best	sis_header/espresso.h	/^    int best;                   \/* best "binate" variable *\/$/;"	m	struct:cdata_struct	access:public
bin	sis_header/node.h	/^    char *bin;			\/* reserved for binning (mapping) package *\/$/;"	m	struct:node_struct	access:public
binary_mask	sis_header/espresso.h	/^    pset binary_mask;           \/* Mask to extract binary variables *\/$/;"	m	struct:cube_struct	access:public
binate_split_select	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN int binate_split_select ARGS((pcube *, pcube,$/;"	p	signature:(pcube *, pcube, pcube, int)
bins	sis_header/st.h	/^    st_table_entry **bins;$/;"	m	struct:st_table	access:public
bit_index	sis_header/espresso.h	/^\/* set.c *\/	EXTERN int bit_index ARGS((unsigned int));$/;"	p	signature:(unsigned int)
bktrack	sis_header/sat.h	/^    int bktrack;$/;"	m	struct:__anon5	access:public
bktrack_lim	sis_header/sat.h	/^    int	bktrack_lim;	\/* Limit on backtracks for this phase *\/$/;"	m	struct:__anon4	access:public
block	sis_header/delay.h	/^    delay_time_t block;$/;"	m	struct:delay_pin_struct	access:public
blocks	sis_header/bdd.h	/^        unsigned int blocks; $/;"	m	struct:bdd_stats::__anon26	access:public
blocks	sis_header/bdd.h	/^    } blocks;		\/* bdd_nodeBlock count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon24	access:public
bnet	ignetwork.h	/^	BNetwork *bnet;$/;"	m	class:IGNetwork	access:public
bnode	ignetwork.h	/^	BNode *bnode;$/;"	m	class:IGNodeProperty	access:public
bnode_abs_dom	bnetwork.h	263;"	d
bnode_bnetwork	bnetwork.h	259;"	d
bnode_fanin_polarity	bnetwork.h	261;"	d
bnode_flag	bnetwork.h	262;"	d
bnode_ignodes	bnetwork.h	264;"	d
bnode_oname	bnetwork.h	265;"	d
bool	sis_header/espresso.h	245;"	d
boolean	sis_header/bdd.h	55;"	d
breadth	sis_header/retime.h	/^    double breadth;		\/* Cost of adding a register along the edge *\/$/;"	m	struct:re_edge	access:public
breadth_first_stg_traversal	sis_header/seqbdd.h	/^extern int breadth_first_stg_traversal(\/* network_t **network, network_t *constraints, *\/$/;"	p	signature:( )
buf	sis_header/node.h	/^    char *buf;			\/* reserved for buffer package *\/$/;"	m	struct:node_struct	access:public
buf_add_implementation	sis_header/speed.h	/^EXTERN void buf_add_implementation ARGS((node_t *, lib_gate_t *));$/;"	p	signature:(node_t *, lib_gate_t *)
buf_alg_input_t	sis_header/speed.h	/^typedef struct buffer_alg_input_struct buf_alg_input_t;$/;"	t	typeref:struct:buffer_alg_input_struct
buf_get_auto_route	sis_header/speed.h	/^EXTERN double buf_get_auto_route ARGS((void));$/;"	p	signature:(void)
buf_get_model	sis_header/speed.h	/^EXTERN delay_model_t buf_get_model ARGS((void));$/;"	p	signature:(void)
buf_get_required_time_at_input	sis_header/speed.h	/^EXTERN delay_time_t buf_get_required_time_at_input ARGS((node_t *));$/;"	p	signature:(node_t *)
buf_init_top_down	sis_header/speed.h	/^EXTERN void buf_init_top_down ARGS((network_t *, int, int));$/;"	p	signature:(network_t *, int, int)
buf_map_interface	sis_header/speed.h	/^EXTERN void buf_map_interface ARGS((network_t *, buf_alg_input_t *));$/;"	p	signature:(network_t *, buf_alg_input_t *)
buf_set_prev_drive	sis_header/speed.h	/^EXTERN void buf_set_prev_drive ARGS((node_t *, delay_time_t));$/;"	p	signature:(node_t *, delay_time_t)
buf_set_prev_phase	sis_header/speed.h	/^EXTERN void buf_set_prev_phase ARGS((node_t *, pin_phase_t));$/;"	p	signature:(node_t *, pin_phase_t)
buf_set_required_time_at_input	sis_header/speed.h	/^EXTERN void buf_set_required_time_at_input ARGS((node_t *, delay_time_t));$/;"	p	signature:(node_t *, delay_time_t)
buffer_alg_input_struct	sis_header/speed.h	/^struct buffer_alg_input_struct {$/;"	s
buffer_alg_input_struct::fanouts	sis_header/speed.h	/^    sp_fanout_t *fanouts;      \/* Description of the fanout destinations *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::inv_node	sis_header/speed.h	/^    node_t *inv_node;	       \/* node driving inv destinations *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::max_ip_load	sis_header/speed.h	/^    double max_ip_load;	       \/* The max load at "cfi" input of root *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::node	sis_header/speed.h	/^    node_t *node;	       \/* node at which buffering is being performed*\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::num_neg	sis_header/speed.h	/^    int num_neg;	       \/* Number of negative destination *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::num_pos	sis_header/speed.h	/^    int num_pos;	       \/* Number of positive fanouts *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_alg_input_struct::root	sis_header/speed.h	/^    node_t *root;	       \/* root node of the buffering problem *\/$/;"	m	struct:buffer_alg_input_struct	access:public
buffer_network	sis_header/speed.h	/^EXTERN int buffer_network ARGS((network_t *, int, int, double, int, int));$/;"	p	signature:(network_t *, int, int, double, int, int)
buildAnd2Subgraph	ignetwork.h	/^	void buildAnd2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
buildAnd2Subgraph	ignetwork.h	/^inline void IGNetwork::buildAnd2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate) {$/;"	f	class:IGNetwork	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
buildBufSubgraph	ignetwork.h	/^	void buildBufSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
buildBufSubgraph	ignetwork.h	/^inline void IGNetwork::buildBufSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_) {$/;"	f	class:IGNetwork	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
buildImplySubgraph	ignetwork.h	/^	void buildImplySubgraph(BNode *node);$/;"	p	class:IGNetwork	access:private	signature:(BNode *node)
buildImplySubgraph	ignetwork.h	/^inline void IGNetwork::buildImplySubgraph(BNode *node) {$/;"	f	class:IGNetwork	signature:(BNode *node)
buildInvSubgraph	ignetwork.h	/^	void buildInvSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
buildInvSubgraph	ignetwork.h	/^inline void IGNetwork::buildInvSubgraph(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_) {$/;"	f	class:IGNetwork	signature:(IGNode *in, IGNode *in_, IGNode *out, IGNode *out_)
buildOr2Subgraph	ignetwork.h	/^	void buildOr2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate);$/;"	p	class:IGNetwork	access:private	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
buildOr2Subgraph	ignetwork.h	/^inline void IGNetwork::buildOr2Subgraph(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate) {$/;"	f	class:IGNetwork	signature:(IGNode *in1, IGNode *in1_, IGNode *in2, IGNode *in2_, IGNode *out, IGNode *out_, Array<IGNode *> &associate)
build_equivalence_node	sis_header/seqbdd.h	/^extern node_t *build_equivalence_node();$/;"	p	signature:()
build_product_machines	sis_header/atpg.h	/^    bool build_product_machines;$/;"	m	struct:__anon32	access:public
bull_alloc_range_data	sis_header/seqbdd.h	/^extern range_data_t *bull_alloc_range_data();$/;"	p	signature:()
bull_bdd_sizes	sis_header/seqbdd.h	/^extern void 	 bull_bdd_sizes();$/;"	p	signature:()
bull_check_output	sis_header/seqbdd.h	/^extern int 	 bull_check_output();$/;"	p	signature:()
bull_cofactor	sis_header/seqbdd.h	/^extern bdd_t *bull_cofactor();$/;"	p	signature:()
bull_compute_next_states	sis_header/seqbdd.h	/^extern bdd_t	*bull_compute_next_states();$/;"	p	signature:()
bull_compute_reverse_image	sis_header/seqbdd.h	/^extern bdd_t	*bull_compute_reverse_image();$/;"	p	signature:()
bull_free_range_data	sis_header/seqbdd.h	/^extern void 	 bull_free_range_data();$/;"	p	signature:()
bull_key_t	sis_header/seqbdd.h	/^} bull_key_t;$/;"	t	typeref:struct:__anon12
bull_value_t	sis_header/seqbdd.h	/^} bull_value_t;$/;"	t	typeref:struct:__anon13
bzero	sis_header/util.h	175;"	d
bzero	util/util.h	175;"	d
cache	sis_header/bdd.h	/^    } cache;		\/* various cache statistics *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon21	access:public
cached	sis_header/bdd.h	/^	    unsigned int cached;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
cactive	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int cactive ARGS((pcube));$/;"	p	signature:(pcube)
calculate_reachable_states	sis_header/atpg.h	/^extern bool calculate_reachable_states();$/;"	p	signature:()
calloc	sis_header/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
calloc	sis_header/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
calloc	util/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
calloc	util/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
calls	sis_header/bdd.h	/^	unsigned int calls;$/;"	m	struct:bdd_stats::__anon22	access:public
cap_factor	sis_header/power.h	/^    int cap_factor;        \/* The load of the gate *\/$/;"	m	struct:__anon7	access:public
capacity	array.h	/^	int capacity; \/\/ capacity of the array$/;"	m	class:Array	access:private
capacity	sis_header/espresso.h	/^    int capacity;               \/* Number of sets allocated *\/$/;"	m	struct:set_family	access:public
capacity	sis_header/maxflow.h	/^    int *capacity;$/;"	m	struct:MF_CUTSET	access:public
capacity	sis_header/maxflow.h	/^    int capacity;         \/* capacity of the edge *\/$/;"	m	struct:MF_EDGE	access:public
cautious_define_cube_size	sis_header/node.h	/^EXTERN void cautious_define_cube_size ARGS((int));$/;"	p	signature:(int)
cb1_dsharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cb1_dsharp ARGS((pcover, pcube));$/;"	p	signature:(pcover, pcube)
cb_consensus	sis_header/espresso.h	/^\/* essen.c *\/	EXTERN pcover cb_consensus ARGS((pcover, pcube));$/;"	p	signature:(pcover, pcube)
cb_consensus_dist0	sis_header/espresso.h	/^\/* essen.c *\/	EXTERN pcover cb_consensus_dist0 ARGS((pcover, pcube, pcube));$/;"	p	signature:(pcover, pcube, pcube)
cb_dsharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cb_dsharp ARGS((pcube, pcover));$/;"	p	signature:(pcube, pcover)
cb_recur_sharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cb_recur_sharp ARGS((pcube, pcover, int, int, int));$/;"	p	signature:(pcube, pcover, int, int, int)
cb_sharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cb_sharp ARGS((pcube, pcover));$/;"	p	signature:(pcube, pcover)
ccommon	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN bool ccommon ARGS((pcube, pcube, pcube));$/;"	p	signature:(pcube, pcube, pcube)
cdata_struct	sis_header/espresso.h	/^struct cdata_struct {$/;"	s
cdata_struct::best	sis_header/espresso.h	/^    int best;                   \/* best "binate" variable *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::is_unate	sis_header/espresso.h	/^    bool *is_unate;             \/* indicates given var is unate *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::part_zeros	sis_header/espresso.h	/^    int *part_zeros;            \/* count of zeros for each element *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::parts_active	sis_header/espresso.h	/^    int *parts_active;          \/* number of "active" parts for each var *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::var_zeros	sis_header/espresso.h	/^    int *var_zeros;             \/* count of zeros for each variable *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::vars_active	sis_header/espresso.h	/^    int vars_active;            \/* number of "active" variables *\/$/;"	m	struct:cdata_struct	access:public
cdata_struct::vars_unate	sis_header/espresso.h	/^    int vars_unate;             \/* number of unate variables *\/$/;"	m	struct:cdata_struct	access:public
cdist	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int cdist ARGS((pset, pset));$/;"	p	signature:(pset, pset)
cdist0	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN bool cdist0 ARGS((pcube, pcube));$/;"	p	signature:(pcube, pcube)
cdist01	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int cdist01 ARGS((pset, pset));$/;"	p	signature:(pset, pset)
changed_node_indices	sis_header/atpg.h	/^    int *changed_node_indices;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
check_consistency	sis_header/espresso.h	/^\/* verify.c *\/	EXTERN bool check_consistency ARGS((pPLA));$/;"	p	signature:(pPLA)
check_directory	util/tmpfile.c	/^static char check_directory(dir)$/;"	f	file:
check_equiv	sis_header/espresso.h	/^\/* equiv.c *\/	EXTERN int check_equiv ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
check_file	util/pathsearch.c	/^check_file(filename, mode)$/;"	f	file:
check_input_networks	sis_header/seqbdd.h	/^extern int check_input_networks(\/* net1, constraints1, net2, constraints2 *\/);$/;"	p	signature:( )
check_output	sis_header/seqbdd.h	/^  seqbdd_check_f  *check_output;$/;"	m	struct:verif_options_t	access:public
child	sis_header/mtr.h	/^    struct MtrNode *child;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
cl_order	sis_header/sat.h	/^    int cl_order;	\/* Subformula clause ordering *\/$/;"	m	struct:__anon4	access:public
class_p	sis_header/library.h	/^  lib_class_t *class_p; 	\/* pointer back to the class *\/$/;"	m	struct:lib_gate_struct	access:public
classes	sis_header/library.h	/^    lsList classes;		\/* list of lib_class_t class descriptions *\/$/;"	m	struct:library_struct	access:public
clear	array.h	/^	void clear(); \/\/ clear the content of the array, but retain the memory allocated$/;"	p	class:Array	access:public	signature:()
clear	array.h	/^inline void Array<T>::clear() {$/;"	f	class:Array	signature:()
clearerr	sis_header/util.h	/^extern VOID_HACK clearerr();$/;"	p	signature:()
clearerr	util/util.h	/^extern VOID_HACK clearerr();$/;"	p	signature:()
clock	sis_header/clock.h	/^    sis_clock_t *clock;$/;"	m	struct:clock_edge	access:public
clock	sis_header/network.h	/^    char *clock;                \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
clock_add_dependency	sis_header/clock.h	/^EXTERN int clock_add_dependency ARGS((clock_edge_t, clock_edge_t));$/;"	p	signature:(clock_edge_t, clock_edge_t)
clock_add_to_network	sis_header/clock.h	/^EXTERN int clock_add_to_network ARGS((network_t *, sis_clock_t *));$/;"	p	signature:(network_t *, sis_clock_t *)
clock_create	sis_header/clock.h	/^EXTERN sis_clock_t *clock_create ARGS((char *));$/;"	p	signature:(char *)
clock_defn	sis_header/clock.h	/^    lsList clock_defn;       \/* Linked list of "sis_clock_t" structures *\/$/;"	m	struct:network_clock_struct	access:public
clock_delay	sis_header/library.h	/^  delay_pin_t *clock_delay; 	\/* delay from clock to output *\/$/;"	m	struct:lib_gate_struct	access:public
clock_delete_from_network	sis_header/clock.h	/^EXTERN int clock_delete_from_network ARGS((network_t *, sis_clock_t *));$/;"	p	signature:(network_t *, sis_clock_t *)
clock_edge	sis_header/clock.h	/^struct clock_edge{$/;"	s
clock_edge::clock	sis_header/clock.h	/^    sis_clock_t *clock;$/;"	m	struct:clock_edge	access:public
clock_edge::transition	sis_header/clock.h	/^    int transition;		\/* RISE_TRANSITION or FALL_TRANSITION *\/$/;"	m	struct:clock_edge	access:public
clock_edge_t	sis_header/clock.h	/^typedef struct clock_edge clock_edge_t ;$/;"	t	typeref:struct:clock_edge
clock_free	sis_header/clock.h	/^EXTERN void clock_free ARGS((sis_clock_t *));$/;"	p	signature:(sis_clock_t *)
clock_gen_dependency	sis_header/clock.h	/^EXTERN lsGen clock_gen_dependency ARGS((clock_edge_t));$/;"	p	signature:(clock_edge_t)
clock_get_by_name	sis_header/clock.h	/^EXTERN sis_clock_t *clock_get_by_name ARGS((network_t *, char *));$/;"	p	signature:(network_t *, char *)
clock_get_current_setting	sis_header/clock.h	/^EXTERN clock_setting_t clock_get_current_setting ARGS((network_t *));$/;"	p	signature:(network_t *)
clock_get_current_setting_index	sis_header/clock.h	/^EXTERN int clock_get_current_setting_index ARGS((network_t *));$/;"	p	signature:(network_t *)
clock_get_cycletime	sis_header/clock.h	/^EXTERN double clock_get_cycletime ARGS((network_t *));$/;"	p	signature:(network_t *)
clock_get_parameter	sis_header/clock.h	/^EXTERN double clock_get_parameter ARGS((clock_edge_t, enum clock_param_enum));$/;"	p	signature:(clock_edge_t, enum clock_param_enum)
clock_name	sis_header/clock.h	/^EXTERN char *clock_name ARGS((sis_clock_t *));$/;"	p	signature:(sis_clock_t *)
clock_num_dependent_edges	sis_header/clock.h	/^EXTERN int clock_num_dependent_edges ARGS((clock_edge_t));$/;"	p	signature:(clock_edge_t)
clock_param_enum	sis_header/clock.h	/^enum clock_param_enum {$/;"	g
clock_param_t	sis_header/clock.h	/^typedef enum clock_param_enum clock_param_t;$/;"	t	typeref:enum:clock_param_enum
clock_remove_dependency	sis_header/clock.h	/^EXTERN void clock_remove_dependency ARGS((clock_edge_t, clock_edge_t));$/;"	p	signature:(clock_edge_t, clock_edge_t)
clock_set_current_setting	sis_header/clock.h	/^EXTERN void clock_set_current_setting ARGS((network_t *, enum clock_setting_enum));$/;"	p	signature:(network_t *, enum clock_setting_enum)
clock_set_cycletime	sis_header/clock.h	/^EXTERN void clock_set_cycletime ARGS((network_t *, double));$/;"	p	signature:(network_t *, double)
clock_set_parameter	sis_header/clock.h	/^EXTERN int clock_set_parameter ARGS((clock_edge_t, enum clock_param_enum, double));$/;"	p	signature:(clock_edge_t, enum clock_param_enum, double)
clock_setting_enum	sis_header/clock.h	/^enum clock_setting_enum {$/;"	g
clock_setting_t	sis_header/clock.h	/^typedef enum clock_setting_enum clock_setting_t;$/;"	t	typeref:enum:clock_setting_enum
clock_struct	sis_header/clock.h	/^struct clock_struct {$/;"	s
clock_struct::dependency	sis_header/clock.h	/^    lsList dependency[2][2];    \/* Dependeny lists of the two edges *\/$/;"	m	struct:clock_struct	access:public
clock_struct::edges	sis_header/clock.h	/^    clock_edge_t edges[2];	\/* Clock edges -- for dependency code *\/$/;"	m	struct:clock_struct	access:public
clock_struct::name	sis_header/clock.h	/^    char *name;			\/* Name of clock signal *\/$/;"	m	struct:clock_struct	access:public
clock_struct::net_handle	sis_header/clock.h	/^    lsHandle net_handle;	\/* Handle inside network clock_defn *\/$/;"	m	struct:clock_struct	access:public
clock_struct::network	sis_header/clock.h	/^    network_t *network;		\/* Pointer to the network *\/$/;"	m	struct:clock_struct	access:public
clock_struct::value	sis_header/clock.h	/^    clock_val_t value[2][2];    \/* Clock values ----- [i][j] *\/$/;"	m	struct:clock_struct	access:public
clock_val	sis_header/clock.h	/^struct clock_val {$/;"	s
clock_val::lower_range	sis_header/clock.h	/^    double lower_range;		\/* Absolute deviation on lower side *\/$/;"	m	struct:clock_val	access:public
clock_val::nominal	sis_header/clock.h	/^    double nominal;		\/* Nominal value (fraction of cycle-time) *\/$/;"	m	struct:clock_val	access:public
clock_val::upper_range	sis_header/clock.h	/^    double upper_range;         \/* Absolute deviation on upped side *\/$/;"	m	struct:clock_val	access:public
clock_val_t	sis_header/clock.h	/^typedef struct clock_val clock_val_t ;$/;"	t	typeref:struct:clock_val
cmp	array.h	/^	static int cmp(const void *a_, const void *b_) {$/;"	f	class:Array	access:public	signature:(const void *a_, const void *b_)
cnf	sis_header/enc.h	/^typedef struct cnf {$/;"	s
cnf::var1	sis_header/enc.h	/^    int var1;           \/* first variable *\/$/;"	m	struct:cnf	access:public
cnf::var2	sis_header/enc.h	/^    int var2;           \/* second variable *\/$/;"	m	struct:cnf	access:public
cnf_t	sis_header/enc.h	/^} cnf_t;$/;"	t	typeref:struct:cnf
cnt	sis_header/espresso.h	/^    int cnt;$/;"	m	struct:pair_struct	access:public
cnt	sis_header/lsort.h	/^int cnt;$/;"	v
cof_output	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover cof_output ARGS((pcover, int));$/;"	p	signature:(pcover, int)
cofactor	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcube *cofactor ARGS((pcube *, pcube));$/;"	p	signature:(pcube *, pcube)
col_num	sis_header/sparse.h	/^    int col_num;		\/* column number of this element *\/$/;"	m	struct:sm_element_struct	access:public
col_num	sis_header/sparse.h	/^    int col_num;		\/* the column number *\/$/;"	m	struct:sm_col_struct	access:public
collisions	sis_header/bdd.h	/^    unsigned int collisions;$/;"	m	struct:bdd_cache_stats	access:public
cols	sis_header/sparse.h	/^    sm_col **cols;		\/* pointer to column headers (by col #) *\/$/;"	m	struct:sm_matrix_struct	access:public
cols_size	sis_header/sparse.h	/^    int cols_size;		\/* alloc'ed size of above array *\/$/;"	m	struct:sm_matrix_struct	access:public
com_add_command	sis_header/command.h	/^EXTERN void com_add_command ARGS((char*, int (*)(), int));$/;"	p	signature:(char*, int (*)(), int)
com_atpg	sis_header/atpg.h	/^extern int com_atpg();$/;"	p	signature:()
com_execute	sis_header/command.h	/^EXTERN int com_execute ARGS((network_t **, char *));$/;"	p	signature:(network_t **, char *)
com_get_flag	sis_header/command.h	/^EXTERN char *com_get_flag ARGS((char*));$/;"	p	signature:(char*)
com_get_nodes	sis_header/command.h	/^EXTERN array_t *com_get_nodes ARGS((network_t *, int, char **));$/;"	p	signature:(network_t *, int, char **)
com_get_true_io_nodes	sis_header/command.h	/^EXTERN array_t *com_get_true_io_nodes ARGS((network_t *, int, char **));$/;"	p	signature:(network_t *, int, char **)
com_get_true_nodes	sis_header/command.h	/^EXTERN array_t *com_get_true_nodes ARGS((network_t *, int, char **));$/;"	p	signature:(network_t *, int, char **)
com_graphics_close	sis_header/command.h	/^EXTERN void  com_graphics_close ARGS((FILE *));$/;"	p	signature:(FILE *)
com_graphics_enabled	sis_header/command.h	/^EXTERN int   com_graphics_enabled ARGS(());$/;"	p	signature:()
com_graphics_exec	sis_header/command.h	/^EXTERN void  com_graphics_exec ARGS((char *, char *, char *, char *));$/;"	p	signature:(char *, char *, char *, char *)
com_graphics_open	sis_header/command.h	/^EXTERN FILE *com_graphics_open ARGS((char *, char *, char *));$/;"	p	signature:(char *, char *, char *)
com_open_file	sis_header/command.h	/^EXTERN FILE *com_open_file ARGS((char *, char *, char **, int));$/;"	p	signature:(char *, char *, char **, int)
com_redundancy_removal	sis_header/atpg.h	/^extern int com_redundancy_removal();$/;"	p	signature:()
com_short_tests	sis_header/atpg.h	/^extern int com_short_tests();$/;"	p	signature:()
comp_perm_fn	sis_header/simplify.h	/^extern void comp_perm_fn();$/;"	p	signature:()
compar	sis_header/avl.h	/^    int (*compar)();$/;"	m	struct:avl_tree_struct	access:public
compare	array/arr_main.c	/^compare(a, b)$/;"	f	file:
compare	sis_header/lsort.h	/^int (*compare)();$/;"	v
compare	sis_header/luniq.h	/^int (*compare)();			\/* how to compare two objects *\/$/;"	v
compare	sis_header/st.h	/^    int (*compare)();$/;"	m	struct:st_table	access:public
complement	sis_header/espresso.h	/^\/* compl.c *\/	EXTERN pcover complement ARGS((pcube *));$/;"	p	signature:(pcube *)
compute_next_states	sis_header/seqbdd.h	/^  seqbdd_next_f	  *compute_next_states;$/;"	m	struct:verif_options_t	access:public
compute_product_network	sis_header/seqbdd.h	/^extern void compute_product_network();$/;"	p	signature:()
compute_reverse_image	sis_header/seqbdd.h	/^  seqbdd_reverse_f  *compute_reverse_image;$/;"	m	struct:verif_options_t	access:public
compute_wire_load	sis_header/delay.h	/^EXTERN double compute_wire_load ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
concat_lists	sis_header/atpg.h	/^extern void concat_lists();$/;"	p	signature:()
consensus	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN void consensus ARGS((pcube, pcube, pcube));$/;"	p	signature:(pcube, pcube, pcube)
consistency_alloc_range_data	sis_header/seqbdd.h	/^extern range_data_t *consistency_alloc_range_data();$/;"	p	signature:()
consistency_bdd_sizes	sis_header/seqbdd.h	/^extern void 	 consistency_bdd_sizes();$/;"	p	signature:()
consistency_check_output	sis_header/seqbdd.h	/^extern int 	 consistency_check_output();$/;"	p	signature:()
consistency_compute_next_states	sis_header/seqbdd.h	/^extern bdd_t	*consistency_compute_next_states();$/;"	p	signature:()
consistency_compute_reverse_image	sis_header/seqbdd.h	/^extern bdd_t	*consistency_compute_reverse_image();$/;"	p	signature:()
consistency_fn	sis_header/seqbdd.h	/^  bdd_t *consistency_fn;		\/* for CONSISTENCY_METHOD *\/$/;"	m	struct:__anon10	access:public
consistency_free_range_data	sis_header/seqbdd.h	/^extern void	 consistency_free_range_data();$/;"	p	signature:()
construct_product_start_states	sis_header/atpg.h	/^extern void construct_product_start_states();$/;"	p	signature:()
consttable	sis_header/bdd.h	/^	bdd_cache_stats consttable;$/;"	m	struct:bdd_stats::__anon21	access:public
control	sis_header/latch.h	/^    node_t *control;		\/* Pointer to the controlling gate *\/$/;"	m	struct:latch_struct	access:public
control_name	sis_header/library.h	/^  char *control_name; 		\/* name of the clock pin *\/$/;"	m	struct:lib_gate_struct	access:public
control_name	sis_header/retime.h	/^    char *control_name;		\/* Name of the controlling signal *\/$/;"	m	struct:re_graph	access:public
control_node_table	sis_header/atpg.h	/^    st_table *control_node_table;$/;"	m	struct:__anon35	access:public
convert_bdd_to_int	sis_header/atpg.h	/^extern int convert_bdd_to_int();$/;"	p	signature:()
convert_bdd_to_network	sis_header/atpg.h	/^extern network_t *convert_bdd_to_network();$/;"	p	signature:()
convert_product_bdd_to_key	sis_header/atpg.h	/^extern int convert_product_bdd_to_key();$/;"	p	signature:()
convert_state_to_bdd	sis_header/atpg.h	/^extern bdd_t *convert_state_to_bdd();$/;"	p	signature:()
convert_states_to_product_bdd	sis_header/atpg.h	/^extern bdd_t *convert_states_to_product_bdd();$/;"	p	signature:()
copy	sis_header/node.h	/^    node_t *copy;		\/* used by network_dup(), network_append() *\/$/;"	m	struct:node_struct	access:public
copy_cost	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void copy_cost ARGS((pcost, pcost));$/;"	p	signature:(pcost, pcost)
copy_file	util/saveimage.c	/^copy_file(inFd, outFd, nbytes)$/;"	f	file:
copy_file	util/saveimage.c	/^static int copy_file();$/;"	p	file:
copy_init_state_constraint	sis_header/seqbdd.h	/^extern node_t *copy_init_state_constraint();$/;"	p	signature:()
copy_latch_info	sis_header/network.h	/^EXTERN void copy_latch_info ARGS((lsList, lsList, st_table *));$/;"	p	signature:(lsList, lsList, st_table *)
copy_orig_bdds	sis_header/atpg.h	/^extern void copy_orig_bdds();$/;"	p	signature:()
cost_struct	sis_header/espresso.h	/^typedef struct cost_struct {$/;"	s
cost_struct::cubes	sis_header/espresso.h	/^    int cubes;			\/* number of cubes in the cover *\/$/;"	m	struct:cost_struct	access:public
cost_struct::in	sis_header/espresso.h	/^    int in;			\/* transistor count, binary-valued variables *\/$/;"	m	struct:cost_struct	access:public
cost_struct::mv	sis_header/espresso.h	/^    int mv;			\/* transistor count, multiple-valued vars *\/$/;"	m	struct:cost_struct	access:public
cost_struct::out	sis_header/espresso.h	/^    int out;			\/* transistor count, output part *\/$/;"	m	struct:cost_struct	access:public
cost_struct::primes	sis_header/espresso.h	/^    int primes;			\/* number of prime cubes *\/$/;"	m	struct:cost_struct	access:public
cost_struct::total	sis_header/espresso.h	/^    int total;			\/* total number of transistors *\/$/;"	m	struct:cost_struct	access:public
cost_t	sis_header/espresso.h	/^} cost_t, *pcost;$/;"	t	typeref:struct:cost_struct
count	array/arr_main.c	/^static int count;			\/* global: count # compares *\/$/;"	v	file:
count	sis_header/avl.h	/^    int count;$/;"	m	struct:avl_generator_struct	access:public
count	sis_header/espresso.h	/^    int count;                  \/* The number of sets in the family *\/$/;"	m	struct:set_family	access:public
count_ones	sis_header/espresso.h	233;"	d
count_ones	sis_header/espresso.h	237;"	d
cover_cost	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void cover_cost ARGS((pcover, pcost));$/;"	p	signature:(pcover, pcost)
cprint	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void cprint ARGS((pcover));$/;"	p	signature:(pcover)
create_just_sequence	sis_header/atpg.h	/^extern void create_just_sequence();$/;"	p	signature:()
create_new_pi	sis_header/seqbdd.h	/^extern array_t *create_new_pi();$/;"	p	signature:()
cspf	sis_header/node.h	/^    char *cspf;			\/* reserved for cspf (simplify) package *\/$/;"	m	struct:node_struct	access:public
cspf_dc	sis_header/simplify.h	/^extern node_t *cspf_dc();$/;"	p	signature:()
cube1	sis_header/extract.h	/^    sm_row *cube1;          \/* the first cube of the double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
cube1list	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcube *cube1list ARGS((pcover));$/;"	p	signature:(pcover)
cube2	sis_header/extract.h	/^    sm_row *cube2;          \/* the second cube of the double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
cube2list	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcube *cube2list ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
cube3list	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcube *cube3list ARGS((pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover)
cube_is_covered	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN bool cube_is_covered ARGS((pcube *, pcube));$/;"	p	signature:(pcube *, pcube)
cube_setup	sis_header/espresso.h	/^\/* cubestr.c *\/	EXTERN void cube_setup ARGS(());$/;"	p	signature:()
cube_struct	sis_header/espresso.h	/^struct cube_struct {$/;"	s
cube_struct::binary_mask	sis_header/espresso.h	/^    pset binary_mask;           \/* Mask to extract binary variables *\/$/;"	m	struct:cube_struct	access:public
cube_struct::emptyset	sis_header/espresso.h	/^    pset emptyset;              \/* an empty cube *\/$/;"	m	struct:cube_struct	access:public
cube_struct::first_part	sis_header/espresso.h	/^    int *first_part;            \/* first element of each variable *\/$/;"	m	struct:cube_struct	access:public
cube_struct::first_word	sis_header/espresso.h	/^    int *first_word;            \/* first word for each variable *\/$/;"	m	struct:cube_struct	access:public
cube_struct::fullset	sis_header/espresso.h	/^    pset fullset;               \/* a full cube *\/$/;"	m	struct:cube_struct	access:public
cube_struct::inmask	sis_header/espresso.h	/^    unsigned int inmask;        \/* mask to get odd word of binary part *\/$/;"	m	struct:cube_struct	access:public
cube_struct::inword	sis_header/espresso.h	/^    int inword;                 \/* which word number for above *\/$/;"	m	struct:cube_struct	access:public
cube_struct::last_part	sis_header/espresso.h	/^    int *last_part;             \/* first element of each variable *\/$/;"	m	struct:cube_struct	access:public
cube_struct::last_word	sis_header/espresso.h	/^    int *last_word;             \/* last word for each variable *\/$/;"	m	struct:cube_struct	access:public
cube_struct::mv_mask	sis_header/espresso.h	/^    pset mv_mask;               \/* mask to get mv parts *\/$/;"	m	struct:cube_struct	access:public
cube_struct::num_binary_vars	sis_header/espresso.h	/^    int num_binary_vars;        \/* number of binary variables *\/$/;"	m	struct:cube_struct	access:public
cube_struct::num_mv_vars	sis_header/espresso.h	/^    int num_mv_vars;            \/* number of multiple-valued variables *\/$/;"	m	struct:cube_struct	access:public
cube_struct::num_vars	sis_header/espresso.h	/^    int num_vars;               \/* number of variables in a cube *\/$/;"	m	struct:cube_struct	access:public
cube_struct::output	sis_header/espresso.h	/^    int output;                 \/* which variable is "output" (-1 if none) *\/$/;"	m	struct:cube_struct	access:public
cube_struct::part_size	sis_header/espresso.h	/^    int *part_size;             \/* number of elements in each variable *\/$/;"	m	struct:cube_struct	access:public
cube_struct::size	sis_header/espresso.h	/^    int size;                   \/* set size of a cube *\/$/;"	m	struct:cube_struct	access:public
cube_struct::sparse	sis_header/espresso.h	/^    int *sparse;                \/* should this variable be sparse? *\/$/;"	m	struct:cube_struct	access:public
cube_struct::temp	sis_header/espresso.h	/^    pset *temp;                 \/* an array of temporary sets *\/$/;"	m	struct:cube_struct	access:public
cube_struct::var_mask	sis_header/espresso.h	/^    pset *var_mask;             \/* mask to extract a variable *\/$/;"	m	struct:cube_struct	access:public
cubelist_partition	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int cubelist_partition ARGS((pcube *, pcube **, pcube **,$/;"	p	signature:(pcube *, pcube **, pcube **, unsigned int)
cubes	sis_header/espresso.h	/^    int cubes;			\/* number of cubes in the cover *\/$/;"	m	struct:cost_struct	access:public
cubeunlist	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcover cubeunlist ARGS((pcube *));$/;"	p	signature:(pcube *)
currentBNetwork	rewire_c.cpp	/^static BNetwork *currentBNetwork = NULL;$/;"	v	file:
currentIGNetwork	rewire_c.cpp	/^static IGNetwork *currentIGNetwork = NULL;$/;"	v	file:
currentNetwork	rewire_c.cpp	/^static network_t *currentNetwork = NULL;$/;"	v	file:
current_id	sis_header/atpg.h	/^    int current_id; \/* either true_id, fault_id *\/$/;"	m	struct:__anon38	access:public
current_state	sis_header/atpg.h	/^  unsigned 	*current_state;	\/* saves 32 states in parallel for use in$/;"	m	struct:fault_struct	access:public
current_value	sis_header/latch.h	/^    int current_value;		\/* current state *\/$/;"	m	struct:latch_struct	access:public
cutset	sis_header/maxflow.h	/^EXTERN array_t *cutset ARGS((network_t *, st_table *));$/;"	p	signature:(network_t *, st_table *)
cutset_interface	sis_header/maxflow.h	/^EXTERN array_t *cutset_interface ARGS((network_t *, st_table *, int));$/;"	p	signature:(network_t *, st_table *, int)
cv_dsharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cv_dsharp ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
cv_intersect	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cv_intersect ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
cv_sharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover cv_sharp ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
cycle_time	sis_header/clock.h	/^    double cycle_time[2];    \/* Stores the cycle time *\/$/;"	m	struct:network_clock_struct	access:public
d1_order	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int d1_order ARGS((pset *, pset *));$/;"	p	signature:(pset *, pset *)
d1_rm_equal	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int d1_rm_equal ARGS((pset *, ESP_PFI));$/;"	p	signature:(pset *, ESP_PFI)
d1merge	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family d1merge ARGS((pset_family, int));$/;"	p	signature:(pset_family, int)
daemon	sis_header/bdd.h	/^      void (*daemon)();               \/* used for callback when memory limit exceeded *\/$/;"	m	struct:bdd_mgr_init::__anon18	access:public
data	sis_header/espresso.h	/^    pset data;                  \/* Pointer to the set data *\/$/;"	m	struct:set_family	access:public
data	sis_header/var_set.h	/^  unsigned int *data;$/;"	m	struct:var_set_struct	access:public
dc_network	sis_header/network.h	/^    network_t *dc_network;      \/* external don't care network *\/$/;"	m	struct:network_struct	access:public
dcapacity	sis_header/enc.h	/^    int  dcapacity;	\/* total number of dichotomies *\/$/;"	m	struct:dic_family	access:public
dcount	sis_header/enc.h	/^    int  dcount;	\/* number of dichotomies *\/$/;"	m	struct:dic_family	access:public
ddivisor_t	sis_header/extract.h	/^typedef struct double_cube_divisor_struct ddivisor_t;$/;"	t	typeref:struct:double_cube_divisor_struct
debug1_print	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void debug1_print ARGS((pcover, char *, int));$/;"	p	signature:(pcover, char *, int)
debug_print	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void debug_print ARGS((pcube *, char *, int));$/;"	p	signature:(pcube *, char *, int)
decomp_disj	sis_header/decomp.h	/^EXTERN array_t *decomp_disj ARGS((node_t *));$/;"	p	signature:(node_t *)
decomp_disj_network	sis_header/decomp.h	/^EXTERN void decomp_disj_network ARGS((network_t *));$/;"	p	signature:(network_t *)
decomp_disj_node	sis_header/decomp.h	/^EXTERN void decomp_disj_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
decomp_good	sis_header/decomp.h	/^EXTERN array_t *decomp_good ARGS((node_t *));$/;"	p	signature:(node_t *)
decomp_good_network	sis_header/decomp.h	/^EXTERN void decomp_good_network ARGS((network_t *));$/;"	p	signature:(network_t *)
decomp_good_node	sis_header/decomp.h	/^EXTERN void decomp_good_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
decomp_quick	sis_header/decomp.h	/^EXTERN array_t *decomp_quick ARGS((node_t *));$/;"	p	signature:(node_t *)
decomp_quick_network	sis_header/decomp.h	/^EXTERN void decomp_quick_network ARGS((network_t *));$/;"	p	signature:(network_t *)
decomp_quick_node	sis_header/decomp.h	/^EXTERN void decomp_quick_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
decomp_tech_network	sis_header/decomp.h	/^EXTERN void decomp_tech_network ARGS((network_t *, int, int));$/;"	p	signature:(network_t *, int, int)
default_delay	sis_header/network.h	/^    char *default_delay;	\/* Stores default delay info *\/$/;"	m	struct:network_struct	access:public
define_cube_size	sis_header/node.h	/^EXTERN void define_cube_size ARGS((int));$/;"	p	signature:(int)
delay	sis_header/node.h	/^    char *delay;		\/* reserved for delay package *\/$/;"	m	struct:node_struct	access:public
delay_arrival_time	sis_header/delay.h	/^EXTERN delay_time_t delay_arrival_time ARGS((node_t *));$/;"	p	signature:(node_t *)
delay_compute_fo_load	sis_header/delay.h	/^EXTERN double delay_compute_fo_load ARGS((node_t *, delay_model_t));$/;"	p	signature:(node_t *, delay_model_t)
delay_copy_terminal_constraints	sis_header/delay.h	/^EXTERN void delay_copy_terminal_constraints ARGS((node_t *));$/;"	p	signature:(node_t *)
delay_fanout_contribution	sis_header/delay.h	/^EXTERN delay_time_t delay_fanout_contribution ARGS((node_t *, int, node_t *, delay_model_t));$/;"	p	signature:(node_t *, int, node_t *, delay_model_t)
delay_generate_decomposition	sis_header/delay.h	/^EXTERN network_t *delay_generate_decomposition ARGS((node_t *, double));$/;"	p	signature:(node_t *, double)
delay_get_block	sis_header/delay.h	/^EXTERN delay_time_t delay_get_block ARGS((char *));$/;"	p	signature:(char *)
delay_get_default_parameter	sis_header/delay.h	/^EXTERN double delay_get_default_parameter ARGS((network_t *, delay_param_t));$/;"	p	signature:(network_t *, delay_param_t)
delay_get_drive	sis_header/delay.h	/^EXTERN delay_time_t delay_get_drive ARGS((char *));$/;"	p	signature:(char *)
delay_get_load	sis_header/delay.h	/^EXTERN double delay_get_load ARGS((char *));$/;"	p	signature:(char *)
delay_get_load_limit	sis_header/delay.h	/^EXTERN double delay_get_load_limit ARGS((char *));$/;"	p	signature:(char *)
delay_get_model_from_name	sis_header/delay.h	/^EXTERN delay_model_t delay_get_model_from_name ARGS((char *));$/;"	p	signature:(char *)
delay_get_parameter	sis_header/delay.h	/^EXTERN double delay_get_parameter ARGS((node_t *, delay_param_t));$/;"	p	signature:(node_t *, delay_param_t)
delay_get_pi_arrival_time	sis_header/delay.h	/^EXTERN int delay_get_pi_arrival_time ARGS((node_t *, delay_time_t *));$/;"	p	signature:(node_t *, delay_time_t *)
delay_get_pi_drive	sis_header/delay.h	/^EXTERN int delay_get_pi_drive ARGS((node_t *, delay_time_t *));$/;"	p	signature:(node_t *, delay_time_t *)
delay_get_pi_load_limit	sis_header/delay.h	/^EXTERN int delay_get_pi_load_limit ARGS((node_t *, double *));$/;"	p	signature:(node_t *, double *)
delay_get_po_load	sis_header/delay.h	/^EXTERN int delay_get_po_load ARGS((node_t *, double *));$/;"	p	signature:(node_t *, double *)
delay_get_po_required_time	sis_header/delay.h	/^EXTERN int delay_get_po_required_time ARGS((node_t *, delay_time_t *));$/;"	p	signature:(node_t *, delay_time_t *)
delay_get_synch_edge	sis_header/delay.h	/^EXTERN int delay_get_synch_edge ARGS((node_t *, clock_edge_t *, int *));$/;"	p	signature:(node_t *, clock_edge_t *, int *)
delay_giveaway_pin_delay	sis_header/delay.h	/^EXTERN char **delay_giveaway_pin_delay ARGS((network_t *));	\/* library read-in hack *\/$/;"	p	signature:(network_t *)
delay_info	sis_header/library.h	/^  char **delay_info; 		\/* the input pin delays *\/$/;"	m	struct:lib_gate_struct	access:public
delay_latest_output	sis_header/delay.h	/^EXTERN node_t *delay_latest_output ARGS((network_t *, double *));$/;"	p	signature:(network_t *, double *)
delay_load	sis_header/delay.h	/^EXTERN double delay_load ARGS((node_t *));$/;"	p	signature:(node_t *)
delay_map_simulate	sis_header/delay.h	/^EXTERN delay_time_t delay_map_simulate();	\/* special mapping routine *\/$/;"	p	signature:()
delay_model_enum	sis_header/delay.h	/^typedef enum delay_model_enum {$/;"	g
delay_model_t	sis_header/delay.h	/^} delay_model_t;$/;"	t	typeref:enum:delay_model_enum
delay_network_alloc	sis_header/delay.h	/^EXTERN void delay_network_alloc ARGS((network_t *));$/;"	p	signature:(network_t *)
delay_network_dup	sis_header/delay.h	/^EXTERN void delay_network_dup ARGS((network_t *, network_t *));$/;"	p	signature:(network_t *, network_t *)
delay_network_free	sis_header/delay.h	/^EXTERN void delay_network_free ARGS((network_t *));$/;"	p	signature:(network_t *)
delay_node_pin	sis_header/delay.h	/^EXTERN delay_time_t delay_node_pin ARGS((node_t *, int, delay_model_t));$/;"	p	signature:(node_t *, int, delay_model_t)
delay_param_enum	sis_header/delay.h	/^typedef enum delay_param_enum {$/;"	g
delay_param_t	sis_header/delay.h	/^} delay_param_t;$/;"	t	typeref:enum:delay_param_enum
delay_pin_struct	sis_header/delay.h	/^typedef struct delay_pin_struct {$/;"	s
delay_pin_struct::block	sis_header/delay.h	/^    delay_time_t block;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_struct::drive	sis_header/delay.h	/^    delay_time_t drive;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_struct::load	sis_header/delay.h	/^    double load;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_struct::max_load	sis_header/delay.h	/^    double max_load;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_struct::phase	sis_header/delay.h	/^    pin_phase_t phase;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_struct::user_time	sis_header/delay.h	/^    delay_time_t user_time;$/;"	m	struct:delay_pin_struct	access:public
delay_pin_t	sis_header/delay.h	/^} delay_pin_t;$/;"	t	typeref:struct:delay_pin_struct
delay_print_blif_wire_loads	sis_header/delay.h	/^EXTERN void delay_print_blif_wire_loads ARGS((network_t *, FILE *));$/;"	p	signature:(network_t *, FILE *)
delay_print_slif_wire_loads	sis_header/delay.h	/^EXTERN void delay_print_slif_wire_loads ARGS((network_t *, FILE *));$/;"	p	signature:(network_t *, FILE *)
delay_required_time	sis_header/delay.h	/^EXTERN delay_time_t delay_required_time ARGS((node_t *));$/;"	p	signature:(node_t *)
delay_set_default_parameter	sis_header/delay.h	/^EXTERN void delay_set_default_parameter ARGS((network_t *, delay_param_t, double));$/;"	p	signature:(network_t *, delay_param_t, double)
delay_set_parameter	sis_header/delay.h	/^EXTERN void delay_set_parameter ARGS((node_t *, delay_param_t, double));$/;"	p	signature:(node_t *, delay_param_t, double)
delay_set_synch_edge	sis_header/delay.h	/^EXTERN int delay_set_synch_edge ARGS((node_t *, clock_edge_t, int));$/;"	p	signature:(node_t *, clock_edge_t, int)
delay_set_tdc_params	sis_header/delay.h	/^EXTERN void delay_set_tdc_params ARGS((char *));$/;"	p	signature:(char *)
delay_slack_time	sis_header/delay.h	/^EXTERN delay_time_t delay_slack_time ARGS((node_t *));$/;"	p	signature:(node_t *)
delay_time_t	sis_header/delay.h	/^} delay_time_t;$/;"	t	typeref:struct:time_struct
delay_trace	sis_header/delay.h	/^EXTERN int delay_trace ARGS((network_t *, delay_model_t));$/;"	p	signature:(network_t *, delay_model_t)
delay_wire_required_time	sis_header/delay.h	/^EXTERN int delay_wire_required_time ARGS((node_t *, int, delay_model_t, delay_time_t *));$/;"	p	signature:(node_t *, int, delay_model_t, delay_time_t *)
delvar	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN pcover delvar ARGS((pcover, bool *));$/;"	p	signature:(pcover, bool *)
dependency	sis_header/clock.h	/^    lsList dependency[2][2];    \/* Dependeny lists of the two edges *\/$/;"	m	struct:clock_struct	access:public
derive_comb_test	sis_header/atpg.h	/^extern sequence_t *derive_comb_test();$/;"	p	signature:()
derive_inverted_prop_key	sis_header/atpg.h	/^extern int derive_inverted_prop_key();$/;"	p	signature:()
derive_prop_key	sis_header/atpg.h	/^extern int derive_prop_key();$/;"	p	signature:()
derive_test_sequence	sis_header/atpg.h	/^extern sequence_t *derive_test_sequence();$/;"	p	signature:()
desc1	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int desc1 ARGS((pset, pset));$/;"	p	signature:(pset, pset)
descend	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int descend ARGS((pset *, pset *));$/;"	p	signature:(pset *, pset *)
deterministic_prop	sis_header/atpg.h	/^    bool deterministic_prop;$/;"	m	struct:__anon32	access:public
dic	sis_header/enc.h	/^    pset dic;           \/* pointer to first dichotomy *\/$/;"	m	struct:dic_family	access:public
dic_family	sis_header/enc.h	/^typedef struct dic_family {$/;"	s
dic_family::dcapacity	sis_header/enc.h	/^    int  dcapacity;	\/* total number of dichotomies *\/$/;"	m	struct:dic_family	access:public
dic_family::dcount	sis_header/enc.h	/^    int  dcount;	\/* number of dichotomies *\/$/;"	m	struct:dic_family	access:public
dic_family::dic	sis_header/enc.h	/^    pset dic;           \/* pointer to first dichotomy *\/$/;"	m	struct:dic_family	access:public
dic_family::dic_size	sis_header/enc.h	/^    int  dic_size;	\/* size of a dic in ints *\/$/;"	m	struct:dic_family	access:public
dic_family::dset_elem	sis_header/enc.h	/^    int  dset_elem;	\/* number of elements in each set of the dic *\/$/;"	m	struct:dic_family	access:public
dic_family::dset_size	sis_header/enc.h	/^    int  dset_size;	\/* size of a set in ints - dic size is twice this *\/$/;"	m	struct:dic_family	access:public
dic_family_alloc	sis_header/enc.h	/^extern dic_family_t 	*dic_family_alloc ();$/;"	p	signature:()
dic_family_t	sis_header/enc.h	/^} dic_family_t;$/;"	t	typeref:struct:dic_family
dic_new	sis_header/enc.h	/^extern pset		dic_new ();$/;"	p	signature:()
dic_size	sis_header/enc.h	/^    int  dic_size;	\/* size of a dic in ints *\/$/;"	m	struct:dic_family	access:public
dic_to_sm	sis_header/enc.h	/^extern sm_matrix        *dic_to_sm();$/;"	p	signature:()
direction	sis_header/maxflow.h	/^    short direction;      \/* direction of the link: 1 = from; -1 = to *\/$/;"	m	struct:MF_NODE	access:public
discard_pla	sis_header/network.h	/^EXTERN void discard_pla ARGS((pPLA ));$/;"	p	signature:(pPLA )
disjoint_support_functions	sis_header/seqbdd.h	/^extern array_t *disjoint_support_functions();$/;"	p	signature:()
dist_merge	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family dist_merge ARGS((pset_family, pset));$/;"	p	signature:(pset_family, pset)
div_index	sis_header/extract.h	/^    lsList div_index;       \/* indicate where the divisor comes from *\/$/;"	m	struct:double_cube_divisor_struct	access:public
do_sm_minimum_cover	sis_header/espresso.h	/^\/* sminterf.c *\/pset do_sm_minimum_cover ARGS((pset_family));$/;"	p	signature:(pset_family)
does_verification	sis_header/seqbdd.h	/^  int does_verification;	 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
double_cube_divisor_struct	sis_header/extract.h	/^struct double_cube_divisor_struct {$/;"	s
double_cube_divisor_struct::cube1	sis_header/extract.h	/^    sm_row *cube1;          \/* the first cube of the double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::cube2	sis_header/extract.h	/^    sm_row *cube2;          \/* the second cube of the double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::div_index	sis_header/extract.h	/^    lsList div_index;       \/* indicate where the divisor comes from *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::dtype	sis_header/extract.h	/^    UNSIGNED dtype;         \/* the type of double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::handle	sis_header/extract.h	/^    lsHandle handle;        \/* lsHandle to double-cube divisor set *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::level	sis_header/extract.h	/^    UNSIGNED level;         \/* indicates the level of 2-cube kernels *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::status	sis_header/extract.h	/^    UNSIGNED status;        \/* indicate whether the divisor is changed or not *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::sthandle	sis_header/extract.h	/^    lsHandle sthandle;      \/* lsHandle to corresponoding searching table *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::weight	sis_header/extract.h	/^    SHORT weight;           \/* the weight of double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
double_cube_divisor_struct::weight_status	sis_header/extract.h	/^    UNSIGNED weight_status; \/* indicate the weight can be changed or not *\/$/;"	m	struct:double_cube_divisor_struct	access:public
drive	sis_header/delay.h	/^    delay_time_t drive;$/;"	m	struct:delay_pin_struct	access:public
dset_elem	sis_header/enc.h	/^    int  dset_elem;	\/* number of elements in each set of the dic *\/$/;"	m	struct:dic_family	access:public
dset_size	sis_header/enc.h	/^    int  dset_size;	\/* size of a set in ints - dic size is twice this *\/$/;"	m	struct:dic_family	access:public
dsharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover dsharp ARGS((pcube, pcube));$/;"	p	signature:(pcube, pcube)
dst	rewire.h	/^	BNode *dst;$/;"	m	struct:__anon2	access:public
dst	rewire_c.h	/^	node_t *dst;$/;"	m	struct:__anon1	access:public
dstFunction	rewire.h	/^	BNodeType dstFunction;$/;"	m	struct:__anon2	access:public
dst_function	rewire_c.h	/^	node_function_t dst_function;$/;"	m	struct:__anon1	access:public
dtype	sis_header/extract.h	/^    UNSIGNED dtype;         \/* the type of double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
dual_class	sis_header/library.h	/^    lib_class_t *dual_class;	\/* pointer to class for complement of fct *\/$/;"	m	struct:lib_class_struct	access:public
dummy	sis_header/list.h	/^    int dummy;			\/* Not used *\/$/;"	m	struct:ls_dummy_defn	access:public
edge_struct	sis_header/graph.h	/^typedef struct edge_struct {$/;"	s
edge_struct::user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:edge_struct	access:public
edge_t	sis_header/graph.h	/^} edge_t;$/;"	t	typeref:struct:edge_struct
edges	sis_header/clock.h	/^    clock_edge_t edges[2];	\/* Clock edges -- for dependency code *\/$/;"	m	struct:clock_struct	access:public
edges	sis_header/retime.h	/^    array_t *edges;		\/* edges in network (typed re_edge *) *\/$/;"	m	struct:re_graph	access:public
elder	sis_header/mtr.h	/^    struct MtrNode *elder;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
elim_lowering	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void elim_lowering ARGS((pcover, pcover, pcube, pcube));$/;"	p	signature:(pcover, pcover, pcube, pcube)
eliminate	sis_header/factor.h	/^EXTERN void eliminate ARGS((network_t *, int, int));$/;"	p	signature:(network_t *, int, int)
emptyset	sis_header/espresso.h	/^    pset emptyset;              \/* an empty cube *\/$/;"	m	struct:cube_struct	access:public
end_astg	sis_header/astg.h	/^void	 end_astg ARGS(());$/;"	p	signature:()
end_graphics	sis_header/graphics.h	/^extern void end_graphics ();$/;"	p	signature:()
end_sis	sis_interface.cpp	/^	extern void end_sis();$/;"	p	file:	signature:()
entry	sis_header/st.h	/^    st_table_entry *entry;$/;"	m	struct:st_generator	access:public
ep	edge.h	/^	EP ep;$/;"	m	class:Edge	access:public
ep	node.h	/^		EP ep;$/;"	m	class:Node::NodeEdge	access:public
eqn_output	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void eqn_output ARGS((pPLA));$/;"	p	signature:(pPLA)
equal	sis_header/espresso.h	321;"	d
error_append	sis_header/error.h	/^EXTERN void error_append ARGS((char *));$/;"	p	signature:(char *)
error_cleanup	sis_header/error.h	/^EXTERN void error_cleanup ARGS((void));$/;"	p	signature:(void)
error_init	sis_header/error.h	/^EXTERN void error_init ARGS((void));$/;"	p	signature:(void)
error_string	sis_header/error.h	/^EXTERN char *error_string ARGS((void));$/;"	p	signature:(void)
espresso	sis_header/espresso.h	/^\/* espresso.c *\/	EXTERN pcover espresso ARGS((pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover)
espresso_read_pla	sis_header/network.h	/^EXTERN pPLA espresso_read_pla ARGS((FILE *));$/;"	p	signature:(FILE *)
essen_cube	sis_header/espresso.h	/^\/* essen.c *\/	EXTERN bool essen_cube ARGS((pcover, pcover, pcube));$/;"	p	signature:(pcover, pcover, pcube)
essen_parts	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void essen_parts ARGS((pcover, pcover, pcube, pcube));$/;"	p	signature:(pcover, pcover, pcube, pcube)
essen_raising	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void essen_raising ARGS((pcover, pcube, pcube));$/;"	p	signature:(pcover, pcube, pcube)
essential	sis_header/espresso.h	/^\/* essen.c *\/	EXTERN pcover essential ARGS((pcover *, pcover *));$/;"	p	signature:(pcover *, pcover *)
eval	sis_header/atpg.h	/^    VoidFN          eval;$/;"	m	struct:atpg_sim_node_struct	access:public
ex_find_divisor	sis_header/extract.h	/^extern node_t *ex_find_divisor();$/;"	p	signature:()
ex_find_divisor_quick	sis_header/extract.h	/^extern node_t *ex_find_divisor_quick();$/;"	p	signature:()
ex_kernel_gen	sis_header/extract.h	/^extern void ex_kernel_gen();$/;"	p	signature:()
ex_subkernel_gen	sis_header/extract.h	/^extern void ex_subkernel_gen();$/;"	p	signature:()
exact_minimum_cover	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pset_family exact_minimum_cover ARGS((pset_family));$/;"	p	signature:(pset_family)
exit	sis_header/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
exit	util/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
expand	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN pcover expand ARGS((pcover, pcover, bool));$/;"	p	signature:(pcover, pcover, bool)
expand1	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void expand1 ARGS((pcover, pcover, pcube,$/;"	p	signature:(pcover, pcover, pcube, pcube, pcube, pcube, pcube, int *, pcube)
expand1_gasp	sis_header/espresso.h	/^\/* gasp.c *\/	EXTERN void expand1_gasp ARGS((pcover, pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover, pcover, int, pcover *)
expand_gasp	sis_header/espresso.h	/^\/* gasp.c *\/	EXTERN pcover expand_gasp ARGS((pcover, pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover, pcover)
explode	sis_header/espresso.h	/^\/* map.c *\/	EXTERN void explode ARGS((int, int));$/;"	p	signature:(int, int)
ext_ptrs	sis_header/bdd.h	/^	unsigned int ext_ptrs;$/;"	m	struct:bdd_stats::__anon28	access:public
extern_pi	sis_header/seqbdd.h	/^  array_t *extern_pi;			\/* the external PI's (not present states) *\/$/;"	m	struct:__anon9	access:public
external_outputs	sis_header/seqbdd.h	/^  array_t *external_outputs;		$/;"	m	struct:__anon10	access:public
external_read_oct	sis_header/octio.h	/^EXTERN int external_read_oct  ARGS((network_t **,int,char**));$/;"	p	signature:(network_t **,int,char**)
external_write_oct	sis_header/octio.h	/^EXTERN int external_write_oct ARGS((network_t **,int,char**));$/;"	p	signature:(network_t **,int,char**)
extptrs	sis_header/bdd.h	/^    } extptrs;		\/* bdd_t count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon26	access:public
extract_input_to_output_table	sis_header/seqbdd.h	/^extern st_table *extract_input_to_output_table(\/* array_t *org_pi, *new_pi, *po_ordering, network_t *network *\/);$/;"	p	signature:( )
extract_sequences	sis_header/atpg.h	/^extern void extract_sequences();$/;"	p	signature:()
extract_state_input_vars	sis_header/seqbdd.h	/^extern array_t *extract_state_input_vars(\/* st_table *pi_ordering, st_table *ito_table *\/);$/;"	p	signature:( )
extract_state_output_vars	sis_header/seqbdd.h	/^extern array_t *extract_state_output_vars(\/* st_table *pi_ordering, st_table *ito_table *\/);$/;"	p	signature:( )
extract_test_sequences	sis_header/atpg.h	/^extern void extract_test_sequences();$/;"	p	signature:()
f0	bnetwork.h	/^	IGNode *f0;$/;"	m	class:IGAssociateProperty	access:public
f1	bnetwork.h	/^	IGNode *f1;$/;"	m	class:IGAssociateProperty	access:public
factor	sis_header/factor.h	/^EXTERN void factor ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_alloc	sis_header/factor.h	/^EXTERN void factor_alloc ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_dup	sis_header/factor.h	/^EXTERN void factor_dup ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
factor_free	sis_header/factor.h	/^EXTERN void factor_free ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_good	sis_header/factor.h	/^EXTERN void factor_good ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_invalid	sis_header/factor.h	/^EXTERN void factor_invalid ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_num_literal	sis_header/factor.h	/^EXTERN int factor_num_literal ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_num_used	sis_header/factor.h	/^EXTERN int factor_num_used ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
factor_print	sis_header/factor.h	/^EXTERN void factor_print ARGS((FILE *, node_t *));$/;"	p	signature:(FILE *, node_t *)
factor_quick	sis_header/factor.h	/^EXTERN void factor_quick ARGS((node_t *));$/;"	p	signature:(node_t *)
factor_to_nodes	sis_header/factor.h	/^EXTERN array_t *factor_to_nodes ARGS((node_t *));$/;"	p	signature:(node_t *)
factored	sis_header/node.h	/^    char *factored;		\/* reserved for factoring package *\/$/;"	m	struct:node_struct	access:public
fail	sis_header/util.h	229;"	d
fail	util/util.h	225;"	d
fall	sis_header/delay.h	/^    double fall;$/;"	m	struct:time_struct	access:public
fanin	edge.h	/^	Node<NP, EP> *fanin;$/;"	m	class:Edge	access:public
fanin	sis_header/atpg.h	/^    int *fanin;$/;"	m	struct:__anon38	access:public
fanin	sis_header/atpg.h	/^    node_t *fanin;$/;"	m	struct:fault_pattern_struct	access:public
fanin	sis_header/atpg.h	/^  node_t        *fanin;		\/* input connection, NIL if output *\/$/;"	m	struct:fault_struct	access:public
fanin	sis_header/node.h	/^    node_t **fanin;$/;"	m	struct:node_struct	access:public
fanin_add_fanout	sis_header/node.h	/^EXTERN void fanin_add_fanout ARGS((node_t *));$/;"	p	signature:(node_t *)
fanin_changed	sis_header/node.h	/^    unsigned fanin_changed:1;	\/* flag to catch fanin generation errors *\/$/;"	m	struct:node_struct	access:public
fanin_dfs_sort	sis_header/atpg.h	/^extern int *fanin_dfs_sort();$/;"	p	signature:()
fanin_fanout	sis_header/node.h	/^    lsHandle *fanin_fanout;	\/* handles of our fanin's fanout_t structure *\/$/;"	m	struct:node_struct	access:public
fanin_remove_fanout	sis_header/node.h	/^EXTERN void fanin_remove_fanout ARGS((node_t *));$/;"	p	signature:(node_t *)
fanin_values	sis_header/atpg.h	/^    unsigned        **fanin_values;$/;"	m	struct:atpg_sim_node_struct	access:public
fanins	sis_header/retime.h	/^    array_t *fanins;		\/* fanin edges of node (typed re_edge *) *\/$/;"	m	struct:re_node	access:public
fanout	edge.h	/^	Node<NP, EP> *fanout;$/;"	m	class:Edge	access:public
fanout	sis_header/atpg.h	/^    int  	    *fanout;$/;"	m	struct:atpg_sim_node_struct	access:public
fanout	sis_header/atpg.h	/^    node_t **fanout;$/;"	m	struct:__anon38	access:public
fanout	sis_header/node.h	/^    lsList fanout;		\/* list of 'fanout_t' structures *\/$/;"	m	struct:node_struct	access:public
fanout	sis_header/node.h	/^    node_t *fanout;$/;"	m	struct:fanout_struct	access:public
fanout	sis_header/speed.h	/^    node_t *fanout;	       \/* The node to which destination belongs to *\/$/;"	m	struct:sp_fanout_struct	access:public
fanout_changed	sis_header/node.h	/^    unsigned fanout_changed:1;	\/* flag to catch fanout generation errors *\/$/;"	m	struct:node_struct	access:public
fanout_struct	sis_header/node.h	/^struct fanout_struct {$/;"	s
fanout_struct::fanout	sis_header/node.h	/^    node_t *fanout;$/;"	m	struct:fanout_struct	access:public
fanout_struct::pin	sis_header/node.h	/^    int pin;$/;"	m	struct:fanout_struct	access:public
fanout_t	sis_header/node.h	/^typedef struct fanout_struct fanout_t;$/;"	t	typeref:struct:fanout_struct
fanouts	sis_header/retime.h	/^    array_t *fanouts;		\/* fanout edges of node (typed re_edge *) *\/$/;"	m	struct:re_node	access:public
fanouts	sis_header/speed.h	/^    sp_fanout_t *fanouts;      \/* Description of the fanout destinations *\/$/;"	m	struct:buffer_alg_input_struct	access:public
fast_sat	sis_header/atpg.h	/^    bool fast_sat;$/;"	m	struct:__anon32	access:public
fatal	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void fatal ARGS((char *));$/;"	p	signature:(char *)
fault_id	sis_header/atpg.h	/^    int fault_id;$/;"	m	struct:__anon38	access:public
fault_pattern_struct	sis_header/atpg.h	/^struct fault_pattern_struct {$/;"	s
fault_pattern_struct::fanin	sis_header/atpg.h	/^    node_t *fanin;$/;"	m	struct:fault_pattern_struct	access:public
fault_pattern_struct::node	sis_header/atpg.h	/^    node_t *node;$/;"	m	struct:fault_pattern_struct	access:public
fault_pattern_struct::value	sis_header/atpg.h	/^    unsigned value;$/;"	m	struct:fault_pattern_struct	access:public
fault_pattern_t	sis_header/atpg.h	/^typedef struct fault_pattern_struct fault_pattern_t;$/;"	t	typeref:struct:fault_pattern_struct
fault_simulate	sis_header/atpg.h	/^    bool fault_simulate;$/;"	m	struct:__anon32	access:public
fault_simulate	sis_header/atpg.h	/^    long fault_simulate;$/;"	m	struct:__anon33	access:public
fault_simulate	sis_header/atpg.h	/^extern void fault_simulate();$/;"	p	signature:()
fault_simulate_to_get_final_state	sis_header/atpg.h	/^extern void fault_simulate_to_get_final_state();$/;"	p	signature:()
fault_status_enum	sis_header/atpg.h	/^enum fault_status_enum {$/;"	g
fault_status_t	sis_header/atpg.h	/^typedef enum fault_status_enum fault_status_t;$/;"	t	typeref:enum:fault_status_enum
fault_struct	sis_header/atpg.h	/^struct fault_struct {$/;"	s
fault_struct::current_state	sis_header/atpg.h	/^  unsigned 	*current_state;	\/* saves 32 states in parallel for use in$/;"	m	struct:fault_struct	access:public
fault_struct::fanin	sis_header/atpg.h	/^  node_t        *fanin;		\/* input connection, NIL if output *\/$/;"	m	struct:fault_struct	access:public
fault_struct::index	sis_header/atpg.h	/^  int           index;          \/* index of fanin for input fault *\/$/;"	m	struct:fault_struct	access:public
fault_struct::is_covered	sis_header/atpg.h	/^  bool          is_covered; 	\/* initially 0; set to 1 if covered *\/$/;"	m	struct:fault_struct	access:public
fault_struct::node	sis_header/atpg.h	/^  node_t        *node;		\/* node on which fault occurs *\/$/;"	m	struct:fault_struct	access:public
fault_struct::redund_type	sis_header/atpg.h	/^  redund_type_t redund_type;	\/* Used in redundancy removal.  $/;"	m	struct:fault_struct	access:public
fault_struct::sequence	sis_header/atpg.h	/^  sequence_t	*sequence;	\/* which sequence covers fault *\/$/;"	m	struct:fault_struct	access:public
fault_struct::sequence_index	sis_header/atpg.h	/^  int           sequence_index;	\/* which sequence detects fault, $/;"	m	struct:fault_struct	access:public
fault_struct::status	sis_header/atpg.h	/^  fault_status_t  status;$/;"	m	struct:fault_struct	access:public
fault_struct::value	sis_header/atpg.h	/^  stuck_value_t value;$/;"	m	struct:fault_struct	access:public
fault_t	sis_header/atpg.h	/^typedef struct fault_struct fault_t;$/;"	t	typeref:struct:fault_struct
faults	sis_header/atpg.h	/^    lsList faults;			\/* fault list *\/$/;"	m	struct:__anon35	access:public
faults_ptr	sis_header/atpg.h	/^    fault_t **faults_ptr;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
faulty_state	sis_header/atpg.h	/^    array_t *faulty_state;$/;"	m	struct:__anon37	access:public
faulty_state	sis_header/atpg.h	/^    unsigned *faulty_state;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
feasibly_covered	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN bool feasibly_covered ARGS((pcover, pcube, pcube,$/;"	p	signature:(pcover, pcube, pcube, pcube)
ff_propagate	sis_header/atpg.h	/^    long ff_propagate;$/;"	m	struct:__anon33	access:public
filename	sis_header/espresso.h	/^    char *filename;             \/* filename *\/$/;"	m	struct:__anon14	access:public
fillin_word_vectors	sis_header/atpg.h	/^extern void fillin_word_vectors();$/;"	p	signature:()
final_area	sis_header/retime.h	/^    double final_area;		\/* area target for final implementation *\/$/;"	m	struct:re_node	access:public
final_delay	sis_header/retime.h	/^    double final_delay;		\/* delay target for final implementation *\/$/;"	m	struct:re_node	access:public
final_untested_faults	sis_header/atpg.h	/^    lsList final_untested_faults;$/;"	m	struct:__anon35	access:public
find	array.h	/^	int find(T& item, int (*compare)(const void *, const void *) = cmp); \/\/ return the index of item$/;"	p	class:Array	access:public	signature:(T& item, int (*compare)(const void *, const void *) = cmp)
find	array.h	/^inline int Array<T>::find(T& item, int (*compare)(const void *, const void *)) {$/;"	f	class:Array	signature:(T& item, int (*compare)(const void *, const void *))
findNode	graph.h	/^	Node<NP, EP> *findNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
findNode	graph.h	/^	Node<NP, EP> *findNode(string &name); \/\/ return the node with "name"$/;"	p	class:Graph	access:public	signature:(string &name)
findNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::findNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
findNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::findNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
find_all_minimal_covers_petrick	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pcover find_all_minimal_covers_petrick ARGS(());$/;"	p	signature:()
find_all_primes	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN pcover find_all_primes ARGS((pcover, pcube, pcube));$/;"	p	signature:(pcover, pcube, pcube)
find_best_cost	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int find_best_cost ARGS((ppair));$/;"	p	signature:(ppair)
find_best_set_order	sis_header/seqbdd.h	/^extern array_t *find_best_set_order(\/* set_info_t *info, int verbose *\/);$/;"	p	signature:( )
find_covers	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pset_family find_covers ARGS((pcover, pcover, pset, int));$/;"	p	signature:(pcover, pcover, pset, int)
find_dc_inputs	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int find_dc_inputs ARGS((pPLA, symbolic_list_t *, int, int, pcover *, pcover *));$/;"	p	signature:(pPLA, symbolic_list_t *, int, int, pcover *, pcover *)
find_equiv_outputs	sis_header/espresso.h	/^\/* equiv.c *\/	EXTERN int  find_equiv_outputs ARGS((pPLA));$/;"	p	signature:(pPLA)
find_ex_dc	sis_header/network.h	/^EXTERN node_t *find_ex_dc ARGS((node_t *, st_table *));$/;"	p	signature:(node_t *, st_table *)
find_good_constraint	sis_header/atpg.h	/^extern bdd_t *find_good_constraint();$/;"	p	signature:()
find_greedy_set_order	sis_header/seqbdd.h	/^extern array_t *find_greedy_set_order(\/* set_info_t *info, int verbose *\/);$/;"	p	signature:( )
find_inputs	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int find_inputs ARGS((pcover, pPLA, symbolic_list_t *,$/;"	p	signature:(pcover, pPLA, symbolic_list_t *, int, int, pcover *, pcover *)
find_optimal_pairing	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN void find_optimal_pairing ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
find_pairing_cost	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int **find_pairing_cost ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
find_phase	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pcube find_phase ARGS((pPLA, int, pcube));$/;"	p	signature:(pPLA, int, pcube)
first_col	sis_header/sparse.h	/^    sm_col *first_col;		\/* first column (linked list of columns) *\/$/;"	m	struct:sm_matrix_struct	access:public
first_col	sis_header/sparse.h	/^    sm_element *first_col;	\/* first element in this row *\/$/;"	m	struct:sm_row_struct	access:public
first_label_element	sis_header/maxflow.h	/^    mfnptr first_label_element; \/* first element in the scan list *\/$/;"	m	struct:MF_GRAPH	access:public
first_part	sis_header/espresso.h	/^    int *first_part;            \/* first element of each variable *\/$/;"	m	struct:cube_struct	access:public
first_row	sis_header/sparse.h	/^    sm_element *first_row;	\/* first element in this column *\/$/;"	m	struct:sm_col_struct	access:public
first_row	sis_header/sparse.h	/^    sm_row *first_row;		\/* first row (linked list of all rows) *\/$/;"	m	struct:sm_matrix_struct	access:public
first_sbrk	sis_header/bdd.h	/^        int first_sbrk;         \/* value of sbrk at start of manager; used to analyze memory usage *\/$/;"	m	struct:bdd_stats::__anon28	access:public
first_word	sis_header/espresso.h	/^    int *first_word;            \/* first word for each variable *\/$/;"	m	struct:cube_struct	access:public
flag	bnetwork.h	/^	int flag;$/;"	m	class:BNodeProperty	access:public
flag	ignetwork.h	/^	int flag[4]; \/\/ flag[0] flag[1]: inStack, inStackForced. flag[2]: unjustified, flag[3]: justified$/;"	m	class:IGNodeProperty	access:public
flag	sis_header/clock.h	/^    clock_setting_t flag;    \/* SPECIFICATION or WORKING *\/$/;"	m	struct:network_clock_struct	access:public
flag	sis_header/maxflow.h	/^    int flag;             \/* flag word *\/$/;"	m	struct:MF_EDGE	access:public
flag	sis_header/maxflow.h	/^    short flag;           \/* flag word *\/$/;"	m	struct:MF_NODE	access:public
flag	sis_header/sparse.h	/^    int flag;			\/* user-defined word *\/$/;"	m	struct:sm_col_struct	access:public
flag	sis_header/sparse.h	/^    int flag;			\/* user-defined word *\/$/;"	m	struct:sm_row_struct	access:public
flags	sis_header/mtr.h	/^    MtrHalfWord flags;$/;"	m	struct:MtrNode	access:public
flow	sis_header/maxflow.h	/^    int flow;             \/* flow of the edge *\/$/;"	m	struct:MF_EDGE	access:public
fmt_cost	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN char *fmt_cost ARGS((pcost));$/;"	p	signature:(pcost)
fmt_cube	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN char *fmt_cube ARGS((pcube, char *, char *));$/;"	p	signature:(pcube, char *, char *)
fmt_expanded_cube	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN char *fmt_expanded_cube ARGS(());$/;"	p	signature:()
fname	sis_header/maxflow.h	/^    char *fname;          \/* store the fictitious node name pointer *\/$/;"	m	struct:MF_NODE	access:public
fns	sis_header/seqbdd.h	/^  array_t *fns;$/;"	m	struct:__anon12	access:public
fns	sis_header/seqbdd.h	/^  array_t *fns;$/;"	m	struct:__anon13	access:public
force_comb	sis_header/atpg.h	/^    bool force_comb;$/;"	m	struct:__anon32	access:public
force_lower	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN pset force_lower ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
forced	ignetwork.h	/^	int forced;$/;"	m	class:IGNodeProperty	access:public
forced	imply.cpp	/^	int forced;$/;"	m	struct:IGStackElement_	file:	access:public
forced	imply.noforced.cpp	/^	int forced;$/;"	m	struct:IGStackElement_	file:	access:public
foreach_PI	bnetwork.h	244;"	d
foreach_PO	bnetwork.h	250;"	d
foreach_active_set	sis_header/espresso.h	131;"	d
foreach_bdd_cube	sis_header/bdd.h	77;"	d
foreach_bdd_node	sis_header/bdd.h	88;"	d
foreach_clock	sis_header/clock.h	83;"	d
foreach_edge	sis_header/graph.h	39;"	d
foreach_fanin	node.h	178;"	d
foreach_fanin	rewire_c.cpp	5;"	d	file:
foreach_fanin	sis_header/node.h	108;"	d
foreach_fanin	sis_interface.cpp	5;"	d	file:
foreach_fanout	node.h	181;"	d
foreach_fanout	rewire_c.cpp	6;"	d	file:
foreach_fanout	sis_header/node.h	113;"	d
foreach_fanout	sis_interface.cpp	6;"	d	file:
foreach_fanout_pin	sis_header/node.h	118;"	d
foreach_ignode	ignetwork.h	384;"	d
foreach_in_edge	sis_header/graph.h	52;"	d
foreach_latch	sis_header/network.h	58;"	d
foreach_node	bnetwork.h	238;"	d
foreach_node	rewire_c.cpp	7;"	d	file:
foreach_node	sis_header/network.h	48;"	d
foreach_node	sis_interface.cpp	7;"	d	file:
foreach_out_edge	sis_header/graph.h	57;"	d
foreach_output_function	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int foreach_output_function ARGS((pPLA, ESP_PFI, ESP_PFI ));$/;"	p	signature:(pPLA, ESP_PFI, ESP_PFI )
foreach_primary_input	sis_header/network.h	51;"	d
foreach_primary_output	sis_header/network.h	54;"	d
foreach_remaining_set	sis_header/espresso.h	129;"	d
foreach_set	sis_header/espresso.h	127;"	d
foreach_set_element	sis_header/espresso.h	147;"	d
foreach_state_inedge	sis_header/stg.h	92;"	d
foreach_state_outedge	sis_header/stg.h	97;"	d
foreach_vertex	sis_header/graph.h	34;"	d
foreachi_active_set	sis_header/espresso.h	137;"	d
foreachi_set	sis_header/espresso.h	135;"	d
form_bitvector	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int form_bitvector ARGS((pset, int, int,$/;"	p	signature:(pset, int, int, symbolic_list_t *)
form_cover_table	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pset_family form_cover_table ARGS((pcover, pcover,$/;"	p	signature:(pcover, pcover, pset, int, int)
fp	sis_header/atpg.h	/^    FILE *fp;$/;"	m	struct:__anon32	access:public
fpr_header	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void fpr_header ARGS((FILE *, pPLA, int));$/;"	p	signature:(FILE *, pPLA, int)
fprint_pla	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void fprint_pla ARGS((FILE *, pPLA, int));$/;"	p	signature:(FILE *, pPLA, int)
free	sis_header/bdd.h	/^    boolean free;	                        \/* TRUE if this is free, FALSE otherwise ... *\/$/;"	m	struct:bdd_t	access:public
free	sis_header/bdd.h	126;"	d
free	sis_header/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
free	util/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
freeBNodelist	rewire.cpp	15;"	d	file:
freeIGNodelist	rewire.cpp	19;"	d	file:
freeNodelist	imply.cpp	15;"	d	file:
freeNodelist	imply.noforced.cpp	15;"	d	file:
free_PLA	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN void free_PLA ARGS((pPLA));$/;"	p	signature:(pPLA)
free_bdds_in_array	sis_header/atpg.h	/^extern void free_bdds_in_array();$/;"	p	signature:()
free_cost_table	sis_header/pld.h	/^extern void free_cost_table();              \/* act_map.c *\/$/;"	p	signature:()
free_cover	sis_header/espresso.h	261;"	d
free_cube	sis_header/espresso.h	258;"	d
free_cubelist	sis_header/espresso.h	262;"	d
free_fault	sis_header/atpg.h	/^extern void free_fault();$/;"	p	signature:()
free_range_data	sis_header/seqbdd.h	/^  seqbdd_free_f	  *free_range_data;$/;"	m	struct:verif_options_t	access:public
free_routine	sis_header/luniq.h	/^void (*free_routine)();			\/* dispose of duplicate objects *\/$/;"	v
from_array_to_table	sis_header/seqbdd.h	/^extern st_table *from_array_to_table(\/* array_t *array *\/);$/;"	p	signature:( )
from_node	sis_header/maxflow.h	/^    char **from_node;$/;"	m	struct:MF_CUTSET	access:public
ftrace	debug.h	47;"	d
ftrace	debug.h	50;"	d
ftrace	debug.h	59;"	d
ftrace	debug.h	70;"	d
ftrace	debug.h	75;"	d
full	sis_header/bdd.h	/^	    unsigned int full;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
full_row	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN bool full_row ARGS((pcube, pcube));$/;"	p	signature:(pcube, pcube)
fullset	sis_header/espresso.h	/^    pset fullset;               \/* a full cube *\/$/;"	m	struct:cube_struct	access:public
function	sis_header/atpg.h	/^    int             **function; 	\/* function[cube][input] is 0, 1, 2 *\/$/;"	m	struct:atpg_sim_node_struct	access:public
fx_get_div_handle	sis_header/extract.h	36;"	d
g0	bnetwork.h	/^	IGNode *g0;$/;"	m	class:IGAssociateProperty	access:public
g1	bnetwork.h	/^	IGNode *g1;$/;"	m	class:IGAssociateProperty	access:public
gGeneric	sis_header/graph.h	/^typedef char *gGeneric;$/;"	t
g_add_edge	sis_header/graph.h	/^EXTERN edge_t *g_add_edge ARGS((vertex_t *, vertex_t *));$/;"	p	signature:(vertex_t *, vertex_t *)
g_add_edge_static	sis_header/graph_static.h	/^EXTERN edge_t *g_add_edge_static ARGS((vertex_t *, vertex_t *));$/;"	p	signature:(vertex_t *, vertex_t *)
g_add_vertex	sis_header/graph.h	/^EXTERN vertex_t *g_add_vertex ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_add_vertex_static	sis_header/graph_static.h	/^EXTERN vertex_t *g_add_vertex_static ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_alloc	sis_header/graph.h	/^EXTERN graph_t *g_alloc ARGS((void));$/;"	p	signature:(void)
g_alloc_static	sis_header/graph_static.h	/^EXTERN graph_t *g_alloc_static ARGS((int, int, int));$/;"	p	signature:(int, int, int)
g_check	sis_header/graph.h	/^EXTERN void g_check ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_copy_e_slots_static	sis_header/graph_static.h	/^EXTERN void g_copy_e_slots_static ARGS((edge_t *, edge_t *, char *(*)()));$/;"	p	signature:(edge_t *, edge_t *, char *(*)())
g_copy_g_slots_static	sis_header/graph_static.h	/^EXTERN void g_copy_g_slots_static ARGS((graph_t *, graph_t *, char *(*)()));$/;"	p	signature:(graph_t *, graph_t *, char *(*)())
g_copy_v_slots_static	sis_header/graph_static.h	/^EXTERN void g_copy_v_slots_static ARGS((vertex_t *, vertex_t *, char *(*)()));$/;"	p	signature:(vertex_t *, vertex_t *, char *(*)())
g_delete_edge	sis_header/graph.h	/^EXTERN void g_delete_edge ARGS((edge_t *, void (*)()));$/;"	p	signature:(edge_t *, void (*)())
g_delete_edge_static	sis_header/graph_static.h	/^EXTERN void g_delete_edge_static ARGS((edge_t *, void (*)()));$/;"	p	signature:(edge_t *, void (*)())
g_delete_vertex	sis_header/graph.h	/^EXTERN void g_delete_vertex ARGS((vertex_t *, void (*)(), void (*)()));$/;"	p	signature:(vertex_t *, void (*)(), void (*)())
g_delete_vertex_static	sis_header/graph_static.h	/^EXTERN void g_delete_vertex_static ARGS((vertex_t *, void (*)(), void (*)()));$/;"	p	signature:(vertex_t *, void (*)(), void (*)())
g_dfs	sis_header/graph.h	/^EXTERN array_t *g_dfs ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_dup	sis_header/graph.h	/^EXTERN graph_t *g_dup ARGS((graph_t *, gGeneric(*)(), gGeneric(*)(), gGeneric(*)()));$/;"	p	signature:(graph_t *, gGeneric(*)(), gGeneric(*)(), gGeneric(*)())
g_dup_static	sis_header/graph_static.h	/^EXTERN graph_t *g_dup_static ARGS((graph_t *, char *(*)(), char *(*)(), char *(*)()));$/;"	p	signature:(graph_t *, char *(*)(), char *(*)(), char *(*)())
g_e_dest	sis_header/graph.h	/^EXTERN vertex_t *g_e_dest ARGS((edge_t *));$/;"	p	signature:(edge_t *)
g_e_source	sis_header/graph.h	/^EXTERN vertex_t *g_e_source ARGS((edge_t *));$/;"	p	signature:(edge_t *)
g_edge_graph	sis_header/graph.h	/^EXTERN graph_t *g_edge_graph ARGS((edge_t *));$/;"	p	signature:(edge_t *)
g_free	sis_header/graph.h	/^EXTERN void g_free ARGS((graph_t *, void(*)(), void(*)(), void(*)()));$/;"	p	signature:(graph_t *, void(*)(), void(*)(), void(*)())
g_free_static	sis_header/graph_static.h	/^EXTERN void g_free_static ARGS((graph_t *, void (*)(), void (*)(), void (*)()));$/;"	p	signature:(graph_t *, void (*)(), void (*)(), void (*)())
g_get_e_slot_static	sis_header/graph_static.h	/^EXTERN char *g_get_e_slot_static ARGS((edge_t *, int));$/;"	p	signature:(edge_t *, int)
g_get_edges	sis_header/graph.h	/^EXTERN lsList g_get_edges ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_get_g_slot_static	sis_header/graph_static.h	/^EXTERN char *g_get_g_slot_static ARGS((graph_t *, int));$/;"	p	signature:(graph_t *, int)
g_get_in_edges	sis_header/graph.h	/^EXTERN lsList g_get_in_edges ARGS((vertex_t *));$/;"	p	signature:(vertex_t *)
g_get_out_edges	sis_header/graph.h	/^EXTERN lsList g_get_out_edges ARGS((vertex_t *));$/;"	p	signature:(vertex_t *)
g_get_v_slot_static	sis_header/graph_static.h	/^EXTERN char *g_get_v_slot_static ARGS((vertex_t *, int));$/;"	p	signature:(vertex_t *, int)
g_get_vertices	sis_header/graph.h	/^EXTERN lsList g_get_vertices ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_graph_sort	sis_header/graph.h	/^EXTERN array_t *g_graph_sort ARGS((graph_t *, int (*)()));$/;"	p	signature:(graph_t *, int (*)())
g_is_acyclic	sis_header/graph.h	/^EXTERN int g_is_acyclic ARGS((graph_t *));$/;"	p	signature:(graph_t *)
g_set_e_slot_static	sis_header/graph_static.h	/^EXTERN void g_set_e_slot_static ARGS((edge_t *, int, char *));$/;"	p	signature:(edge_t *, int, char *)
g_set_g_slot_static	sis_header/graph_static.h	/^EXTERN void g_set_g_slot_static ARGS((graph_t *, int, char *));$/;"	p	signature:(graph_t *, int, char *)
g_set_v_slot_static	sis_header/graph_static.h	/^EXTERN void g_set_v_slot_static ARGS((vertex_t *, int, char *));$/;"	p	signature:(vertex_t *, int, char *)
g_vertex_graph	sis_header/graph.h	/^EXTERN graph_t *g_vertex_graph ARGS((vertex_t *));$/;"	p	signature:(vertex_t *)
garbage_collector	sis_header/bdd.h	/^    } garbage_collector;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon17	access:public
gate	sis_header/latch.h	/^    struct lib_gate_struct *gate;		\/* Reference to the library implementation *\/$/;"	m	struct:latch_struct	typeref:struct:latch_struct::lib_gate_struct	access:public
gates	sis_header/library.h	/^    lsList gates;		\/* list of gates in this class *\/$/;"	m	struct:lib_class_struct	access:public
gates	sis_header/library.h	/^    lsList gates;		\/* list of lib_gate_t gate descriptions *\/$/;"	m	struct:library_struct	access:public
gaveup	sis_header/sat.h	/^    bool gaveup;$/;"	m	struct:__anon5	access:public
gc	sis_header/bdd.h	/^    } gc;$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon27	access:public
gcd_nodevec	sis_header/gcd.h	/^EXTERN node_t *gcd_nodevec ARGS((array_t *));$/;"	p	signature:(array_t *)
gcd_prime_factorize	sis_header/gcd.h	/^EXTERN array_t *gcd_prime_factorize ARGS((node_t *));$/;"	p	signature:(node_t *)
gen_eqn	sis_header/enc.h	/^extern dic_family_t     *gen_eqn();$/;"	p	signature:()
gen_uniq	sis_header/enc.h	/^extern dic_family_t     *gen_uniq();$/;"	p	signature:()
generate_all_pairs	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int generate_all_pairs ARGS((ppair, int, pset, ESP_PFI));$/;"	p	signature:(ppair, int, pset, ESP_PFI)
generate_global_output	sis_header/seqbdd.h	/^  int generate_global_output;		\/* 0\/1 *\/$/;"	m	struct:__anon9	access:public
generate_test	sis_header/atpg.h	/^extern sequence_t *generate_test();$/;"	p	signature:()
generate_test_using_verification	sis_header/atpg.h	/^extern sequence_t *generate_test_using_verification();$/;"	p	signature:()
getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Node<NP, EP> *fanin, Node<NP, EP> *fanout);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
getEdgeProperty	graph.h	/^	EP &getEdgeProperty(Node<NP, EP> *fanin, int fanoutIdx);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, int fanoutIdx)
getEdgeProperty	graph.h	/^	EP &getEdgeProperty(char *faninName, char *fanoutName); \/\/ get the edge property of the edge$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName)
getEdgeProperty	graph.h	/^	EP &getEdgeProperty(string &faninName, string &fanoutName);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName)
getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Node<NP, EP> *fanin, Node<NP, EP> *fanout) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(Node<NP, EP> *fanin, int fanoutIdx) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, int fanoutIdx)
getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(char *faninName, char *fanoutName) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName)
getEdgeProperty	graph.h	/^inline EP& Graph<GP, NP, EP>::getEdgeProperty(string &faninName, string &fanoutName) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName)
getFaninProperty	node.h	/^	EP &getFaninProperty(Node<NP, EP> *fanin);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *fanin)
getFaninProperty	node.h	/^inline EP& Node<NP, EP>::getFaninProperty(Node<NP, EP> *fanin) {$/;"	f	class:Node	signature:(Node<NP, EP> *fanin)
getFanoutProperty	node.h	/^	EP &getFanoutProperty(Node<NP, EP> *fanout);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *fanout)
getFanoutProperty	node.h	/^	EP &getFanoutProperty(int idx);$/;"	p	class:Node	access:public	signature:(int idx)
getFanoutProperty	node.h	/^inline EP &Node<NP, EP>::getFanoutProperty(int idx) {$/;"	f	class:Node	signature:(int idx)
getFanoutProperty	node.h	/^inline EP& Node<NP, EP>::getFanoutProperty(Node<NP, EP> *fanout) {$/;"	f	class:Node	signature:(Node<NP, EP> *fanout)
getNewName	graph.h	/^	static string *getNewName();$/;"	p	class:Graph	access:private	signature:()
getNodeProperty	graph.h	/^	NP &getNodeProperty(Node<NP, EP> *node) {return node->p;};$/;"	f	class:Graph	access:public	signature:(Node<NP, EP> *node)
getNodeProperty	graph.h	/^	NP &getNodeProperty(char *name) {return getNodeProperty(findNode(name));};$/;"	f	class:Graph	access:public	signature:(char *name)
getNodeProperty	graph.h	/^	NP &getNodeProperty(string &name) {return getNodeProperty(findNode(name));};$/;"	f	class:Graph	access:public	signature:(string &name)
getSoftDataLimit	sis_header/util.h	/^EXTERN long getSoftDataLimit();$/;"	p	signature:()
getSoftDataLimit	util/datalimit.c	/^getSoftDataLimit()$/;"	f
getSoftDataLimit	util/util.h	/^EXTERN long getSoftDataLimit();$/;"	p	signature:()
get_manual_order	sis_header/seqbdd.h	/^extern void get_manual_order(\/* st_table *order, verif_options_t *options *\/);$/;"	p	signature:( )
get_min_just_sequence	sis_header/atpg.h	/^extern int get_min_just_sequence();$/;"	p	signature:()
get_pi_ordering	sis_header/seqbdd.h	/^extern st_table *get_pi_ordering();$/;"	p	signature:()
get_pi_to_var_table	sis_header/atpg.h	/^extern st_table *get_pi_to_var_table();$/;"	p	signature:()
get_pin_delay	sis_header/delay.h	/^EXTERN delay_pin_t *get_pin_delay ARGS((node_t *, int, delay_model_t));$/;"	p	signature:(node_t *, int, delay_model_t)
get_po_ordering	sis_header/seqbdd.h	/^extern array_t *get_po_ordering();$/;"	p	signature:()
get_remaining_po	sis_header/seqbdd.h	/^extern array_t *get_remaining_po();$/;"	p	signature:()
get_word	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN char *get_word ARGS((FILE *, char *));$/;"	p	signature:(FILE *, char *)
getenv	sis_header/util.h	/^extern char *getenv();$/;"	p	signature:()
getenv	util/util.h	/^extern char *getenv();$/;"	p	signature:()
getpagesize	util/saveimage.c	/^extern int getpagesize();$/;"	p	file:
good_faulty_PMT	sis_header/atpg.h	/^extern int good_faulty_PMT();$/;"	p	signature:()
good_state	sis_header/atpg.h	/^    array_t *good_state;$/;"	m	struct:__anon37	access:public
graph	sis_header/maxflow.h	/^    mfgptr graph;$/;"	m	struct:MF_CUTSET	access:public
graph_struct	sis_header/graph.h	/^typedef struct graph_struct {$/;"	s
graph_struct::user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:graph_struct	access:public
graph_t	sis_header/graph.h	/^} graph_t;$/;"	t	typeref:struct:graph_struct
greedy_best_cost	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int greedy_best_cost ARGS((int **, ppair *));$/;"	p	signature:(int **, ppair *)
grow_factor	sis_header/st.h	/^    double grow_factor;$/;"	m	struct:st_table	access:public
grow_stack	util/restart.c	/^grow_stack() $/;"	f	file:
handle	sis_header/extract.h	/^    lsHandle handle;        \/* lsHandle to double-cube divisor set *\/$/;"	m	struct:double_cube_divisor_struct	access:public
handle_sigquit	util/restart.c	/^handle_sigquit(sig, code, scp)$/;"	f	file:
hash	sis_header/st.h	/^    int (*hash)();$/;"	m	struct:st_table	access:public
hashtable	sis_header/bdd.h	/^	bdd_cache_stats hashtable;   \/* the unique table; collisions and inserts fields not used *\/ $/;"	m	struct:bdd_stats::__anon21	access:public
hashtable	sis_header/bdd.h	/^	unsigned int hashtable;$/;"	m	struct:bdd_stats::__anon28	access:public
height	sis_header/avl.h	/^    int height;$/;"	m	struct:avl_node_struct	access:public
hits	sis_header/bdd.h	/^    unsigned int hits;$/;"	m	struct:bdd_cache_stats	access:public
hold	sis_header/library.h	/^  double hold;$/;"	m	struct:latch_time_struct	access:public
id	sis_header/retime.h	/^    int id;			\/* reference id for direct access *\/$/;"	m	struct:re_edge	access:public
id	sis_header/retime.h	/^    int id;			\/* reference id for direct access *\/$/;"	m	struct:re_node	access:public
ignodes	bnetwork.h	/^	IGAssociateProperty ignodes;$/;"	m	class:BNodeProperty	access:public
imply	sis_header/sat.h	/^    array_t *imply;$/;"	m	struct:__anon5	access:public
implyStack	imply.cpp	/^static Array<IGStackElement> implyStack(DEFAULT_LIST_SIZE);$/;"	p	file:	signature:(DEFAULT_LIST_SIZE)
implyStack	imply.noforced.cpp	/^static Array<IGStackElement> implyStack(DEFAULT_LIST_SIZE);$/;"	p	file:	signature:(DEFAULT_LIST_SIZE)
implyType	ignetwork.h	/^	IGImplyType implyType;$/;"	m	class:IGNodeProperty	access:public
imply_	imply.cpp	/^inline int imply_(int mask, Array<IGNode *> &markedNodes, Array<IGNode *> &unjustifiedAndNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes, Array<IGNode *> &unjustifiedAndNodes)
imply_	imply.noforced.cpp	/^inline int imply_(int mask, Array<IGNode *> &markedNodes, Array<IGNode *> &unjustifiedAndNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes, Array<IGNode *> &unjustifiedAndNodes)
in	node.h	/^	Array<Node<NP, EP> *> in;$/;"	m	class:Node	access:public
in	sis_header/espresso.h	/^    int in;			\/* transistor count, binary-valued variables *\/$/;"	m	struct:cost_struct	access:public
in_edge	sis_header/maxflow.h	/^    mfeptr *in_edge;      \/* edges incident to this node *\/$/;"	m	struct:MF_NODE	access:public
increment_flow	sis_header/maxflow.h	/^    int increment_flow;   \/* the increment flow *\/$/;"	m	struct:MF_NODE	access:public
index	array/array.h	/^    int	 index;		\/* combined index and locking flag.	*\/$/;"	m	struct:array_t	access:public
index	sis_header/array.h	/^    int	 index;		\/* combined index and locking flag.	*\/$/;"	m	struct:array_t	access:public
index	sis_header/atpg.h	/^    int index;$/;"	m	struct:__anon30	access:public
index	sis_header/atpg.h	/^    int index;$/;"	m	struct:__anon31	access:public
index	sis_header/atpg.h	/^  int           index;          \/* index of fanin for input fault *\/$/;"	m	struct:fault_struct	access:public
index	sis_header/mtr.h	/^    MtrHalfWord index;$/;"	m	struct:MtrNode	access:public
index	sis_header/st.h	/^    int index;$/;"	m	struct:st_generator	access:public
info	sis_header/sat.h	/^    char *info;$/;"	m	struct:__anon6	access:public
init_astg	sis_header/astg.h	/^void	 init_astg ARGS(());$/;"	p	signature:()
init_blocks	sis_header/bdd.h	/^      unsigned int init_blocks;       \/* number of bdd_nodeBlocks initially allocated *\/$/;"	m	struct:bdd_mgr_init::__anon19	access:public
init_graphics	sis_header/graphics.h	/^extern void init_graphics ();$/;"	p	signature:()
init_node	sis_header/seqbdd.h	/^  node_t *init_node;			\/* initial state *\/$/;"	m	struct:__anon9	access:public
init_sis	sis_interface.cpp	/^	extern void init_sis(int flag);$/;"	p	file:	signature:(int flag)
init_state_fn	sis_header/seqbdd.h	/^  bdd_t *init_state_fn;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
initial_faults	sis_header/atpg.h	/^    int initial_faults;$/;"	m	struct:__anon34	access:public
initial_value	sis_header/latch.h	/^    int initial_value;		\/* initial or reset state *\/$/;"	m	struct:latch_struct	access:public
initial_values	sis_header/retime.h	/^    int *initial_values;	\/* Initial values on the latches *\/$/;"	m	struct:re_edge	access:public
inmask	sis_header/espresso.h	/^    unsigned int inmask;        \/* mask to get odd word of binary part *\/$/;"	m	struct:cube_struct	access:public
inode	sis_header/maxflow.h	/^    mfnptr inode;         \/* edge incident from this node *\/$/;"	m	struct:MF_EDGE	access:public
input_cofactor	sis_header/seqbdd.h	/^extern bdd_t *input_cofactor();$/;"	p	signature:()
input_network_check_pi	sis_header/seqbdd.h	/^extern int input_network_check_pi(\/* net1, net2 *\/);$/;"	p	signature:( )
input_phase_enum	sis_header/node.h	/^enum input_phase_enum {$/;"	g
input_phase_t	sis_header/node.h	/^typedef enum input_phase_enum input_phase_t;$/;"	t	typeref:enum:input_phase_enum
input_trace	sis_header/atpg.h	/^    array_t *input_trace;		\/* tmp space - justification *\/$/;"	m	struct:__anon37	access:public
input_vars	sis_header/atpg.h	/^    array_t *input_vars;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
input_vars	sis_header/seqbdd.h	/^  array_t *input_vars;			\/* for CONSISTENCY2_METHOD (should be merged with pi_inputs) *\/$/;"	m	struct:__anon10	access:public
inputs	sis_header/atpg.h	/^    unsigned        **inputs; 		\/* inputs[0] is negative,$/;"	m	struct:atpg_sim_node_struct	access:public
ins	sis_header/seqbdd.h	/^  array_t *ins;$/;"	m	struct:__anon13	access:public
insert	array.h	/^	void insert(T& item); \/\/ insert item at the end$/;"	p	class:Array	access:public	signature:(T& item)
insert	array.h	/^	void insert(int idx, T& item); \/\/ insert item after the index i$/;"	p	class:Array	access:public	signature:(int idx, T& item)
insert	array.h	/^inline void Array<T>::insert(T& item) {$/;"	f	class:Array	signature:(T& item)
insert	array.h	/^inline void Array<T>::insert(int idx, T& item) {$/;"	f	class:Array	signature:(int idx, T& item)
inserts	sis_header/bdd.h	/^    unsigned int inserts;$/;"	m	struct:bdd_cache_stats	access:public
int_to_node	sis_header/nodeindex.h	/^    array_t *int_to_node;$/;"	m	struct:nodeindex_struct	access:public
internal_states_seq_state_justify	sis_header/atpg.h	/^extern int internal_states_seq_state_justify();$/;"	p	signature:()
inv_node	sis_header/speed.h	/^    node_t *inv_node;	       \/* node driving inv destinations *\/$/;"	m	struct:buffer_alg_input_struct	access:public
inword	sis_header/espresso.h	/^    int inword;                 \/* which word number for above *\/$/;"	m	struct:cube_struct	access:public
irred_derive_table	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN sm_matrix *irred_derive_table ARGS((pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover)
irred_gasp	sis_header/espresso.h	/^\/* gasp.c *\/	EXTERN pcover irred_gasp ARGS((pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover)
irred_split_cover	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN void irred_split_cover ARGS((pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover *, pcover *, pcover *)
irredundant	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN pcover irredundant ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
isAllTwDstFaninFanoutCone	rewire.cpp	/^inline static int isAllTwDstFaninFanoutCone(BNode* twDst, set<BNode*>& twFanoutCone);$/;"	p	file:	signature:(BNode* twDst, set<BNode*>& twFanoutCone)
isAllTwDstFaninFanoutCone	rewire.cpp	/^inline static int isAllTwDstFaninFanoutCone(BNode* twDst, set<BNode*>& twFanoutConeSet)$/;"	f	file:	signature:(BNode* twDst, set<BNode*>& twFanoutConeSet)
is_covered	sis_header/atpg.h	/^  bool          is_covered; 	\/* initially 0; set to 1 if covered *\/$/;"	m	struct:fault_struct	access:public
is_dup_free	sis_header/node.h	/^    unsigned is_dup_free:1;	\/* node has no aliasing of its fanin *\/$/;"	m	struct:node_struct	access:public
is_in_set	sis_header/espresso.h	162;"	d
is_min_base	sis_header/node.h	/^    unsigned is_min_base:1;	\/* node is minimum base *\/$/;"	m	struct:node_struct	access:public
is_product_network	sis_header/seqbdd.h	/^  int is_product_network;		\/* 0\/1 *\/$/;"	m	struct:__anon9	access:public
is_scc_minimal	sis_header/node.h	/^    unsigned is_scc_minimal:1;	\/* node is scc-minimal *\/$/;"	m	struct:node_struct	access:public
is_unate	sis_header/espresso.h	/^    bool *is_unate;             \/* indicates given var is unate *\/$/;"	m	struct:cdata_struct	access:public
ite	sis_header/node.h	/^    char *ite;			\/* reserved for pld package *\/$/;"	m	struct:node_struct	access:public
itetable	sis_header/bdd.h	/^	bdd_cache_stats itetable;$/;"	m	struct:bdd_stats::__anon21	access:public
joinJustifications	imply.cpp	/^inline void joinJustifications(int mask, Array<IGNode *> &just1MarkedNodes, Array<IGNode *> &just2MarkedNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &just1MarkedNodes, Array<IGNode *> &just2MarkedNodes, Array<IGNode *> &markedNodes)
joinJustifications	imply.noforced.cpp	/^inline void joinJustifications(int mask, Array<IGNode *> &just1MarkedNodes, Array<IGNode *> &just2MarkedNodes, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &just1MarkedNodes, Array<IGNode *> &just2MarkedNodes, Array<IGNode *> &markedNodes)
just_sequence	sis_header/atpg.h	/^    array_t *just_sequence;		\/* tmp space - justification *\/$/;"	m	struct:__anon37	access:public
just_sequence_table	sis_header/atpg.h	/^    st_table *just_sequence_table;$/;"	m	struct:__anon37	access:public
justified_states	sis_header/atpg.h	/^    bdd_t *justified_states;$/;"	m	struct:__anon37	access:public
justify	sis_header/atpg.h	/^    long justify;$/;"	m	struct:__anon33	access:public
karp_decomp_network	sis_header/pld.h	/^extern void karp_decomp_network();   \/* xln_k_decomp.c *\/$/;"	p	signature:()
keep_old_network	sis_header/seqbdd.h	/^  int keep_old_network;		 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
key	sis_header/avl.h	/^    char *key;$/;"	m	struct:avl_node_struct	access:public
key	sis_header/espresso.h	/^    char *key;$/;"	m	struct:pla_types_struct	access:public
key	sis_header/st.h	/^    char *key;$/;"	m	struct:st_table_entry	access:public
kiss_output	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN int kiss_output ARGS((FILE *, pPLA));$/;"	p	signature:(FILE *, pPLA)
kiss_print_cube	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN int kiss_print_cube ARGS((FILE *, pPLA, pcube, char *));$/;"	p	signature:(FILE *, pPLA, pcube, char *)
label	sis_header/espresso.h	/^    char **label;		\/* labels for the columns *\/$/;"	m	struct:__anon14	access:public
label	sis_header/espresso.h	/^    char *label;$/;"	m	struct:symbolic_label_struct	access:public
label_index	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN int label_index ARGS((pPLA, char *, int *, int *));$/;"	p	signature:(pPLA, char *, int *, int *)
last_col	sis_header/sparse.h	/^    sm_col *last_col;		\/* last column (linked list of columns) *\/$/;"	m	struct:sm_matrix_struct	access:public
last_col	sis_header/sparse.h	/^    sm_element *last_col;	\/* last element in this row *\/$/;"	m	struct:sm_row_struct	access:public
last_gasp	sis_header/espresso.h	/^\/* gasp.c *\/	EXTERN pcover last_gasp ARGS((pcover, pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover, cost_t *cost)
last_label_element	sis_header/maxflow.h	/^    mfnptr last_label_element;  \/* last element in the scan list *\/$/;"	m	struct:MF_GRAPH	access:public
last_part	sis_header/espresso.h	/^    int *last_part;             \/* first element of each variable *\/$/;"	m	struct:cube_struct	access:public
last_row	sis_header/sparse.h	/^    sm_element *last_row;	\/* last element in this column *\/$/;"	m	struct:sm_col_struct	access:public
last_row	sis_header/sparse.h	/^    sm_row *last_row;		\/* last row (linked list of all rows) *\/$/;"	m	struct:sm_matrix_struct	access:public
last_sbrk	sis_header/bdd.h	/^        int last_sbrk;          \/* value of last sbrk (see "man sbrk") fetched; used to analyze memory usage *\/$/;"	m	struct:bdd_stats::__anon28	access:public
last_time	sis_header/seqbdd.h	/^  int last_time;		 \/* last time the time was asked for *\/$/;"	m	struct:verif_options_t	access:public
last_word	sis_header/espresso.h	/^    int *last_word;             \/* last word for each variable *\/$/;"	m	struct:cube_struct	access:public
latch	sis_header/network.h	/^    lsList latch;               \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
latch	sis_header/retime.h	/^    struct latch_struct *latch;     \/* Reference to the latch in the network *\/$/;"	m	struct:re_latch_t	typeref:struct:re_latch_t::latch_struct	access:public
latch_alloc	sis_header/latch.h	/^EXTERN latch_t *latch_alloc ARGS((void));$/;"	p	signature:(void)
latch_equal	sis_header/latch.h	/^EXTERN int latch_equal ARGS((latch_t *, latch_t *));$/;"	p	signature:(latch_t *, latch_t *)
latch_free	sis_header/latch.h	/^EXTERN void latch_free ARGS((latch_t *));$/;"	p	signature:(latch_t *)
latch_from_node	sis_header/latch.h	/^EXTERN latch_t *latch_from_node ARGS((node_t *));$/;"	p	signature:(node_t *)
latch_get_control	sis_header/latch.h	69;"	d
latch_get_current_value	sis_header/latch.h	52;"	d
latch_get_gate	sis_header/latch.h	64;"	d
latch_get_initial_value	sis_header/latch.h	46;"	d
latch_get_input	sis_header/latch.h	34;"	d
latch_get_output	sis_header/latch.h	40;"	d
latch_get_type	sis_header/latch.h	58;"	d
latch_input	sis_header/latch.h	/^    node_t *latch_input;	\/* must be a PRIMARY_OUTPUT *\/$/;"	m	struct:latch_struct	access:public
latch_output	sis_header/latch.h	/^    node_t *latch_output;	\/* must be a PRIMARY_INPUT *\/$/;"	m	struct:latch_struct	access:public
latch_pin	sis_header/library.h	/^  int latch_pin; 		\/* index for the latch output pin (-1 if none) *\/$/;"	m	struct:lib_gate_struct	access:public
latch_set_control	sis_header/latch.h	/^EXTERN void latch_set_control ARGS((latch_t *, node_t *));$/;"	p	signature:(latch_t *, node_t *)
latch_set_current_value	sis_header/latch.h	49;"	d
latch_set_gate	sis_header/latch.h	61;"	d
latch_set_initial_value	sis_header/latch.h	43;"	d
latch_set_input	sis_header/latch.h	31;"	d
latch_set_output	sis_header/latch.h	37;"	d
latch_set_type	sis_header/latch.h	55;"	d
latch_struct	sis_header/latch.h	/^struct latch_struct {$/;"	s
latch_struct::control	sis_header/latch.h	/^    node_t *control;		\/* Pointer to the controlling gate *\/$/;"	m	struct:latch_struct	access:public
latch_struct::current_value	sis_header/latch.h	/^    int current_value;		\/* current state *\/$/;"	m	struct:latch_struct	access:public
latch_struct::gate	sis_header/latch.h	/^    struct lib_gate_struct *gate;		\/* Reference to the library implementation *\/$/;"	m	struct:latch_struct	typeref:struct:latch_struct::lib_gate_struct	access:public
latch_struct::initial_value	sis_header/latch.h	/^    int initial_value;		\/* initial or reset state *\/$/;"	m	struct:latch_struct	access:public
latch_struct::latch_input	sis_header/latch.h	/^    node_t *latch_input;	\/* must be a PRIMARY_OUTPUT *\/$/;"	m	struct:latch_struct	access:public
latch_struct::latch_output	sis_header/latch.h	/^    node_t *latch_output;	\/* must be a PRIMARY_INPUT *\/$/;"	m	struct:latch_struct	access:public
latch_struct::synch_type	sis_header/latch.h	/^    latch_synch_t synch_type;	\/* type of latch *\/$/;"	m	struct:latch_struct	access:public
latch_struct::undef1	sis_header/latch.h	/^    char *undef1;		\/* undefined 1, for the programer's use *\/$/;"	m	struct:latch_struct	access:public
latch_synch_enum	sis_header/latch.h	/^enum latch_synch_enum {$/;"	g
latch_synch_t	sis_header/latch.h	/^typedef enum latch_synch_enum latch_synch_t;$/;"	t	typeref:enum:latch_synch_enum
latch_t	sis_header/latch.h	/^typedef struct latch_struct latch_t;$/;"	t	typeref:struct:latch_struct
latch_table	sis_header/network.h	/^    st_table *latch_table;      \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
latch_time_info	sis_header/library.h	/^  latch_time_t **latch_time_info; \/* setup\/hold times *\/$/;"	m	struct:lib_gate_struct	access:public
latch_time_struct	sis_header/library.h	/^struct latch_time_struct {$/;"	s
latch_time_struct::hold	sis_header/library.h	/^  double hold;$/;"	m	struct:latch_time_struct	access:public
latch_time_struct::setup	sis_header/library.h	/^  double setup;$/;"	m	struct:latch_time_struct	access:public
latch_time_t	sis_header/library.h	/^typedef struct latch_time_struct latch_time_t;$/;"	t	typeref:struct:latch_time_struct
latch_to_pi_ordering	sis_header/atpg.h	/^    array_t *latch_to_pi_ordering;	\/* used in short_tests *\/$/;"	m	struct:__anon37	access:public
latch_to_product_pi_ordering	sis_header/atpg.h	/^    array_t *latch_to_product_pi_ordering;	\/* used in short_tests *\/$/;"	m	struct:__anon37	access:public
latches	sis_header/retime.h	/^    struct latch_struct **latches;		\/* Initial correspondence wrt latches *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::latch_struct	access:public
left	sis_header/avl.h	/^    avl_node *left, *right;$/;"	m	struct:avl_node_struct	access:public
length	sis_header/sparse.h	/^    int length;			\/* number of elements in this column *\/$/;"	m	struct:sm_col_struct	access:public
length	sis_header/sparse.h	/^    int length;			\/* number of elements in this row *\/$/;"	m	struct:sm_row_struct	access:public
lengthen_word_vectors	sis_header/atpg.h	/^extern void lengthen_word_vectors();$/;"	p	signature:()
level	sis_header/extract.h	/^    UNSIGNED level;         \/* indicates the level of 2-cube kernels *\/$/;"	m	struct:double_cube_divisor_struct	access:public
lex_order	sis_header/espresso.h	/^\/* setc.c *\/	EXTERN int lex_order ARGS((pset *, pset *));$/;"	p	signature:(pset *, pset *)
lex_sort	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover lex_sort ARGS((pcover));$/;"	p	signature:(pcover)
lhs_dic	sis_header/enc.h	20;"	d
lib_choose_smallest_latch	sis_header/library.h	/^EXTERN lib_gate_t *lib_choose_smallest_latch ARGS((library_t *, char *, enum latch_synch_enum));$/;"	p	signature:(library_t *, char *, enum latch_synch_enum)
lib_class_dual	sis_header/library.h	/^EXTERN lib_class_t *lib_class_dual ARGS((lib_class_t *));$/;"	p	signature:(lib_class_t *)
lib_class_name	sis_header/library.h	/^EXTERN char *lib_class_name ARGS((lib_class_t *));$/;"	p	signature:(lib_class_t *)
lib_class_network	sis_header/library.h	/^EXTERN network_t *lib_class_network ARGS((lib_class_t *));$/;"	p	signature:(lib_class_t *)
lib_class_struct	sis_header/library.h	/^struct lib_class_struct {$/;"	s
lib_class_struct::dual_class	sis_header/library.h	/^    lib_class_t *dual_class;	\/* pointer to class for complement of fct *\/$/;"	m	struct:lib_class_struct	access:public
lib_class_struct::gates	sis_header/library.h	/^    lsList gates;		\/* list of gates in this class *\/$/;"	m	struct:lib_class_struct	access:public
lib_class_struct::library	sis_header/library.h	/^    library_t *library;		\/* pointer back to library *\/$/;"	m	struct:lib_class_struct	access:public
lib_class_struct::name	sis_header/library.h	/^    char *name;			\/* reserved for future use *\/$/;"	m	struct:lib_class_struct	access:public
lib_class_struct::network	sis_header/library.h	/^    network_t *network;		\/* the logic function for the class *\/$/;"	m	struct:lib_class_struct	access:public
lib_class_t	sis_header/library.h	/^typedef struct lib_class_struct lib_class_t;$/;"	t	typeref:struct:lib_class_struct
lib_gate_area	sis_header/library.h	/^EXTERN double lib_gate_area ARGS((lib_gate_t *));$/;"	p	signature:(lib_gate_t *)
lib_gate_class	sis_header/library.h	/^EXTERN lib_class_t *lib_gate_class ARGS((lib_gate_t *));$/;"	p	signature:(lib_gate_t *)
lib_gate_clock_delay	sis_header/library.h	85;"	d
lib_gate_latch_pin	sis_header/library.h	83;"	d
lib_gate_latch_time	sis_header/library.h	84;"	d
lib_gate_name	sis_header/library.h	/^EXTERN char *lib_gate_name ARGS((lib_gate_t *));$/;"	p	signature:(lib_gate_t *)
lib_gate_num_in	sis_header/library.h	/^EXTERN int lib_gate_num_in ARGS((lib_gate_t *));$/;"	p	signature:(lib_gate_t *)
lib_gate_num_out	sis_header/library.h	/^EXTERN int lib_gate_num_out ARGS((lib_gate_t *));$/;"	p	signature:(lib_gate_t *)
lib_gate_of	sis_header/library.h	/^EXTERN lib_gate_t *lib_gate_of ARGS((node_t *));$/;"	p	signature:(node_t *)
lib_gate_pin_name	sis_header/library.h	/^EXTERN char *lib_gate_pin_name ARGS((lib_gate_t *, int, int));$/;"	p	signature:(lib_gate_t *, int, int)
lib_gate_struct	sis_header/library.h	/^struct lib_gate_struct {$/;"	s
lib_gate_struct::area	sis_header/library.h	/^  double area; 			\/* the gate area *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::class_p	sis_header/library.h	/^  lib_class_t *class_p; 	\/* pointer back to the class *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::clock_delay	sis_header/library.h	/^  delay_pin_t *clock_delay; 	\/* delay from clock to output *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::control_name	sis_header/library.h	/^  char *control_name; 		\/* name of the clock pin *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::delay_info	sis_header/library.h	/^  char **delay_info; 		\/* the input pin delays *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::latch_pin	sis_header/library.h	/^  int latch_pin; 		\/* index for the latch output pin (-1 if none) *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::latch_time_info	sis_header/library.h	/^  latch_time_t **latch_time_info; \/* setup\/hold times *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::name	sis_header/library.h	/^  char *name; 			\/* the gate name *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::network	sis_header/library.h	/^  network_t *network; 		\/* exactly equal to gate->class->network *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::symmetric	sis_header/library.h	/^  int symmetric; 		\/* it is more or less symmetric WRT input pins *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_struct::type	sis_header/library.h	/^  int type; 			\/* type of gate -- lib_gate_type returns latch_synch_t *\/$/;"	m	struct:lib_gate_struct	access:public
lib_gate_t	sis_header/library.h	/^typedef struct lib_gate_struct lib_gate_t;$/;"	t	typeref:struct:lib_gate_struct
lib_gate_type	sis_header/library.h	82;"	d
lib_gen_classes	sis_header/library.h	/^EXTERN lsGen lib_gen_classes ARGS((library_t *));$/;"	p	signature:(library_t *)
lib_gen_gates	sis_header/library.h	/^EXTERN lsGen lib_gen_gates ARGS((lib_class_t *));$/;"	p	signature:(lib_class_t *)
lib_get_class	sis_header/library.h	/^EXTERN lib_class_t *lib_get_class ARGS((network_t *, library_t *));$/;"	p	signature:(network_t *, library_t *)
lib_get_class_by_type	sis_header/library.h	/^EXTERN lib_class_t *lib_get_class_by_type ARGS((network_t *, library_t *));$/;"	p	signature:(network_t *, library_t *)
lib_get_class_by_type	sis_header/library.h	/^EXTERN lib_class_t *lib_get_class_by_type ARGS((network_t *, library_t *, latch_synch_t));$/;"	p	signature:(network_t *, library_t *, latch_synch_t)
lib_get_gate	sis_header/library.h	/^EXTERN lib_gate_t *lib_get_gate ARGS((library_t *, char *));$/;"	p	signature:(library_t *, char *)
lib_get_gate_area	sis_header/library.h	/^EXTERN double lib_get_gate_area ARGS((node_t *));$/;"	p	signature:(node_t *)
lib_get_gate_name	sis_header/library.h	/^EXTERN char *lib_get_gate_name ARGS((node_t *));$/;"	p	signature:(node_t *)
lib_get_library	sis_header/library.h	/^EXTERN library_t *lib_get_library ARGS((void));$/;"	p	signature:(void)
lib_get_out_pin_name	sis_header/library.h	/^EXTERN char *lib_get_out_pin_name ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
lib_get_pin_delay	sis_header/library.h	/^EXTERN char *lib_get_pin_delay ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
lib_get_pin_name	sis_header/library.h	/^EXTERN char *lib_get_pin_name ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
lib_network_is_mapped	sis_header/library.h	/^EXTERN int lib_network_is_mapped ARGS((network_t *));$/;"	p	signature:(network_t *)
lib_set_gate	sis_header/library.h	/^EXTERN int lib_set_gate ARGS((node_t *, lib_gate_t *, char **, node_t **, int));$/;"	p	signature:(node_t *, lib_gate_t *, char **, node_t **, int)
library	sis_header/library.h	/^    library_t *library;		\/* pointer back to library *\/$/;"	m	struct:lib_class_struct	access:public
library_struct	sis_header/library.h	/^struct library_struct {$/;"	s
library_struct::add_inverter	sis_header/library.h	/^    int add_inverter;$/;"	m	struct:library_struct	access:public
library_struct::classes	sis_header/library.h	/^    lsList classes;		\/* list of lib_class_t class descriptions *\/$/;"	m	struct:library_struct	access:public
library_struct::gates	sis_header/library.h	/^    lsList gates;		\/* list of lib_gate_t gate descriptions *\/$/;"	m	struct:library_struct	access:public
library_struct::nand_flag	sis_header/library.h	/^    int nand_flag;$/;"	m	struct:library_struct	access:public
library_struct::patterns	sis_header/library.h	/^    lsList patterns;		\/* list of prim_t patterns *\/$/;"	m	struct:library_struct	access:public
library_t	sis_header/library.h	/^typedef struct library_struct library_t;$/;"	t	typeref:struct:library_struct
limit	sis_header/bdd.h	/^      unsigned int limit;             \/* upper bound on memory allocated by the manager; in megabytes *\/$/;"	m	struct:bdd_mgr_init::__anon18	access:public
link	ignetwork.h	/^	Array<IGNode *> link; \/\/ point to the conflicting nodes for SIGNAL nodes, nodes in the same clause for AND nodes$/;"	m	class:IGNodeProperty	access:public
linkedNode	bnetwork.h	/^	BNode *linkedNode;$/;"	m	class:BNodeProperty	access:public
list	sis_header/luniq.h	/^TYPE *list;				\/* linked-list of objects *\/$/;"	v
list_in	sis_header/lsort.h	/^TYPE *list_in;$/;"	v
lit_index	sis_header/sat.h	/^    int lit_index;$/;"	m	struct:__anon5	access:public
load	sis_header/delay.h	/^    double load;$/;"	m	struct:delay_pin_struct	access:public
load	sis_header/speed.h	/^    double load;	       \/* The input_cap of the destination *\/$/;"	m	struct:sp_fanout_struct	access:public
low	sis_header/mtr.h	/^    MtrHalfWord low;$/;"	m	struct:MtrNode	access:public
lower_range	sis_header/clock.h	/^    double lower_range;		\/* Absolute deviation on lower side *\/$/;"	m	struct:clock_val	access:public
lp_index	sis_header/retime.h	/^    int lp_index;		\/* Index of variable in lp formulation *\/$/;"	m	struct:re_node	access:public
lsCopy	sis_header/list.h	/^EXTERN lsList lsCopy ARGS((lsList, LS_PFLSG));$/;"	p	signature:(lsList, LS_PFLSG)
lsCreate	sis_header/list.h	/^EXTERN lsList lsCreate ARGS((void));$/;"	p	signature:(void)
lsDelAfter	sis_header/list.h	/^EXTERN lsStatus lsDelAfter ARGS((lsGen, lsGeneric *));$/;"	p	signature:(lsGen, lsGeneric *)
lsDelBefore	sis_header/list.h	/^EXTERN lsStatus lsDelBefore ARGS((lsGen, lsGeneric *));$/;"	p	signature:(lsGen, lsGeneric *)
lsDelBegin	sis_header/list.h	/^EXTERN lsStatus lsDelBegin ARGS((lsList, lsGeneric *));$/;"	p	signature:(lsList, lsGeneric *)
lsDelEnd	sis_header/list.h	/^EXTERN lsStatus lsDelEnd ARGS((lsList, lsGeneric *));$/;"	p	signature:(lsList, lsGeneric *)
lsDestroy	sis_header/list.h	/^EXTERN lsStatus lsDestroy ARGS((lsList, void (*)()));$/;"	p	signature:(lsList, void (*)())
lsEnd	sis_header/list.h	/^EXTERN lsGen lsEnd ARGS((lsList));$/;"	p	signature:(lsList)
lsFetchHandle	sis_header/list.h	/^EXTERN lsGeneric lsFetchHandle ARGS((lsHandle));$/;"	p	signature:(lsHandle)
lsFinish	sis_header/list.h	/^EXTERN lsStatus lsFinish ARGS((lsGen));$/;"	p	signature:(lsGen)
lsFirstItem	sis_header/list.h	/^EXTERN lsStatus lsFirstItem ARGS((lsList, lsGeneric *, lsHandle *));$/;"	p	signature:(lsList, lsGeneric *, lsHandle *)
lsForEachItem	sis_header/list.h	121;"	d
lsForeachItem	sis_header/network.h	14;"	d
lsGen	sis_header/list.h	/^typedef ls_dummy *lsGen;	\/* List generator handle *\/$/;"	t
lsGenHandle	sis_header/list.h	/^EXTERN lsGen lsGenHandle ARGS((lsHandle, lsGeneric *, int));$/;"	p	signature:(lsHandle, lsGeneric *, int)
lsGeneric	sis_header/list.h	/^typedef char *lsGeneric;	\/* Generic pointer       *\/$/;"	t
lsHandle	sis_header/list.h	/^typedef ls_dummy *lsHandle;	\/* Handle to an item     *\/$/;"	t
lsInAfter	sis_header/list.h	/^EXTERN lsStatus lsInAfter ARGS((lsGen, lsGeneric, lsHandle *));$/;"	p	signature:(lsGen, lsGeneric, lsHandle *)
lsInBefore	sis_header/list.h	/^EXTERN lsStatus lsInBefore ARGS((lsGen, lsGeneric, lsHandle *));$/;"	p	signature:(lsGen, lsGeneric, lsHandle *)
lsLastItem	sis_header/list.h	/^EXTERN lsStatus lsLastItem ARGS((lsList, lsGeneric *, lsHandle *));$/;"	p	signature:(lsList, lsGeneric *, lsHandle *)
lsLength	sis_header/list.h	/^EXTERN int lsLength ARGS((lsList));$/;"	p	signature:(lsList)
lsList	sis_header/list.h	/^typedef ls_dummy *lsList;	\/* List handle           *\/$/;"	t
lsNewBegin	sis_header/list.h	/^EXTERN lsStatus lsNewBegin ARGS((lsList, lsGeneric, lsHandle *));$/;"	p	signature:(lsList, lsGeneric, lsHandle *)
lsNewEnd	sis_header/list.h	/^EXTERN lsStatus lsNewEnd ARGS((lsList, lsGeneric, lsHandle *));$/;"	p	signature:(lsList, lsGeneric, lsHandle *)
lsNext	sis_header/list.h	/^EXTERN lsStatus lsNext ARGS((lsGen, lsGeneric *, lsHandle *));$/;"	p	signature:(lsGen, lsGeneric *, lsHandle *)
lsPrev	sis_header/list.h	/^EXTERN lsStatus lsPrev ARGS((lsGen, lsGeneric *, lsHandle *));$/;"	p	signature:(lsGen, lsGeneric *, lsHandle *)
lsQueryHandle	sis_header/list.h	/^EXTERN lsList lsQueryHandle ARGS((lsHandle));$/;"	p	signature:(lsHandle)
lsRemoveItem	sis_header/list.h	/^EXTERN lsStatus lsRemoveItem ARGS((lsHandle, lsGeneric *));$/;"	p	signature:(lsHandle, lsGeneric *)
lsSort	sis_header/list.h	/^EXTERN lsStatus lsSort ARGS((lsList, int (*)()));$/;"	p	signature:(lsList, int (*)())
lsStart	sis_header/list.h	/^EXTERN lsGen lsStart ARGS((lsList));$/;"	p	signature:(lsList)
lsStatus	sis_header/list.h	/^typedef int lsStatus;		\/* Return codes          *\/$/;"	t
lsUniq	sis_header/list.h	/^EXTERN lsStatus lsUniq ARGS((lsList, int (*)(), void (*)() ));$/;"	p	signature:(lsList, int (*)(), void (*)() )
ls_dummy	sis_header/list.h	/^} ls_dummy;$/;"	t	typeref:struct:ls_dummy_defn
ls_dummy_defn	sis_header/list.h	/^typedef struct ls_dummy_defn {$/;"	s
ls_dummy_defn::dummy	sis_header/list.h	/^    int dummy;			\/* Not used *\/$/;"	m	struct:ls_dummy_defn	access:public
lseek	util/saveimage.c	/^extern long lseek();	\/* For lint *\/$/;"	p	file:
main	array/arr_main.c	/^main(argc, argv)$/;"	f
main	main.cpp	/^int main(int argc, char **argv){$/;"	f	signature:(int argc, char **argv)
main	main.fileio.cpp	/^int main(int argc, char **argv){$/;"	f	signature:(int argc, char **argv)
main	main.lib_test.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	main.stdio.cpp	/^int main(int argc, char **argv){$/;"	f	signature:(int argc, char **argv)
main	util/test-restart.c	/^main(argc, argv, environ)$/;"	f
main_node	sis_header/seqbdd.h	/^  node_t *main_node;			\/* main consistency output node: AND of the two net_nodes *\/$/;"	m	struct:__anon9	access:public
main_nodes	sis_header/seqbdd.h	/^  node_t *main_nodes[2];		\/* net nodes: consistency output for each net (for verification only) *\/$/;"	m	struct:__anon9	access:public
make_disjoint	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover make_disjoint ARGS((pcover));$/;"	p	signature:(pcover)
make_sparse	sis_header/espresso.h	/^\/* sparse.c *\/	EXTERN pcover make_sparse ARGS((pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover)
makeup_labels	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN int makeup_labels ARGS((pPLA));$/;"	p	signature:(pPLA)
malloc	sis_header/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
malloc	sis_header/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
malloc	util/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
malloc	util/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
manager	sis_header/bdd.h	/^        unsigned int manager;$/;"	m	struct:bdd_stats::__anon28	access:public
manager	sis_header/seqbdd.h	/^  bdd_manager *manager;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
map	sis_header/node.h	/^    char *map;			\/* reserved for mapping package *\/$/;"	m	struct:node_struct	access:public
map_add_inverter	sis_header/map.h	/^EXTERN void map_add_inverter ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
map_cover_to_unate	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pcover map_cover_to_unate ARGS((pcube *));$/;"	p	signature:(pcube *)
map_dcset	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int map_dcset ARGS((pPLA));$/;"	p	signature:(pPLA)
map_network	sis_header/map.h	/^EXTERN network_t *map_network ARGS((network_t *, library_t *, double, int, int));$/;"	p	signature:(network_t *, library_t *, double, int, int)
map_network_dup	sis_header/map.h	/^EXTERN void map_network_dup ARGS((network_t *));$/;"	p	signature:(network_t *)
map_output_symbolic	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int map_output_symbolic ARGS((pPLA));$/;"	p	signature:(pPLA)
map_remove_inverter	sis_header/map.h	/^EXTERN void map_remove_inverter ARGS((network_t *, void (*)()));$/;"	p	signature:(network_t *, void (*)())
map_symbolic	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int map_symbolic ARGS((pPLA));$/;"	p	signature:(pPLA)
map_symbolic_cover	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN pcover map_symbolic_cover ARGS((pcover,$/;"	p	signature:(pcover, symbolic_list_t *, int)
map_unate_to_cover	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pcover map_unate_to_cover ARGS((pset_family));$/;"	p	signature:(pset_family)
mark	ignetwork.h	/^	int mark;$/;"	m	class:IGNodeProperty	access:public
markFaultyNodes	rewire.cpp	/^static inline void markFaultyNodes(BNode *src) {$/;"	f	file:	signature:(BNode *src)
mark_irredundant	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN void mark_irredundant ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
massive_count	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN void massive_count ARGS((pcube *));$/;"	p	signature:(pcube *)
matrix	sis_header/sat.h	/^    sm_matrix *matrix;$/;"	m	struct:__anon5	access:public
max_density	sis_header/st.h	/^    int max_density;$/;"	m	struct:st_table	access:public
max_ip_load	sis_header/speed.h	/^    double max_ip_load;	       \/* The max load at "cfi" input of root *\/$/;"	m	struct:buffer_alg_input_struct	access:public
max_load	sis_header/delay.h	/^    double max_load;$/;"	m	struct:delay_pin_struct	access:public
max_nout	sis_header/maxflow.h	/^    short max_nout;       \/* total no. of available out_edge *\/$/;"	m	struct:MF_NODE	access:public
max_num_of_nptr	sis_header/maxflow.h	/^    int max_num_of_nptr;        \/* total no. of available node pointers *\/$/;"	m	struct:MF_GRAPH	access:public
max_size	sis_header/bdd.h	/^        unsigned int max_size;        \/* max allowable number of buckets; for adhoc, max allowable number of entries *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
maxflow	sis_header/maxflow.h	/^EXTERN void maxflow ARGS((mf_graph_t *, int));$/;"	p	signature:(mf_graph_t *, int)
mdd	sis_header/bdd.h	/^    char *mdd;$/;"	m	struct:bdd_external_hooks	access:public
memccpy	sis_header/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memccpy	util/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memchr	sis_header/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memchr	util/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memcmp	sis_header/util.h	/^extern int memcmp(), strcmp();$/;"	p	signature:()
memcmp	util/util.h	/^extern int memcmp(), strcmp();$/;"	p	signature:()
memcpy	sis_header/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memcpy	util/stub.c	/^memcpy(s1, s2, n)$/;"	f
memcpy	util/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memmove	sis_header/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memmove	util/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memory	sis_header/bdd.h	/^    } memory;           \/* memory usage *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon28	access:public
memory	sis_header/bdd.h	/^    } memory;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon18	access:public
memset	sis_header/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
memset	util/stub.c	/^memset(s, c, n)$/;"	f
memset	util/util.h	/^extern char *memmove(), *memccpy(), *memchr(), *memcpy(), *memset();$/;"	p	signature:()
merge_node	sis_header/pld.h	/^extern void merge_node();            \/* xln_merge.c *\/$/;"	p	signature:()
mf_alloc_graph	sis_header/maxflow.h	/^EXTERN mf_graph_t  *mf_alloc_graph ARGS((void));$/;"	p	signature:(void)
mf_build_node_cutset	sis_header/maxflow.h	/^EXTERN array_t *mf_build_node_cutset ARGS((mf_graph_t *, st_table *));$/;"	p	signature:(mf_graph_t *, st_table *)
mf_create_flow_network	sis_header/maxflow.h	/^EXTERN mf_graph_t  *mf_create_flow_network ARGS((network_t *, st_table *, int, st_table **));$/;"	p	signature:(network_t *, st_table *, int, st_table **)
mf_cutset_t	sis_header/maxflow.h	/^typedef struct MF_CUTSET mf_cutset_t;$/;"	t	typeref:struct:MF_CUTSET
mf_display_cutset	sis_header/maxflow.h	/^EXTERN void mf_display_cutset ARGS((FILE *, mf_graph_t *));$/;"	p	signature:(FILE *, mf_graph_t *)
mf_display_flow	sis_header/maxflow.h	/^EXTERN void mf_display_flow ARGS((FILE *, mf_graph_t *));$/;"	p	signature:(FILE *, mf_graph_t *)
mf_display_graph	sis_header/maxflow.h	/^EXTERN void mf_display_graph ARGS((FILE *, mf_graph_t *));$/;"	p	signature:(FILE *, mf_graph_t *)
mf_edge_t	sis_header/maxflow.h	/^typedef struct MF_EDGE mf_edge_t;$/;"	t	typeref:struct:MF_EDGE
mf_foreach_fanin	sis_header/maxflow.h	118;"	d
mf_foreach_fanout	sis_header/maxflow.h	113;"	d
mf_foreach_node	sis_header/maxflow.h	108;"	d
mf_free_cutset	sis_header/maxflow.h	/^EXTERN void mf_free_cutset ARGS((mf_cutset_t *));$/;"	p	signature:(mf_cutset_t *)
mf_free_graph	sis_header/maxflow.h	/^EXTERN void mf_free_graph ARGS((mf_graph_t *));$/;"	p	signature:(mf_graph_t *)
mf_get_cutset	sis_header/maxflow.h	/^EXTERN mf_cutset_t *mf_get_cutset ARGS((mf_graph_t *, array_t **, array_t **, array_t **));$/;"	p	signature:(mf_graph_t *, array_t **, array_t **, array_t **)
mf_get_edge_capacity	sis_header/maxflow.h	148;"	d
mf_get_edge_flow	sis_header/maxflow.h	145;"	d
mf_get_node	sis_header/maxflow.h	/^EXTERN mf_node_t *mf_get_node ARGS((mf_graph_t *, char *));$/;"	p	signature:(mf_graph_t *, char *)
mf_get_sink_node	sis_header/maxflow.h	139;"	d
mf_get_source_node	sis_header/maxflow.h	142;"	d
mf_graph_t	sis_header/maxflow.h	/^typedef struct MF_GRAPH mf_graph_t;$/;"	t	typeref:struct:MF_GRAPH
mf_head_of_edge	sis_header/maxflow.h	157;"	d
mf_is_edge_on_mincut	sis_header/maxflow.h	160;"	d
mf_modify_edge_capacity	sis_header/maxflow.h	151;"	d
mf_node_name	sis_header/maxflow.h	127;"	d
mf_node_t	sis_header/maxflow.h	/^typedef struct MF_NODE mf_node_t;$/;"	t	typeref:struct:MF_NODE
mf_num_fanin	sis_header/maxflow.h	133;"	d
mf_num_fanout	sis_header/maxflow.h	136;"	d
mf_num_nodes	sis_header/maxflow.h	130;"	d
mf_read_edge	sis_header/maxflow.h	/^EXTERN void mf_read_edge ARGS((mf_graph_t *, char *, char *, int));$/;"	p	signature:(mf_graph_t *, char *, char *, int)
mf_read_node	sis_header/maxflow.h	/^EXTERN void mf_read_node ARGS((mf_graph_t *, char *, int));$/;"	p	signature:(mf_graph_t *, char *, int)
mf_remove_node	sis_header/maxflow.h	/^EXTERN int mf_remove_node ARGS((mf_graph_t *, char *));$/;"	p	signature:(mf_graph_t *, char *)
mf_reread_edge	sis_header/maxflow.h	/^EXTERN int mf_reread_edge ARGS((mf_graph_t *, char *, char *, int));$/;"	p	signature:(mf_graph_t *, char *, char *, int)
mf_sizeof_cutset	sis_header/maxflow.h	/^EXTERN int mf_sizeof_cutset ARGS((mf_graph_t *));$/;"	p	signature:(mf_graph_t *)
mf_tail_of_edge	sis_header/maxflow.h	154;"	d
mfcptr	sis_header/maxflow.h	/^typedef struct MF_CUTSET *mfcptr;$/;"	t	typeref:struct:MF_CUTSET
mfeptr	sis_header/maxflow.h	/^typedef struct MF_EDGE *mfeptr;$/;"	t	typeref:struct:MF_EDGE
mfgptr	sis_header/maxflow.h	/^typedef struct MF_GRAPH *mfgptr;$/;"	t	typeref:struct:MF_GRAPH
mfnptr	sis_header/maxflow.h	/^typedef struct MF_NODE *mfnptr;$/;"	t	typeref:struct:MF_NODE
mgr	sis_header/bdd.h	/^    bdd_manager *mgr;                           \/* the manager *\/$/;"	m	struct:bdd_t	access:public
mincov	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void mincov ARGS((pcover, pcube, pcube));$/;"	p	signature:(pcover, pcube, pcube)
mini_sort	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover mini_sort ARGS((pcover, ESP_PFI));$/;"	p	signature:(pcover, ESP_PFI)
minimize	sis_header/minimize.h	/^EXTERN pcover minimize ARGS((pcover, pcover, int));$/;"	p	signature:(pcover, pcover, int)
minimize_exact	sis_header/espresso.h	/^\/* exact.c *\/	EXTERN pcover minimize_exact ARGS((pcover, pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover, int)
minimize_exact_literals	sis_header/espresso.h	/^\/* exact.c *\/	EXTERN pcover minimize_exact_literals ARGS((pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover, int)
minimize_pair	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int minimize_pair ARGS((ppair));$/;"	p	signature:(ppair)
minterms	sis_header/espresso.h	/^\/* map.c *\/	EXTERN pset minterms ARGS((pcover));$/;"	p	signature:(pcover)
miserr	sis_header/sis.h	82;"	d
misout	sis_header/sis.h	81;"	d
misses	sis_header/bdd.h	/^    unsigned int misses;$/;"	m	struct:bdd_cache_stats	access:public
modified	sis_header/avl.h	/^    int modified;$/;"	m	struct:avl_tree_struct	access:public
most_frequent	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN int most_frequent ARGS((pcover, pcube));$/;"	p	signature:(pcover, pcube)
mv	sis_header/espresso.h	/^    int mv;			\/* transistor count, multiple-valued vars *\/$/;"	m	struct:cost_struct	access:public
mv_mask	sis_header/espresso.h	/^    pset mv_mask;               \/* mask to get mv parts *\/$/;"	m	struct:cube_struct	access:public
mv_reduce	sis_header/espresso.h	/^\/* sparse.c *\/	EXTERN pcover mv_reduce ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
n_RTG_tested	sis_header/atpg.h	/^    int n_RTG_tested;$/;"	m	struct:__anon34	access:public
n_covers	sis_header/atpg.h	/^    int n_covers;$/;"	m	struct:__anon31	access:public
n_cubes	sis_header/atpg.h	/^    int             n_cubes;$/;"	m	struct:atpg_sim_node_struct	access:public
n_det_propagations	sis_header/atpg.h	/^    int n_det_propagations;$/;"	m	struct:__anon34	access:public
n_elts	sis_header/var_set.h	/^  int n_elts;$/;"	m	struct:var_set_struct	access:public
n_ff_propagated	sis_header/atpg.h	/^    int n_ff_propagated;$/;"	m	struct:__anon34	access:public
n_impl	sis_header/sat.h	/^    int n_impl;$/;"	m	struct:__anon5	access:public
n_inputs	sis_header/atpg.h	/^    int             n_inputs;$/;"	m	struct:atpg_sim_node_struct	access:public
n_iter	sis_header/seqbdd.h	/^  int n_iter;			 \/* used for range_computation *\/$/;"	m	struct:verif_options_t	access:public
n_just_reused	sis_header/atpg.h	/^    int n_just_reused;$/;"	m	struct:__anon34	access:public
n_latch	sis_header/atpg.h	/^    int n_latch;$/;"	m	struct:__anon35	access:public
n_latch	sis_header/atpg.h	/^    int n_latch;$/;"	m	struct:__anon36	access:public
n_nodes	sis_header/atpg.h	/^    int n_nodes;$/;"	m	struct:__anon36	access:public
n_not_ff_propagated	sis_header/atpg.h	/^    int n_not_ff_propagated;$/;"	m	struct:__anon34	access:public
n_partitions	sis_header/seqbdd.h	/^  int n_partitions;$/;"	m	struct:verif_options_t	access:public
n_pi	sis_header/atpg.h	/^    int n_pi;$/;"	m	struct:__anon35	access:public
n_pi	sis_header/atpg.h	/^    int n_pi;$/;"	m	struct:__anon36	access:public
n_po	sis_header/atpg.h	/^    int n_po;$/;"	m	struct:__anon35	access:public
n_po	sis_header/atpg.h	/^    int n_po;$/;"	m	struct:__anon36	access:public
n_prop_reused	sis_header/atpg.h	/^    int n_prop_reused;$/;"	m	struct:__anon34	access:public
n_random_prop_iter	sis_header/atpg.h	/^    int n_random_prop_iter;$/;"	m	struct:__anon32	access:public
n_random_propagated	sis_header/atpg.h	/^    int n_random_propagated;$/;"	m	struct:__anon34	access:public
n_random_propagations	sis_header/atpg.h	/^    int n_random_propagations;$/;"	m	struct:__anon34	access:public
n_real_pi	sis_header/atpg.h	/^    int n_real_pi;$/;"	m	struct:__anon35	access:public
n_real_pi	sis_header/atpg.h	/^    int n_real_pi;$/;"	m	struct:__anon36	access:public
n_real_po	sis_header/atpg.h	/^    int n_real_po;$/;"	m	struct:__anon35	access:public
n_real_po	sis_header/atpg.h	/^    int n_real_po;$/;"	m	struct:__anon36	access:public
n_sequences	sis_header/atpg.h	/^    int n_sequences;$/;"	m	struct:__anon34	access:public
n_sets	sis_header/seqbdd.h	/^  int n_sets;$/;"	m	struct:__anon11	access:public
n_sim_sequences	sis_header/atpg.h	/^    int n_sim_sequences;$/;"	m	struct:__anon32	access:public
n_size	array/array.h	/^    int	 n_size;	\/* size of 'data' array (in objects)	*\/$/;"	m	struct:array_t	access:public
n_size	sis_header/array.h	/^    int	 n_size;	\/* size of 'data' array (in objects)	*\/$/;"	m	struct:array_t	access:public
n_static_pass	sis_header/sat.h	/^    int	n_static_pass;	\/* Number of static GI passes to make *\/$/;"	m	struct:__anon4	access:public
n_untested_by_main_loop	sis_header/atpg.h	/^    int n_untested_by_main_loop;$/;"	m	struct:__anon34	access:public
n_vars	sis_header/seqbdd.h	/^  int n_vars;$/;"	m	struct:__anon11	access:public
n_vectors	sis_header/atpg.h	/^    int n_vectors;$/;"	m	struct:__anon34	access:public
n_verifications	sis_header/atpg.h	/^    int n_verifications;$/;"	m	struct:__anon34	access:public
n_words	sis_header/var_set.h	/^  int n_words;$/;"	m	struct:var_set_struct	access:public
name	node.h	/^	string *name;$/;"	m	class:Node	access:public
name	sis_header/clock.h	/^    char *name;			\/* Name of clock signal *\/$/;"	m	struct:clock_struct	access:public
name	sis_header/library.h	/^    char *name;			\/* reserved for future use *\/$/;"	m	struct:lib_class_struct	access:public
name	sis_header/library.h	/^  char *name; 			\/* the gate name *\/$/;"	m	struct:lib_gate_struct	access:public
name	sis_header/maxflow.h	/^    char *name;           \/* asciz name of node *\/$/;"	m	struct:MF_NODE	access:public
name	sis_header/node.h	/^    char *name;			\/* name of the output signal *\/$/;"	m	struct:node_struct	access:public
name2Node	graph.h	/^	map<string, Node<NP, EP> *> name2Node;$/;"	m	class:Graph	access:public
nameCount	graph.h	/^	static int nameCount;$/;"	m	class:Graph	access:public
nameCount	graph.h	/^int Graph<GP, NP, EP>::nameCount = 0;$/;"	m	class:Graph
name_mode_enum	sis_header/node.h	/^enum name_mode_enum {$/;"	g
name_mode_t	sis_header/node.h	/^typedef enum name_mode_enum name_mode_t;$/;"	t	typeref:enum:name_mode_enum
name_table	sis_header/network.h	/^    st_table *name_table;$/;"	m	struct:network_struct	access:public
name_table	sis_header/seqbdd.h	/^  st_table *name_table;			\/* PIPO name is mapped to 0 or 1 (network 0 or network 1) *\/$/;"	m	struct:__anon9	access:public
nand_flag	sis_header/library.h	/^    int nand_flag;$/;"	m	struct:library_struct	access:public
narcs	sis_header/maxflow.h	/^    int narcs;$/;"	m	struct:MF_CUTSET	access:public
nclause	sis_header/sat.h	/^    int nclause;$/;"	m	struct:__anon5	access:public
ncols	sis_header/sparse.h	/^    int ncols;			\/* number of columns *\/$/;"	m	struct:sm_matrix_struct	access:public
net_handle	sis_header/clock.h	/^    lsHandle net_handle;	\/* Handle inside network clock_defn *\/$/;"	m	struct:clock_struct	access:public
net_handle	sis_header/node.h	/^    lsHandle net_handle;	\/* handle inside of network nodelist *\/$/;"	m	struct:node_struct	access:public
net_name	sis_header/network.h	/^    char *net_name;$/;"	m	struct:network_struct	access:public
net_verify_with_dc	sis_header/network.h	/^EXTERN int net_verify_with_dc ARGS((network_t *, network_t *, int, int));$/;"	p	signature:(network_t *, network_t *, int, int)
network	sis_header/atpg.h	/^    network_t *network;$/;"	m	struct:__anon35	access:public
network	sis_header/atpg.h	/^    network_t *network;$/;"	m	struct:__anon36	access:public
network	sis_header/bdd.h	/^    char *network;$/;"	m	struct:bdd_external_hooks	access:public
network	sis_header/clock.h	/^    network_t *network;		\/* Pointer to the network *\/$/;"	m	struct:clock_struct	access:public
network	sis_header/library.h	/^    network_t *network;		\/* the logic function for the class *\/$/;"	m	struct:lib_class_struct	access:public
network	sis_header/library.h	/^  network_t *network; 		\/* exactly equal to gate->class->network *\/$/;"	m	struct:lib_gate_struct	access:public
network	sis_header/node.h	/^    network_t *network;		\/* network this node belongs to *\/$/;"	m	struct:node_struct	access:public
network_add_fake_primary_output	sis_header/network.h	/^EXTERN node_t *network_add_fake_primary_output ARGS((network_t *,node_t *));$/;"	p	signature:(network_t *,node_t *)
network_add_node	sis_header/network.h	/^EXTERN void network_add_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
network_add_primary_input	sis_header/network.h	/^EXTERN void network_add_primary_input ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
network_add_primary_output	sis_header/network.h	/^EXTERN node_t *network_add_primary_output ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
network_alloc	sis_header/network.h	/^EXTERN network_t *network_alloc ARGS((void));$/;"	p	signature:(void)
network_append	sis_header/network.h	/^EXTERN int network_append ARGS((network_t *, network_t *));$/;"	p	signature:(network_t *, network_t *)
network_ccleanup	sis_header/network.h	/^EXTERN int network_ccleanup ARGS((network_t *));$/;"	p	signature:(network_t *)
network_change_node_name	sis_header/network.h	/^EXTERN void network_change_node_name ARGS((network_t *, node_t *, char *));$/;"	p	signature:(network_t *, node_t *, char *)
network_change_node_type	sis_header/network.h	/^EXTERN void network_change_node_type ARGS((network_t *, node_t *, enum node_type_enum));$/;"	p	signature:(network_t *, node_t *, enum node_type_enum)
network_check	sis_header/network.h	/^EXTERN int network_check ARGS((network_t *));$/;"	p	signature:(network_t *)
network_cleanup	sis_header/network.h	/^EXTERN int network_cleanup ARGS((network_t *));$/;"	p	signature:(network_t *)
network_clock_alloc	sis_header/clock.h	/^EXTERN void network_clock_alloc ARGS((network_t *));$/;"	p	signature:(network_t *)
network_clock_dup	sis_header/clock.h	/^EXTERN void network_clock_dup ARGS((network_t *, network_t *));$/;"	p	signature:(network_t *, network_t *)
network_clock_free	sis_header/clock.h	/^EXTERN void network_clock_free ARGS((network_t *));$/;"	p	signature:(network_t *)
network_clock_struct	sis_header/clock.h	/^struct network_clock_struct {$/;"	s
network_clock_struct::clock_defn	sis_header/clock.h	/^    lsList clock_defn;       \/* Linked list of "sis_clock_t" structures *\/$/;"	m	struct:network_clock_struct	access:public
network_clock_struct::cycle_time	sis_header/clock.h	/^    double cycle_time[2];    \/* Stores the cycle time *\/$/;"	m	struct:network_clock_struct	access:public
network_clock_struct::flag	sis_header/clock.h	/^    clock_setting_t flag;    \/* SPECIFICATION or WORKING *\/$/;"	m	struct:network_clock_struct	access:public
network_clock_t	sis_header/clock.h	/^typedef struct network_clock_struct network_clock_t; $/;"	t	typeref:struct:network_clock_struct
network_collapse	sis_header/network.h	/^EXTERN int network_collapse ARGS((network_t *));$/;"	p	signature:(network_t *)
network_connect	sis_header/network.h	/^EXTERN void network_connect ARGS((node_t *,node_t *));$/;"	p	signature:(node_t *,node_t *)
network_copy	sis_header/atpg.h	/^    network_t *network_copy;$/;"	m	struct:__anon37	access:public
network_copy_subnetwork	sis_header/seqbdd.h	/^extern node_t *network_copy_subnetwork();$/;"	p	signature:()
network_create_from_node	sis_header/network.h	/^EXTERN network_t *network_create_from_node ARGS((node_t *));$/;"	p	signature:(node_t *)
network_create_latch	sis_header/latch.h	/^EXTERN void network_create_latch ARGS((network_t *, latch_t **,node_t *,node_t *));$/;"	p	signature:(network_t *, latch_t **,node_t *,node_t *)
network_csweep	sis_header/network.h	/^EXTERN int network_csweep ARGS((network_t *));$/;"	p	signature:(network_t *)
network_dc_network	sis_header/network.h	/^EXTERN network_t *network_dc_network ARGS((network_t *));$/;"	p	signature:(network_t *)
network_delete_latch	sis_header/latch.h	/^EXTERN void network_delete_latch ARGS((network_t *,latch_t *));$/;"	p	signature:(network_t *,latch_t *)
network_delete_latch_gen	sis_header/latch.h	/^EXTERN void network_delete_latch_gen ARGS((network_t *,lsGen));$/;"	p	signature:(network_t *,lsGen)
network_delete_node	sis_header/network.h	/^EXTERN void network_delete_node ARGS((network_t *, node_t *));$/;"	p	signature:(network_t *, node_t *)
network_delete_node_gen	sis_header/network.h	/^EXTERN void network_delete_node_gen ARGS((network_t *, lsGen));$/;"	p	signature:(network_t *, lsGen)
network_dfs	sis_header/network.h	/^EXTERN array_t *network_dfs ARGS((network_t *));$/;"	p	signature:(network_t *)
network_dfs_from_input	sis_header/network.h	/^EXTERN array_t *network_dfs_from_input ARGS((network_t *));$/;"	p	signature:(network_t *)
network_disconnect	sis_header/network.h	/^EXTERN void network_disconnect ARGS((node_t *,node_t *,node_t **,node_t **));$/;"	p	signature:(node_t *,node_t *,node_t **,node_t **)
network_dup	sis_header/network.h	/^EXTERN network_t *network_dup ARGS((network_t *));$/;"	p	signature:(network_t *)
network_espresso	sis_header/network.h	/^EXTERN network_t *network_espresso ARGS((network_t *));$/;"	p	signature:(network_t *)
network_extract_next_state_po	sis_header/seqbdd.h	/^extern array_t *network_extract_next_state_po(\/* network_t *network, network_t *constraints *\/);$/;"	p	signature:( )
network_extract_pi	sis_header/seqbdd.h	/^extern array_t *network_extract_pi(\/* network_t *network *\/);$/;"	p	signature:( )
network_find_node	sis_header/network.h	/^EXTERN node_t *network_find_node ARGS((network_t *, char *));$/;"	p	signature:(network_t *, char *)
network_free	sis_header/network.h	/^EXTERN void network_free ARGS((network_t *));$/;"	p	signature:(network_t *)
network_from_nodevec	sis_header/network.h	/^EXTERN network_t *network_from_nodevec ARGS((array_t *));$/;"	p	signature:(array_t *)
network_get_control	sis_header/network.h	/^EXTERN node_t *network_get_control ARGS((network_t *,node_t *));$/;"	p	signature:(network_t *,node_t *)
network_get_pi	sis_header/network.h	/^EXTERN node_t *network_get_pi ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
network_get_po	sis_header/network.h	/^EXTERN node_t *network_get_po ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
network_is_acyclic	sis_header/network.h	/^EXTERN int network_is_acyclic ARGS((network_t *));$/;"	p	signature:(network_t *)
network_is_control	sis_header/network.h	/^EXTERN int network_is_control ARGS((network_t *,node_t *));$/;"	p	signature:(network_t *,node_t *)
network_is_real_pi	sis_header/network.h	/^EXTERN int network_is_real_pi ARGS((network_t *,node_t *));$/;"	p	signature:(network_t *,node_t *)
network_is_real_po	sis_header/network.h	/^EXTERN int network_is_real_po ARGS((network_t *,node_t *));$/;"	p	signature:(network_t *,node_t *)
network_latch_end	sis_header/network.h	/^EXTERN node_t *network_latch_end ARGS((node_t *));$/;"	p	signature:(node_t *)
network_name	sis_header/network.h	/^EXTERN char *network_name ARGS((network_t *));$/;"	p	signature:(network_t *)
network_num_clock	sis_header/clock.h	/^EXTERN int network_num_clock ARGS((network_t *));$/;"	p	signature:(network_t *)
network_num_internal	sis_header/network.h	/^EXTERN int network_num_internal ARGS((network_t *));$/;"	p	signature:(network_t *)
network_num_latch	sis_header/network.h	124;"	d
network_num_pi	sis_header/network.h	/^EXTERN int network_num_pi ARGS((network_t *));$/;"	p	signature:(network_t *)
network_num_po	sis_header/network.h	/^EXTERN int network_num_po ARGS((network_t *));$/;"	p	signature:(network_t *)
network_replace_io_fake_names	sis_header/network.h	/^EXTERN void network_replace_io_fake_names ARGS((network_t *));$/;"	p	signature:(network_t *)
network_reset_long_name	sis_header/network.h	/^EXTERN void network_reset_long_name ARGS((network_t *));$/;"	p	signature:(network_t *)
network_reset_short_name	sis_header/network.h	/^EXTERN void network_reset_short_name ARGS((network_t *));$/;"	p	signature:(network_t *)
network_set_name	sis_header/network.h	/^EXTERN void network_set_name ARGS((network_t *, char *));$/;"	p	signature:(network_t *, char *)
network_set_stg	sis_header/network.h	/^EXTERN void network_set_stg ARGS((network_t *,graph_t *));$/;"	p	signature:(network_t *,graph_t *)
network_special_dfs	sis_header/network.h	/^EXTERN array_t *network_special_dfs ARGS((network_t *));$/;"	p	signature:(network_t *)
network_stg	sis_header/network.h	/^EXTERN graph_t *network_stg ARGS((network_t *));$/;"	p	signature:(network_t *)
network_stg_check	sis_header/network.h	/^EXTERN int network_stg_check ARGS((network_t *));$/;"	p	signature:(network_t *)
network_struct	sis_header/network.h	/^struct network_struct {$/;"	s
network_struct::area	sis_header/network.h	/^    double area;		\/* HACK: support area keyword *\/$/;"	m	struct:network_struct	access:public
network_struct::area_given	sis_header/network.h	/^    int area_given;		\/* HACK: support area keyword *\/$/;"	m	struct:network_struct	access:public
network_struct::astg	sis_header/network.h	/^    astg_t *astg;		\/* Asynch. Signal Transition Graph.	*\/$/;"	m	struct:network_struct	access:public
network_struct::bdd_list	sis_header/network.h	/^    lsList bdd_list;            \/* list of bdd managers *\/$/;"	m	struct:network_struct	access:public
network_struct::clock	sis_header/network.h	/^    char *clock;                \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
network_struct::dc_network	sis_header/network.h	/^    network_t *dc_network;      \/* external don't care network *\/$/;"	m	struct:network_struct	access:public
network_struct::default_delay	sis_header/network.h	/^    char *default_delay;	\/* Stores default delay info *\/$/;"	m	struct:network_struct	access:public
network_struct::latch	sis_header/network.h	/^    lsList latch;               \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
network_struct::latch_table	sis_header/network.h	/^    st_table *latch_table;      \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
network_struct::name_table	sis_header/network.h	/^    st_table *name_table;$/;"	m	struct:network_struct	access:public
network_struct::net_name	sis_header/network.h	/^    char *net_name;$/;"	m	struct:network_struct	access:public
network_struct::nodes	sis_header/network.h	/^    lsList nodes;		\/* list of all nodes *\/$/;"	m	struct:network_struct	access:public
network_struct::original	sis_header/network.h	/^    network_t *original;	\/* UNUSED: pointer to original network *\/$/;"	m	struct:network_struct	access:public
network_struct::pi	sis_header/network.h	/^    lsList pi;			\/* list of just primary inputs *\/$/;"	m	struct:network_struct	access:public
network_struct::po	sis_header/network.h	/^    lsList po;			\/* list of just primary outputs *\/$/;"	m	struct:network_struct	access:public
network_struct::short_name_table	sis_header/network.h	/^    st_table *short_name_table;$/;"	m	struct:network_struct	access:public
network_struct::stg	sis_header/network.h	/^    graph_t *stg;               \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
network_swap_names	sis_header/network.h	/^EXTERN void network_swap_names ARGS((network_t *, node_t *, node_t *));$/;"	p	signature:(network_t *, node_t *, node_t *)
network_sweep	sis_header/network.h	/^EXTERN int network_sweep ARGS((network_t *));$/;"	p	signature:(network_t *)
network_t	sis_header/node.h	/^typedef struct network_struct network_t;$/;"	t	typeref:struct:network_struct
network_tfi	sis_header/network.h	/^EXTERN array_t *network_tfi ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
network_tfo	sis_header/network.h	/^EXTERN array_t *network_tfo ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
network_to_pla	sis_header/network.h	/^EXTERN pPLA network_to_pla ARGS((network_t *));$/;"	p	signature:(network_t *)
network_verify	sis_header/network.h	/^EXTERN int network_verify ARGS((network_t *, network_t *, int));$/;"	p	signature:(network_t *, network_t *, int)
newNode	bnetwork.h	/^	BNode *newNode(BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(char *name, BNode *linkedNode, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, BNode *linkedNode, BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(char *name, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(char *name, char *oName, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(char *name, char *oName, BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(string &name, BNode *linkedNode, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(string &name, BNode *linkedNode, BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(string &name, BNodeType type); \/\/ create a new node with "name", allocates new string$/;"	p	class:BNetwork	access:public	signature:(string &name, BNodeType type)
newNode	bnetwork.h	/^	BNode *newNode(string &name, string &oName, BNodeType type);$/;"	p	class:BNetwork	access:public	signature:(string &name, string &oName, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(BNodeType type) {$/;"	f	class:BNetwork	signature:(BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, BNode *linkedNode, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, BNode *linkedNode, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(char *name, char *oName, BNodeType type) {$/;"	f	class:BNetwork	signature:(char *name, char *oName, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, BNode *linkedNode, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, BNode *linkedNode, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, BNodeType type)
newNode	bnetwork.h	/^inline BNode *BNetwork::newNode(string &name, string &oName, BNodeType type) {$/;"	f	class:BNetwork	signature:(string &name, string &oName, BNodeType type)
newNode	graph.h	/^	Node<NP, EP> *newNode();$/;"	p	class:Graph	access:public	signature:()
newNode	graph.h	/^	Node<NP, EP> *newNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
newNode	graph.h	/^	Node<NP, EP> *newNode(string &name); \/\/ create a new node with "name", allocates new string$/;"	p	class:Graph	access:public	signature:(string &name)
newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode() {$/;"	f	class:Graph	signature:()
newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
newNode	graph.h	/^inline Node<NP, EP> *Graph<GP, NP, EP>::newNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
new_PLA	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN pPLA new_PLA ARGS(());$/;"	p	signature:()
new_cover	sis_header/espresso.h	260;"	d
new_cube	sis_header/espresso.h	257;"	d
new_fault	sis_header/atpg.h	/^extern fault_t *new_fault();$/;"	p	signature:()
new_file_name	util/restart.c	/^static char *new_file_name;$/;"	v	file:
new_pi	sis_header/seqbdd.h	/^  array_t *new_pi;			$/;"	m	struct:__anon9	access:public
next	sis_header/espresso.h	/^    struct set_family *next;    \/* For garbage collection *\/$/;"	m	struct:set_family	typeref:struct:set_family::set_family	access:public
next	sis_header/espresso.h	/^    struct symbolic_label_struct *next;$/;"	m	struct:symbolic_label_struct	typeref:struct:symbolic_label_struct::symbolic_label_struct	access:public
next	sis_header/espresso.h	/^    struct symbolic_list_struct *next;$/;"	m	struct:symbolic_list_struct	typeref:struct:symbolic_list_struct::symbolic_list_struct	access:public
next	sis_header/espresso.h	/^    struct symbolic_struct *next;$/;"	m	struct:symbolic_struct	typeref:struct:symbolic_struct::symbolic_struct	access:public
next	sis_header/st.h	/^    st_table_entry *next;$/;"	m	struct:st_table_entry	access:public
next_col	sis_header/sparse.h	/^    sm_col *next_col;		\/* next column (in sm_matrix linked list) *\/$/;"	m	struct:sm_col_struct	access:public
next_col	sis_header/sparse.h	/^    sm_element *next_col;	\/* next column in this row *\/$/;"	m	struct:sm_element_struct	access:public
next_row	sis_header/sparse.h	/^    sm_element *next_row;	\/* next row in this column *\/$/;"	m	struct:sm_element_struct	access:public
next_row	sis_header/sparse.h	/^    sm_row *next_row;		\/* next row (in sm_matrix linked list) *\/$/;"	m	struct:sm_row_struct	access:public
nfanin	sis_header/atpg.h	/^    int nfanin;$/;"	m	struct:__anon38	access:public
nfanout	sis_header/atpg.h	/^    int             nfanout;$/;"	m	struct:atpg_sim_node_struct	access:public
nfanout	sis_header/atpg.h	/^    int nfanout;$/;"	m	struct:__anon38	access:public
nfict	sis_header/maxflow.h	/^    short nfict;          \/* no. of fictitious nodes using same name *\/$/;"	m	struct:MF_NODE	access:public
nin	sis_header/maxflow.h	/^    short nin;            \/* number of in_edges *\/$/;"	m	struct:MF_NODE	access:public
nin	sis_header/node.h	/^    int nin;			\/* number of inputs *\/$/;"	m	struct:node_struct	access:public
nlist	sis_header/maxflow.h	/^    mfnptr *nlist;              \/* node list *\/$/;"	m	struct:MF_GRAPH	access:public
node	imply.cpp	/^	IGNode *node;$/;"	m	struct:IGStackElement_	file:	access:public
node	imply.noforced.cpp	/^	IGNode *node;$/;"	m	struct:IGStackElement_	file:	access:public
node	node.h	/^		Node<NP, EP> *node;$/;"	m	class:Node::NodeEdge	access:public
node	sis_header/atpg.h	/^    node_t 	    *node;$/;"	m	struct:atpg_sim_node_struct	access:public
node	sis_header/atpg.h	/^    node_t *node;$/;"	m	struct:__anon30	access:public
node	sis_header/atpg.h	/^    node_t *node;$/;"	m	struct:fault_pattern_struct	access:public
node	sis_header/atpg.h	/^  node_t        *node;		\/* node on which fault occurs *\/$/;"	m	struct:fault_struct	access:public
node	sis_header/bdd.h	/^    bdd_node *node;                             \/* ptr to the top node of the function *\/$/;"	m	struct:bdd_t	access:public
node	sis_header/retime.h	/^    node_t *node;		\/* pointer to the corresponding mis node *\/$/;"	m	struct:re_node	access:public
node	sis_header/speed.h	/^    node_t *node;	       \/* node at which buffering is being performed*\/$/;"	m	struct:buffer_alg_input_struct	access:public
nodeIsMadeupName	graph.h	/^	int nodeIsMadeupName(string &name, int *value);$/;"	p	class:Graph	access:private	signature:(string &name, int *value)
nodeIsMadeupName	graph.h	/^inline int Graph<GP, NP, EP>::nodeIsMadeupName(string &name, int *value) {$/;"	f	class:Graph	signature:(string &name, int *value)
node_algebraic_cofactor	sis_header/node.h	/^EXTERN void node_algebraic_cofactor ARGS((node_t *,node_t *,node_t **,node_t **,node_t **));$/;"	p	signature:(node_t *,node_t *,node_t **,node_t **,node_t **)
node_alloc	sis_header/node.h	/^EXTERN node_t *node_alloc ARGS((void));$/;"	p	signature:(void)
node_and	sis_header/node.h	/^EXTERN node_t *node_and ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_assign_name	sis_header/node.h	/^EXTERN void node_assign_name ARGS((node_t *));$/;"	p	signature:(node_t *)
node_assign_short_name	sis_header/node.h	/^EXTERN void node_assign_short_name ARGS((node_t *));$/;"	p	signature:(node_t *)
node_bnode	ignetwork.h	381;"	d
node_cofactor	sis_header/node.h	/^EXTERN node_t *node_cofactor ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_collapse	sis_header/node.h	/^EXTERN int node_collapse ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_compare_id	sis_header/node.h	/^EXTERN int node_compare_id ARGS((char **, char **));$/;"	p	signature:(char **, char **)
node_constant	sis_header/node.h	/^EXTERN node_t *node_constant ARGS((int));$/;"	p	signature:(int)
node_contains	sis_header/node.h	/^EXTERN int node_contains ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_create	sis_header/node.h	/^EXTERN node_t *node_create ARGS((struct set_family *, node_t **, int));$/;"	p	signature:(struct set_family *, node_t **, int)
node_cube_t	sis_header/node.h	/^typedef pset node_cube_t;$/;"	t
node_d1merge	sis_header/node.h	/^EXTERN void node_d1merge ARGS((node_t *));$/;"	p	signature:(node_t *)
node_daemon_type_enum	sis_header/node.h	/^typedef enum node_daemon_type_enum {$/;"	g
node_daemon_type_t	sis_header/node.h	/^} node_daemon_type_t;$/;"	t	typeref:enum:node_daemon_type_enum
node_div	sis_header/node.h	/^EXTERN node_t *node_div ARGS((node_t *, node_t *, node_t **));$/;"	p	signature:(node_t *, node_t *, node_t **)
node_dup	sis_header/node.h	/^EXTERN node_t *node_dup ARGS((node_t *));$/;"	p	signature:(node_t *)
node_equal	sis_header/node.h	/^EXTERN int node_equal ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_equal_by_name	sis_header/node.h	/^EXTERN int node_equal_by_name ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_error	sis_header/node.h	/^EXTERN int node_error ARGS((int));$/;"	p	signature:(int)
node_fanin	node.h	186;"	d
node_fanin_ep	node.h	184;"	d
node_fanout	node.h	187;"	d
node_fanout_ep	node.h	185;"	d
node_fanout_gen	sis_header/node.h	/^EXTERN node_t *node_fanout_gen ARGS((lsList, int *));$/;"	p	signature:(lsList, int *)
node_fanout_init_gen	sis_header/node.h	/^EXTERN lsGen node_fanout_init_gen ARGS((node_t *));$/;"	p	signature:(node_t *)
node_flag	ignetwork.h	378;"	d
node_forced	ignetwork.h	380;"	d
node_free	sis_header/node.h	/^EXTERN void node_free ARGS((node_t *));$/;"	p	signature:(node_t *)
node_function	sis_header/node.h	/^EXTERN node_function_t node_function ARGS((node_t *));$/;"	p	signature:(node_t *)
node_function_enum	sis_header/node.h	/^enum node_function_enum {$/;"	g
node_function_t	sis_header/node.h	/^typedef enum node_function_enum node_function_t;$/;"	t	typeref:enum:node_function_enum
node_get_cube	sis_header/node.h	123;"	d
node_get_fanin	sis_header/node.h	/^EXTERN node_t *node_get_fanin ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
node_get_fanin_index	node.h	191;"	d
node_get_fanin_index	sis_header/node.h	/^EXTERN int node_get_fanin_index ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_get_fanout	sis_header/node.h	/^EXTERN node_t *node_get_fanout ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
node_get_fanout_index	node.h	192;"	d
node_get_literal	sis_header/node.h	129;"	d
node_ignetwork	ignetwork.h	376;"	d
node_imply_type	ignetwork.h	382;"	d
node_index_t	sis_header/atpg.h	/^} node_index_t;$/;"	t	typeref:struct:__anon30
node_input_phase	sis_header/node.h	/^EXTERN input_phase_t node_input_phase ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_invert	sis_header/node.h	/^EXTERN int node_invert ARGS((node_t *));$/;"	p	signature:(node_t *)
node_is_madeup_name	sis_header/node.h	/^EXTERN int node_is_madeup_name ARGS((char *, int *));$/;"	p	signature:(char *, int *)
node_largest_cube_divisor	sis_header/node.h	/^EXTERN node_t *node_largest_cube_divisor ARGS((node_t *));$/;"	p	signature:(node_t *)
node_lib_process	sis_header/node.h	/^EXTERN void node_lib_process ARGS((network_t *));$/;"	p	signature:(network_t *)
node_link	ignetwork.h	379;"	d
node_literal	sis_header/node.h	/^EXTERN node_t *node_literal ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
node_literal_count	sis_header/node.h	/^EXTERN int *node_literal_count ARGS((node_t *));$/;"	p	signature:(node_t *)
node_literal_t	sis_header/node.h	/^typedef int node_literal_t;$/;"	t
node_long_name	sis_header/node.h	/^EXTERN char *node_long_name ARGS((node_t *));$/;"	p	signature:(node_t *)
node_mark	ignetwork.h	377;"	d
node_minimum_base	sis_header/node.h	/^EXTERN void node_minimum_base ARGS((node_t *));$/;"	p	signature:(node_t *)
node_name	node.h	188;"	d
node_name	sis_header/node.h	/^EXTERN char *node_name ARGS((node_t *));$/;"	p	signature:(node_t *)
node_name	sis_interface.cpp	14;"	d	file:
node_name	sis_interface.cpp	15;"	d	file:
node_network	sis_header/node.h	/^EXTERN network_t *node_network ARGS((node_t *));$/;"	p	signature:(node_t *)
node_not	sis_header/node.h	/^EXTERN node_t *node_not ARGS((node_t *));$/;"	p	signature:(node_t *)
node_num_cube	sis_header/node.h	/^EXTERN int node_num_cube ARGS((node_t *));$/;"	p	signature:(node_t *)
node_num_fanin	node.h	189;"	d
node_num_fanin	sis_header/node.h	/^EXTERN int node_num_fanin ARGS((node_t *));$/;"	p	signature:(node_t *)
node_num_fanin	sis_interface.cpp	8;"	d	file:
node_num_fanout	node.h	190;"	d
node_num_fanout	sis_header/node.h	/^EXTERN int node_num_fanout ARGS((node_t *));$/;"	p	signature:(node_t *)
node_num_literal	sis_header/node.h	/^EXTERN int node_num_literal ARGS((node_t *));$/;"	p	signature:(node_t *)
node_or	sis_header/node.h	/^EXTERN node_t *node_or ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_patch_fanin	sis_header/node.h	/^EXTERN int node_patch_fanin ARGS((node_t *, node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *, node_t *)
node_patch_fanin_index	sis_header/node.h	/^EXTERN int node_patch_fanin_index ARGS((node_t *, int, node_t *));$/;"	p	signature:(node_t *, int, node_t *)
node_print	sis_header/node.h	/^EXTERN void node_print ARGS((FILE *, node_t *));$/;"	p	signature:(FILE *, node_t *)
node_print_negative	sis_header/node.h	/^EXTERN void node_print_negative ARGS((FILE *, node_t *));$/;"	p	signature:(FILE *, node_t *)
node_print_rhs	sis_header/node.h	/^EXTERN void node_print_rhs ARGS((FILE *, node_t *));$/;"	p	signature:(FILE *, node_t *)
node_register_daemon	sis_header/node.h	/^EXTERN void node_register_daemon ARGS((enum node_daemon_type_enum, void (*)()));$/;"	p	signature:(enum node_daemon_type_enum, void (*)())
node_replace	sis_header/node.h	/^EXTERN void node_replace ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_replace_internal	sis_header/node.h	/^EXTERN void node_replace_internal ARGS((node_t *, node_t **, int, struct set_family *));$/;"	p	signature:(node_t *, node_t **, int, struct set_family *)
node_scc	sis_header/node.h	/^EXTERN void node_scc ARGS((node_t *));$/;"	p	signature:(node_t *)
node_sf_adjust	sis_header/node.h	/^EXTERN pset_family node_sf_adjust ARGS((node_t *, node_t **, int));$/;"	p	signature:(node_t *, node_t **, int)
node_sim_enum	sis_header/node.h	/^enum node_sim_enum {$/;"	g
node_sim_type_t	sis_header/node.h	/^typedef enum node_sim_enum node_sim_type_t;$/;"	t	typeref:enum:node_sim_enum
node_simplify	sis_header/node.h	/^EXTERN node_t *node_simplify ARGS((node_t *, node_t *, enum node_sim_enum));$/;"	p	signature:(node_t *, node_t *, enum node_sim_enum)
node_struct	sis_header/node.h	/^struct node_struct {$/;"	s
node_struct::D	sis_header/node.h	/^    pset_family D;		\/* dc-set -- currently unused *\/$/;"	m	struct:node_struct	access:public
node_struct::F	sis_header/node.h	/^    pset_family F;		\/* on-set *\/$/;"	m	struct:node_struct	access:public
node_struct::R	sis_header/node.h	/^    pset_family R;		\/* off-set *\/$/;"	m	struct:node_struct	access:public
node_struct::atpg	sis_header/node.h	/^    char *atpg;			\/* reserved for atpg package *\/$/;"	m	struct:node_struct	access:public
node_struct::bdd	sis_header/node.h	/^    char *bdd;			\/* reserved for bdd package *\/$/;"	m	struct:node_struct	access:public
node_struct::bin	sis_header/node.h	/^    char *bin;			\/* reserved for binning (mapping) package *\/$/;"	m	struct:node_struct	access:public
node_struct::buf	sis_header/node.h	/^    char *buf;			\/* reserved for buffer package *\/$/;"	m	struct:node_struct	access:public
node_struct::copy	sis_header/node.h	/^    node_t *copy;		\/* used by network_dup(), network_append() *\/$/;"	m	struct:node_struct	access:public
node_struct::cspf	sis_header/node.h	/^    char *cspf;			\/* reserved for cspf (simplify) package *\/$/;"	m	struct:node_struct	access:public
node_struct::delay	sis_header/node.h	/^    char *delay;		\/* reserved for delay package *\/$/;"	m	struct:node_struct	access:public
node_struct::factored	sis_header/node.h	/^    char *factored;		\/* reserved for factoring package *\/$/;"	m	struct:node_struct	access:public
node_struct::fanin	sis_header/node.h	/^    node_t **fanin;$/;"	m	struct:node_struct	access:public
node_struct::fanin_changed	sis_header/node.h	/^    unsigned fanin_changed:1;	\/* flag to catch fanin generation errors *\/$/;"	m	struct:node_struct	access:public
node_struct::fanin_fanout	sis_header/node.h	/^    lsHandle *fanin_fanout;	\/* handles of our fanin's fanout_t structure *\/$/;"	m	struct:node_struct	access:public
node_struct::fanout	sis_header/node.h	/^    lsList fanout;		\/* list of 'fanout_t' structures *\/$/;"	m	struct:node_struct	access:public
node_struct::fanout_changed	sis_header/node.h	/^    unsigned fanout_changed:1;	\/* flag to catch fanout generation errors *\/$/;"	m	struct:node_struct	access:public
node_struct::is_dup_free	sis_header/node.h	/^    unsigned is_dup_free:1;	\/* node has no aliasing of its fanin *\/$/;"	m	struct:node_struct	access:public
node_struct::is_min_base	sis_header/node.h	/^    unsigned is_min_base:1;	\/* node is minimum base *\/$/;"	m	struct:node_struct	access:public
node_struct::is_scc_minimal	sis_header/node.h	/^    unsigned is_scc_minimal:1;	\/* node is scc-minimal *\/$/;"	m	struct:node_struct	access:public
node_struct::ite	sis_header/node.h	/^    char *ite;			\/* reserved for pld package *\/$/;"	m	struct:node_struct	access:public
node_struct::map	sis_header/node.h	/^    char *map;			\/* reserved for mapping package *\/$/;"	m	struct:node_struct	access:public
node_struct::name	sis_header/node.h	/^    char *name;			\/* name of the output signal *\/$/;"	m	struct:node_struct	access:public
node_struct::net_handle	sis_header/node.h	/^    lsHandle net_handle;	\/* handle inside of network nodelist *\/$/;"	m	struct:node_struct	access:public
node_struct::network	sis_header/node.h	/^    network_t *network;		\/* network this node belongs to *\/$/;"	m	struct:node_struct	access:public
node_struct::nin	sis_header/node.h	/^    int nin;			\/* number of inputs *\/$/;"	m	struct:node_struct	access:public
node_struct::pld	sis_header/node.h	/^    char *pld;			\/* reserved for pld package *\/$/;"	m	struct:node_struct	access:public
node_struct::short_name	sis_header/node.h	/^    char *short_name;		\/* short name for interactive use *\/$/;"	m	struct:node_struct	access:public
node_struct::simplify	sis_header/node.h	/^    char *simplify;		\/* reserved for simplify package *\/$/;"	m	struct:node_struct	access:public
node_struct::simulation	sis_header/node.h	/^    char *simulation;		\/* reserved for simulation package *\/$/;"	m	struct:node_struct	access:public
node_struct::sis_id	sis_header/node.h	/^    int sis_id;			\/* unique id (used to sort fanin) *\/$/;"	m	struct:node_struct	access:public
node_struct::type	sis_header/node.h	/^    node_type_t type;		\/* type of the node *\/$/;"	m	struct:node_struct	access:public
node_struct::undef1	sis_header/node.h	/^    char *undef1;		\/* undefined 1 *\/$/;"	m	struct:node_struct	access:public
node_substitute	sis_header/node.h	/^EXTERN int node_substitute ARGS((node_t *, node_t *, int));$/;"	p	signature:(node_t *, node_t *, int)
node_t	sis_header/node.h	/^typedef struct node_struct node_t;$/;"	t	typeref:struct:node_struct
node_table	sis_header/maxflow.h	/^    st_table *node_table;	\/* hash table of nodes *\/$/;"	m	struct:MF_GRAPH	access:public
node_to_int	sis_header/nodeindex.h	/^    st_table *node_to_int;$/;"	m	struct:nodeindex_struct	access:public
node_type	bnetwork.h	257;"	d
node_type	ignetwork.h	374;"	d
node_type	sis_header/node.h	/^EXTERN node_type_t node_type ARGS((node_t *));$/;"	p	signature:(node_t *)
node_type_enum	sis_header/node.h	/^enum node_type_enum {$/;"	g
node_type_t	sis_header/node.h	/^typedef enum node_type_enum node_type_t;$/;"	t	typeref:enum:node_type_enum
node_value	sis_header/factor.h	/^EXTERN int node_value ARGS((node_t *));$/;"	p	signature:(node_t *)
node_xnor	sis_header/node.h	/^EXTERN node_t *node_xnor ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
node_xor	sis_header/node.h	/^EXTERN node_t *node_xor ARGS((node_t *, node_t *));$/;"	p	signature:(node_t *, node_t *)
nodeindex_alloc	sis_header/nodeindex.h	/^EXTERN struct nodeindex_struct *nodeindex_alloc ARGS((void));$/;"	p	signature:(void)
nodeindex_free	sis_header/nodeindex.h	/^EXTERN void nodeindex_free ARGS((struct nodeindex_struct *));$/;"	p	signature:(struct nodeindex_struct *)
nodeindex_indexof	sis_header/nodeindex.h	/^EXTERN int nodeindex_indexof ARGS((struct nodeindex_struct *, node_t *));$/;"	p	signature:(struct nodeindex_struct *, node_t *)
nodeindex_insert	sis_header/nodeindex.h	/^EXTERN int nodeindex_insert ARGS((struct nodeindex_struct *, node_t *));$/;"	p	signature:(struct nodeindex_struct *, node_t *)
nodeindex_nodeof	sis_header/nodeindex.h	/^EXTERN node_t *nodeindex_nodeof ARGS((struct nodeindex_struct *, int));$/;"	p	signature:(struct nodeindex_struct *, int)
nodeindex_struct	sis_header/nodeindex.h	/^struct nodeindex_struct {$/;"	s
nodeindex_struct::int_to_node	sis_header/nodeindex.h	/^    array_t *int_to_node;$/;"	m	struct:nodeindex_struct	access:public
nodeindex_struct::node_to_int	sis_header/nodeindex.h	/^    st_table *node_to_int;$/;"	m	struct:nodeindex_struct	access:public
nodeindex_t	sis_header/nodeindex.h	/^typedef struct nodeindex_struct nodeindex_t;$/;"	t	typeref:struct:nodeindex_struct
nodelist	sis_header/avl.h	/^    avl_node **nodelist;$/;"	m	struct:avl_generator_struct	access:public
nodes	sis_header/bdd.h	/^	unsigned int nodes;$/;"	m	struct:bdd_stats::__anon28	access:public
nodes	sis_header/bdd.h	/^    } nodes;		\/* bdd_node count *\/$/;"	m	struct:bdd_stats	typeref:struct:bdd_stats::__anon25	access:public
nodes	sis_header/bdd.h	/^    } nodes;$/;"	m	struct:bdd_mgr_init	typeref:struct:bdd_mgr_init::__anon19	access:public
nodes	sis_header/network.h	/^    lsList nodes;		\/* list of all nodes *\/$/;"	m	struct:network_struct	access:public
nodes	sis_header/retime.h	/^    array_t *nodes;		\/* nodes in network (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
nodes_collected	sis_header/bdd.h	/^        unsigned int nodes_collected; \/* cumulative number of nodes collected over life of manager *\/$/;"	m	struct:bdd_stats::__anon27	access:public
nodevec_dup	sis_header/node.h	/^EXTERN node_t **nodevec_dup ARGS((node_t **, int));$/;"	p	signature:(node_t **, int)
nominal	sis_header/clock.h	/^    double nominal;		\/* Nominal value (fraction of cycle-time) *\/$/;"	m	struct:clock_val	access:public
nout	sis_header/maxflow.h	/^    short nout;           \/* number of out_edges *\/$/;"	m	struct:MF_NODE	access:public
nrows	sis_header/sparse.h	/^    int nrows;			\/* number of rows *\/$/;"	m	struct:sm_matrix_struct	access:public
ntbdd_at_node	sis_header/ntbdd.h	/^EXTERN bdd_t *ntbdd_at_node ARGS((node_t *));$/;"	p	signature:(node_t *)
ntbdd_bdd_array_to_network	sis_header/ntbdd.h	/^EXTERN network_t *ntbdd_bdd_array_to_network ARGS((array_t *, array_t *, array_t *));$/;"	p	signature:(array_t *, array_t *, array_t *)
ntbdd_bdd_single_to_network	sis_header/ntbdd.h	/^EXTERN network_t *ntbdd_bdd_single_to_network ARGS((bdd_t *, char *, array_t *));$/;"	p	signature:(bdd_t *, char *, array_t *)
ntbdd_end_manager	sis_header/ntbdd.h	/^EXTERN void ntbdd_end_manager ARGS((bdd_manager *));$/;"	p	signature:(bdd_manager *)
ntbdd_free_at_node	sis_header/ntbdd.h	/^EXTERN void ntbdd_free_at_node ARGS((node_t *));$/;"	p	signature:(node_t *)
ntbdd_node_to_bdd	sis_header/ntbdd.h	/^EXTERN bdd_t *ntbdd_node_to_bdd ARGS((node_t *, bdd_manager *, st_table *));$/;"	p	signature:(node_t *, bdd_manager *, st_table *)
ntbdd_node_to_local_bdd	sis_header/ntbdd.h	/^EXTERN bdd_t *ntbdd_node_to_local_bdd ARGS((node_t *, bdd_manager *, st_table *));$/;"	p	signature:(node_t *, bdd_manager *, st_table *)
ntbdd_set_at_node	sis_header/ntbdd.h	/^EXTERN void ntbdd_set_at_node ARGS((node_t *, bdd_t *));$/;"	p	signature:(node_t *, bdd_t *)
ntbdd_start_manager	sis_header/ntbdd.h	/^EXTERN bdd_manager *ntbdd_start_manager ARGS((int));$/;"	p	signature:(int)
ntbdd_verify_method_t	sis_header/ntbdd.h	/^typedef enum {ONE_AT_A_TIME, ALL_TOGETHER} ntbdd_verify_method_t;$/;"	t	typeref:enum:__anon3
ntbdd_verify_network	sis_header/ntbdd.h	/^EXTERN int ntbdd_verify_network ARGS((network_t *, network_t *, order_method_t, ntbdd_verify_method_t));$/;"	p	signature:(network_t *, network_t *, order_method_t, ntbdd_verify_method_t)
num	array/array.h	/^    int	 num;		\/* number of array elements.		*\/$/;"	m	struct:array_t	access:public
num	sis_header/array.h	/^    int	 num;		\/* number of array elements.		*\/$/;"	m	struct:array_t	access:public
numIn	node.h	/^	int numIn() { return in.size;};$/;"	f	class:Node	access:public	signature:()
numOut	node.h	/^	int numOut() { return in.size;};$/;"	f	class:Node	access:public	signature:()
num_binary_vars	sis_header/espresso.h	/^    int num_binary_vars;        \/* number of binary variables *\/$/;"	m	struct:cube_struct	access:public
num_bins	sis_header/st.h	/^    int num_bins;$/;"	m	struct:st_table	access:public
num_entries	sis_header/avl.h	/^    int num_entries;$/;"	m	struct:avl_tree_struct	access:public
num_entries	sis_header/st.h	/^    int num_entries;$/;"	m	struct:st_table	access:public
num_mv_vars	sis_header/espresso.h	/^    int num_mv_vars;            \/* number of multiple-valued variables *\/$/;"	m	struct:cube_struct	access:public
num_neg	sis_header/speed.h	/^    int num_neg;	       \/* Number of negative destination *\/$/;"	m	struct:buffer_alg_input_struct	access:public
num_of_node	sis_header/maxflow.h	/^    int num_of_node;            \/* total no. of nodes in the circuit *\/$/;"	m	struct:MF_GRAPH	access:public
num_pos	sis_header/speed.h	/^    int num_pos;	       \/* Number of positive fanouts *\/$/;"	m	struct:buffer_alg_input_struct	access:public
num_val_alloc	sis_header/retime.h	/^    int num_val_alloc;		\/* Number of value entries allocated *\/$/;"	m	struct:re_edge	access:public
num_vars	sis_header/espresso.h	/^    int num_vars;               \/* number of variables in a cube *\/$/;"	m	struct:cube_struct	access:public
oName	bnetwork.h	/^	string *oName;$/;"	m	class:BNodeProperty	access:public
obj_size	array/array.h	/^    int	 obj_size;	\/* size of each array object.		*\/$/;"	m	struct:array_t	access:public
obj_size	sis_header/array.h	/^    int	 obj_size;	\/* size of each array object.		*\/$/;"	m	struct:array_t	access:public
old_file_name	util/restart.c	/^static char *old_file_name;$/;"	v	file:
on	sis_header/bdd.h	/^        boolean on;                   \/* TRUE\/FALSE: is the cache on *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
on	sis_header/bdd.h	/^      boolean on;                     \/* TRUE\/FALSE: is the garbage collector on *\/$/;"	m	struct:bdd_mgr_init::__anon17	access:public
one_clauses	sis_header/sat.h	/^    array_t *one_clauses;$/;"	m	struct:__anon5	access:public
onode	sis_header/maxflow.h	/^    mfnptr onode;         \/* edge incident to this node *\/$/;"	m	struct:MF_EDGE	access:public
operator <	node.h	/^		int operator< (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
operator <=	node.h	/^		int operator<= (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
operator ==	node.h	/^		int operator== (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
operator >	node.h	/^		int operator> (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
operator >=	node.h	/^		int operator>= (NodeEdge &to){$/;"	f	class:Node::NodeEdge	access:public	signature:(NodeEdge &to)
operator []	array.h	/^	T& operator[] (int idx){$/;"	f	class:Array	access:public	signature:(int idx)
opo	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pcover opo ARGS((pcube, pcover, pcover, pcover,$/;"	p	signature:(pcube, pcover, pcover, pcover, int)
opo_leaf	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pset_family opo_leaf ARGS((pcover, pset, int, int));$/;"	p	signature:(pcover, pset, int, int)
opo_recur	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pset_family opo_recur ARGS((pcover, pcover, pcube, int,$/;"	p	signature:(pcover, pcover, pcube, int, int, int)
opoall	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN void opoall ARGS((pPLA, int, int, int));$/;"	p	signature:(pPLA, int, int, int)
or_input_masks	sis_header/atpg.h	/^    unsigned        *or_input_masks;$/;"	m	struct:atpg_sim_node_struct	access:public
or_net_dcnet	sis_header/network.h	/^EXTERN network_t *or_net_dcnet ARGS((network_t *));$/;"	p	signature:(network_t *)
or_output_mask	sis_header/atpg.h	/^    unsigned        or_output_mask;$/;"	m	struct:atpg_sim_node_struct	access:public
order	sis_header/atpg.h	/^    int order;$/;"	m	struct:__anon38	access:public
order_dfs	sis_header/order.h	/^EXTERN array_t *order_dfs ARGS((array_t *, st_table *, int));$/;"	p	signature:(array_t *, st_table *, int)
order_method_t	sis_header/order.h	/^typedef enum {DFS_ORDER, RANDOM_ORDER} order_method_t;$/;"	t	typeref:enum:__anon15
order_network	sis_header/seqbdd.h	/^  network_t *order_network;	 \/* network that specifies the order of PIPO to be used *\/$/;"	m	struct:verif_options_t	access:public
order_network_name	sis_header/seqbdd.h	/^  char *order_network_name;$/;"	m	struct:verif_options_t	access:public
order_nodes	sis_header/seqbdd.h	/^extern array_t *order_nodes();$/;"	p	signature:()
order_random	sis_header/order.h	/^EXTERN array_t *order_random ARGS((array_t *, st_table *, int));$/;"	p	signature:(array_t *, st_table *, int)
ordering_depth	sis_header/seqbdd.h	/^  int ordering_depth;		 \/* use to limit the search in good ordering heuristic *\/$/;"	m	struct:verif_options_t	access:public
org_pi	sis_header/seqbdd.h	/^  array_t *org_pi;			\/* the PI's before we introduce the consistency PI's *\/$/;"	m	struct:__anon9	access:public
orig_external_outputs	sis_header/atpg.h	/^    array_t *orig_external_outputs;$/;"	m	struct:__anon37	access:public
orig_transition_outputs	sis_header/atpg.h	/^    array_t *orig_transition_outputs;$/;"	m	struct:__anon37	access:public
original	sis_header/network.h	/^    network_t *original;	\/* UNUSED: pointer to original network *\/$/;"	m	struct:network_struct	access:public
out	node.h	/^	Array<NodeEdge> out;$/;"	m	class:Node	access:public
out	sis_header/espresso.h	/^    int out;			\/* transistor count, output part *\/$/;"	m	struct:cost_struct	access:public
out_edge	sis_header/maxflow.h	/^    mfeptr *out_edge;     \/* edges incident from this node *\/$/;"	m	struct:MF_NODE	access:public
output	sis_header/espresso.h	/^    int output;                 \/* which variable is "output" (-1 if none) *\/$/;"	m	struct:cube_struct	access:public
output_fn	sis_header/seqbdd.h	/^  bdd_t *output_fn;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
output_fns	sis_header/seqbdd.h	/^  array_t *output_fns;			\/* for BULL_METHOD  *\/$/;"	m	struct:__anon10	access:public
output_info	sis_header/seqbdd.h	/^  output_info_t *output_info;$/;"	m	struct:verif_options_t	access:public
output_info_free	sis_header/seqbdd.h	/^extern void output_info_free();$/;"	p	signature:()
output_info_init	sis_header/seqbdd.h	/^extern void output_info_init();$/;"	p	signature:()
output_info_t	sis_header/seqbdd.h	/^} output_info_t;$/;"	t	typeref:struct:__anon9
output_node	sis_header/seqbdd.h	/^  node_t *output_node;			\/* the main output node: AND of the xnor_nodes *\/$/;"	m	struct:__anon9	access:public
output_phase_setup	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN int output_phase_setup ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
output_symbolic_constraints	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN int output_symbolic_constraints ARGS((FILE *, pPLA, int));$/;"	p	signature:(FILE *, pPLA, int)
output_vars	sis_header/seqbdd.h	/^  array_t *output_vars;			\/* for CONSISTENCY2_METHOD *\/$/;"	m	struct:__anon10	access:public
p	graph.h	/^	GP p;$/;"	m	class:Graph	access:public
p	node.h	/^	NP p; \/\/ node property$/;"	m	class:Node	access:public
pPLA	sis_header/espresso.h	/^} PLA_t, *pPLA;$/;"	t	typeref:struct:__anon14
pad_file	util/saveimage.c	/^pad_file(outFd, nbytes)$/;"	f	file:
pad_file	util/saveimage.c	/^static int pad_file();$/;"	p	file:
pair	sis_header/espresso.h	/^    ppair pair;                 \/* how to pair variables *\/$/;"	m	struct:__anon14	access:public
pair_all	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int pair_all ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
pair_best_cost	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN ppair pair_best_cost ARGS((int **));$/;"	p	signature:(int **)
pair_free	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int pair_free ARGS((ppair));$/;"	p	signature:(ppair)
pair_new	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN ppair pair_new ARGS((int));$/;"	p	signature:(int)
pair_save	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN ppair pair_save ARGS((ppair, int));$/;"	p	signature:(ppair, int)
pair_struct	sis_header/espresso.h	/^typedef struct pair_struct {$/;"	s
pair_struct::cnt	sis_header/espresso.h	/^    int cnt;$/;"	m	struct:pair_struct	access:public
pair_struct::var1	sis_header/espresso.h	/^    int *var1;$/;"	m	struct:pair_struct	access:public
pair_struct::var2	sis_header/espresso.h	/^    int *var2;$/;"	m	struct:pair_struct	access:public
pair_t	sis_header/espresso.h	/^} pair_t, *ppair;$/;"	t	typeref:struct:pair_struct
pairvar	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN pcover pairvar ARGS((pcover, ppair));$/;"	p	signature:(pcover, ppair)
parent	sis_header/mtr.h	/^    struct MtrNode *parent;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
parse_pla	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN void parse_pla ARGS((FILE *, pPLA));$/;"	p	signature:(FILE *, pPLA)
part_network	sis_header/pld.h	/^extern int part_network();           \/* xln_part.c *\/$/;"	p	signature:()
part_size	sis_header/espresso.h	/^    int *part_size;             \/* number of elements in each variable *\/$/;"	m	struct:cube_struct	access:public
part_zeros	sis_header/espresso.h	/^    int *part_zeros;            \/* count of zeros for each element *\/$/;"	m	struct:cdata_struct	access:public
partition_network	sis_header/pld.h	/^extern void partition_network();     \/* xln_map_par.c *\/$/;"	p	signature:()
parts_active	sis_header/espresso.h	/^    int *parts_active;          \/* number of "active" parts for each var *\/$/;"	m	struct:cdata_struct	access:public
path_edge	sis_header/maxflow.h	/^    mfeptr path_edge;     \/* augmenting path edge *\/$/;"	m	struct:MF_NODE	access:public
path_node	sis_header/maxflow.h	/^    mfnptr path_node;     \/* augmenting path node *\/$/;"	m	struct:MF_NODE	access:public
patterns	sis_header/library.h	/^    lsList patterns;		\/* list of prim_t patterns *\/$/;"	m	struct:library_struct	access:public
pbv1	sis_header/espresso.h	/^\/* set.c *\/	EXTERN char *pbv1 ARGS((pset, int));$/;"	p	signature:(pset, int)
pc1	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN char *pc1 ARGS((pcube));$/;"	p	signature:(pcube)
pc2	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN char *pc2 ARGS((pcube));$/;"	p	signature:(pcube)
pc3	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN char *pc3 ARGS((pcube));$/;"	p	signature:(pcube)
pclose	sis_header/util.h	/^extern int pclose();$/;"	p	signature:()
pclose	util/stub.c	/^pclose(fp)$/;"	f
pclose	util/util.h	/^extern int pclose();$/;"	p	signature:()
pcost	sis_header/espresso.h	/^} cost_t, *pcost;$/;"	t	typeref:struct:cost_struct
pcover	sis_header/espresso.h	259;"	d
pcube	sis_header/espresso.h	256;"	d
peak	sis_header/bdd.h	/^        unsigned int peak;$/;"	m	struct:bdd_stats::__anon25	access:public
perror	sis_header/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
perror	util/util.h	/^extern VOID_HACK abort(), free(), exit(), perror();$/;"	p	signature:()
phase	sis_header/delay.h	/^    pin_phase_t phase;$/;"	m	struct:delay_pin_struct	access:public
phase	sis_header/espresso.h	/^    pcube phase;                \/* phase to split into on-set and off-set *\/$/;"	m	struct:__anon14	access:public
phase	sis_header/speed.h	/^    pin_phase_t phase;	       \/* Whether POS or NEG poloarity signal *\/$/;"	m	struct:sp_fanout_struct	access:public
phase_assignment	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN void phase_assignment ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
phase_good	sis_header/phase.h	/^EXTERN void phase_good ARGS((network_t *));$/;"	p	signature:(network_t *)
phase_quick	sis_header/phase.h	/^EXTERN void phase_quick ARGS((network_t *));$/;"	p	signature:(network_t *)
phase_random_greedy	sis_header/phase.h	/^EXTERN void phase_random_greedy ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
phase_trace_set	sis_header/phase.h	/^EXTERN void phase_trace_set ARGS((void));$/;"	p	signature:(void)
phase_trace_unset	sis_header/phase.h	/^EXTERN void phase_trace_unset ARGS((void));$/;"	p	signature:(void)
pi	sis_header/network.h	/^    lsList pi;			\/* list of just primary inputs *\/$/;"	m	struct:network_struct	access:public
pi_inputs	sis_header/seqbdd.h	/^  array_t *pi_inputs;		\/* should always be computed: array of BDD's for PI current state *\/$/;"	m	struct:__anon10	access:public
pi_ordering	sis_header/seqbdd.h	/^  st_table *pi_ordering;		\/* some good order of the PI's *\/$/;"	m	struct:__anon9	access:public
pi_po_table	sis_header/atpg.h	/^    st_table *pi_po_table;		\/* pi-po reference index *\/$/;"	m	struct:__anon36	access:public
pi_uid	sis_header/atpg.h	/^    int *pi_uid;			\/* uid for pi's *\/$/;"	m	struct:__anon36	access:public
pin	sis_header/node.h	/^    int pin;$/;"	m	struct:fanout_struct	access:public
pin	sis_header/speed.h	/^    int pin;		       \/* The "fanin_index" of the destination pin *\/$/;"	m	struct:sp_fanout_struct	access:public
pin_phase_enum	sis_header/delay.h	/^typedef enum pin_phase_enum {$/;"	g
pin_phase_t	sis_header/delay.h	/^} pin_phase_t;$/;"	t	typeref:enum:pin_phase_enum
pla_to_dcnetwork_single	sis_header/network.h	/^EXTERN network_t *pla_to_dcnetwork_single ARGS((pPLA ));$/;"	p	signature:(pPLA )
pla_to_network	sis_header/network.h	/^EXTERN network_t *pla_to_network ARGS((pPLA ));$/;"	p	signature:(pPLA )
pla_to_network_single	sis_header/network.h	/^EXTERN network_t *pla_to_network_single ARGS((pPLA ));$/;"	p	signature:(pPLA )
pla_type	sis_header/espresso.h	/^    int pla_type;               \/* logical PLA format *\/$/;"	m	struct:__anon14	access:public
pla_types_struct	sis_header/espresso.h	/^struct pla_types_struct {$/;"	s
pla_types_struct::key	sis_header/espresso.h	/^    char *key;$/;"	m	struct:pla_types_struct	access:public
pla_types_struct::value	sis_header/espresso.h	/^    int value;$/;"	m	struct:pla_types_struct	access:public
pld	sis_header/node.h	/^    char *pld;			\/* reserved for pld package *\/$/;"	m	struct:node_struct	access:public
pls_group	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void pls_group ARGS((pPLA, FILE *));$/;"	p	signature:(pPLA, FILE *)
pls_label	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void pls_label ARGS((pPLA, FILE *));$/;"	p	signature:(pPLA, FILE *)
pls_output	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void pls_output ARGS((pPLA));$/;"	p	signature:(pPLA)
pnext	sis_header/maxflow.h	/^    mfnptr pnext;         \/* general usage link *\/$/;"	m	struct:MF_NODE	access:public
po	sis_header/network.h	/^    lsList po;			\/* list of just primary outputs *\/$/;"	m	struct:network_struct	access:public
po_ordering	sis_header/seqbdd.h	/^  array_t *po_ordering;			\/* next_state_po, in some good order *\/$/;"	m	struct:__anon9	access:public
po_uid	sis_header/atpg.h	/^    int *po_uid;			\/* uid for po's *\/$/;"	m	struct:__anon36	access:public
polarity	bnetwork.h	/^	int polarity;$/;"	m	class:WireProperty	access:public
polarity	rewire.h	/^	int polarity;$/;"	m	struct:__anon2	access:public
polarity	rewire_c.h	/^	int polarity;$/;"	m	struct:__anon1	access:public
popen	sis_header/util.h	/^extern FILE *popen(), *tmpfile();$/;"	p	signature:()
popen	util/stub.c	/^popen(string, mode)$/;"	f
popen	util/util.h	/^extern FILE *popen(), *tmpfile();$/;"	p	signature:()
pos	sis_header/espresso.h	/^    int pos;$/;"	m	struct:symbolic_list_struct	access:public
power2	imply.cpp	/^static int power2[6] = {1, 2, 4, 8, 16, 32};$/;"	v	file:
power2	imply.noforced.cpp	/^static int power2[6] = {1, 2, 4, 8, 16, 32};$/;"	v	file:
power_estimate	sis_header/power.h	/^extern int power_estimate();           \/* power_main.c *\/$/;"	p	signature:()
power_free_info	sis_header/power.h	/^extern int power_free_info();          \/* power_util.c *\/$/;"	p	signature:()
power_info_t	sis_header/power.h	/^} power_info_t;$/;"	t	typeref:struct:__anon7
power_main_driver	sis_header/power.h	/^extern int power_main_driver();        \/* power_main.c *\/$/;"	p	signature:()
power_print_info	sis_header/power.h	/^extern int power_print_info();         \/* power_util.c *\/$/;"	p	signature:()
ppair	sis_header/espresso.h	/^} pair_t, *ppair;$/;"	t	typeref:struct:pair_struct
prev_col	sis_header/sparse.h	/^    sm_col *prev_col;		\/* prev column (in sm_matrix linked list) *\/$/;"	m	struct:sm_col_struct	access:public
prev_col	sis_header/sparse.h	/^    sm_element *prev_col;	\/* previous column in this row *\/$/;"	m	struct:sm_element_struct	access:public
prev_row	sis_header/sparse.h	/^    sm_element *prev_row;	\/* previous row in this column *\/$/;"	m	struct:sm_element_struct	access:public
prev_row	sis_header/sparse.h	/^    sm_row *prev_row;		\/* previous row (in sm_matrix linked list) *\/$/;"	m	struct:sm_row_struct	access:public
primary_inputs	sis_header/retime.h	/^    array_t *primary_inputs;	\/* primary inputs (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
primary_outputs	sis_header/retime.h	/^    array_t *primary_outputs;	\/* primary outputs (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
primes	sis_header/espresso.h	/^    int primes;			\/* number of prime cubes *\/$/;"	m	struct:cost_struct	access:public
primes_consensus	sis_header/espresso.h	/^\/* primes.c *\/	EXTERN pcover primes_consensus ARGS((pcube *));$/;"	p	signature:(pcube *)
print	array/arr_main.c	/^print(s, a)$/;"	f	file:
print_and_destroy_sequences	sis_header/atpg.h	/^extern void print_and_destroy_sequences();$/;"	p	signature:()
print_bool	sis_header/espresso.h	253;"	d
print_cost	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN char *print_cost ARGS((pcover));$/;"	p	signature:(pcover)
print_cube	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void print_cube ARGS((FILE *, pcube, char *));$/;"	p	signature:(FILE *, pcube, char *)
print_expanded_cube	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void print_expanded_cube ARGS((FILE *, pcube, pcube));$/;"	p	signature:(FILE *, pcube, pcube)
print_node_array	sis_header/seqbdd.h	/^extern void print_node_array(\/* array_t *array *\/);$/;"	p	signature:( )
print_node_table	sis_header/seqbdd.h	/^extern void print_node_table(\/* st_table *table *\/);$/;"	p	signature:( )
print_pair	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN int print_pair ARGS((ppair));$/;"	p	signature:(ppair)
print_sequences	sis_header/atpg.h	/^    bool print_sequences;$/;"	m	struct:__anon32	access:public
print_time	sis_header/util.h	287;"	d
print_time	util/util.h	283;"	d
print_trace	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void print_trace ARGS((pcover, char *, long));$/;"	p	signature:(pcover, char *, long)
product_alloc_range_data	sis_header/seqbdd.h	/^extern range_data_t *product_alloc_range_data();$/;"	p	signature:()
product_bdd_sizes	sis_header/seqbdd.h	/^extern void 	 product_bdd_sizes();$/;"	p	signature:()
product_check_output	sis_header/seqbdd.h	/^extern int 	 product_check_output();$/;"	p	signature:()
product_compute_next_states	sis_header/seqbdd.h	/^extern bdd_t	*product_compute_next_states();$/;"	p	signature:()
product_compute_reverse_image	sis_header/seqbdd.h	/^extern bdd_t	*product_compute_reverse_image();$/;"	p	signature:()
product_free_range_data	sis_header/seqbdd.h	/^extern void 	 product_free_range_data();$/;"	p	signature:()
product_input_vars	sis_header/atpg.h	/^    array_t *product_input_vars;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
product_machine_built	sis_header/atpg.h	/^    bool product_machine_built;$/;"	m	struct:__anon37	access:public
product_machine_verify	sis_header/atpg.h	/^    long product_machine_verify;$/;"	m	struct:__anon33	access:public
product_network	sis_header/atpg.h	/^    network_t *product_network;$/;"	m	struct:__anon37	access:public
product_range_data	sis_header/atpg.h	/^    range_data_t *product_range_data;$/;"	m	struct:__anon37	access:public
product_reached_sets	sis_header/atpg.h	/^    array_t *product_reached_sets;$/;"	m	struct:__anon37	access:public
product_real_pi_bdds	sis_header/atpg.h	/^    array_t *product_real_pi_bdds;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
product_start_states	sis_header/atpg.h	/^    bdd_t *product_start_states;	\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
product_var_table	sis_header/atpg.h	/^    st_table *product_var_table;	\/* used in PMT *\/$/;"	m	struct:__anon37	access:public
prop_rtg_depth	sis_header/atpg.h	/^    int prop_rtg_depth;$/;"	m	struct:__anon32	access:public
prop_sequence	sis_header/atpg.h	/^    array_t *prop_sequence;		\/* tmp space - propagation *\/$/;"	m	struct:__anon37	access:public
prop_sequence_table	sis_header/atpg.h	/^    st_table *prop_sequence_table;$/;"	m	struct:__anon37	access:public
prop_word_vectors	sis_header/atpg.h	/^    array_t *prop_word_vectors;		\/* tmp space for random propagation -$/;"	m	struct:__anon36	access:public
ps1	sis_header/espresso.h	/^\/* set.c *\/	EXTERN char *ps1 ARGS((pset));$/;"	p	signature:(pset)
pset	sis_header/espresso.h	/^typedef unsigned int *pset;$/;"	t
pset_family	sis_header/espresso.h	/^} set_family_t, *pset_family;$/;"	t	typeref:struct:set_family
ptime	sis_header/util.h	286;"	d
ptime	util/util.h	282;"	d
putc	sis_header/util.h	238;"	d
putc	util/util.h	234;"	d
quick_redund	sis_header/atpg.h	/^    bool quick_redund;$/;"	m	struct:__anon32	access:public
rStop	imply.cpp	/^static int rStop = 0;$/;"	v	file:
rStop	imply.noforced.cpp	/^static int rStop = 0;$/;"	v	file:
random	array/arr_main.c	/^    extern long random();$/;"	p	file:
random	array/arr_main.c	16;"	d	file:
random	sis_header/util.h	/^extern long random();$/;"	p	signature:()
random	sis_header/util.h	173;"	d
random	util/util.h	/^extern long random();$/;"	p	signature:()
random	util/util.h	173;"	d
random_order	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover random_order ARGS((pcover));$/;"	p	signature:(pcover)
random_prop	sis_header/atpg.h	/^    bool random_prop;$/;"	m	struct:__anon32	access:public
random_propagate	sis_header/atpg.h	/^    long random_propagate;$/;"	m	struct:__anon33	access:public
random_propagate	sis_header/atpg.h	/^extern int random_propagate();$/;"	p	signature:()
range	sis_header/seqbdd.h	/^  bdd_t *range;$/;"	m	struct:__anon13	access:public
range_2_compute	sis_header/seqbdd.h	/^extern bdd_t *range_2_compute();$/;"	p	signature:()
range_computation_interface	sis_header/seqbdd.h	/^extern network_t *range_computation_interface();$/;"	p	signature:()
range_data	sis_header/atpg.h	/^    range_data_t *range_data;$/;"	m	struct:__anon37	access:public
range_data_t	sis_header/seqbdd.h	/^} range_data_t;$/;"	t	typeref:struct:__anon10
range_method_t	sis_header/seqbdd.h	/^} range_method_t;$/;"	t	typeref:enum:__anon8
ratio	sis_header/bdd.h	/^      float ratio;                    \/* allocate new bdd_nodes to achieve ratio of used to unused nodes *\/$/;"	m	struct:bdd_mgr_init::__anon19	access:public
re_create_edge	sis_header/retime.h	/^EXTERN re_edge *re_create_edge$/;"	p	signature:(re_graph *, re_node *, re_node *, int, int, double)
re_cycle_delay	sis_header/retime.h	/^EXTERN double re_cycle_delay ARGS((re_graph *, double));$/;"	p	signature:(re_graph *, double)
re_edge	sis_header/retime.h	/^struct re_edge {$/;"	s
re_edge	sis_header/retime.h	/^typedef struct re_edge re_edge;$/;"	t	typeref:struct:re_edge
re_edge::breadth	sis_header/retime.h	/^    double breadth;		\/* Cost of adding a register along the edge *\/$/;"	m	struct:re_edge	access:public
re_edge::id	sis_header/retime.h	/^    int id;			\/* reference id for direct access *\/$/;"	m	struct:re_edge	access:public
re_edge::initial_values	sis_header/retime.h	/^    int *initial_values;	\/* Initial values on the latches *\/$/;"	m	struct:re_edge	access:public
re_edge::latches	sis_header/retime.h	/^    struct latch_struct **latches;		\/* Initial correspondence wrt latches *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::latch_struct	access:public
re_edge::num_val_alloc	sis_header/retime.h	/^    int num_val_alloc;		\/* Number of value entries allocated *\/$/;"	m	struct:re_edge	access:public
re_edge::sink	sis_header/retime.h	/^    struct re_node *sink;	\/* sink node (typed re_node *) *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::re_node	access:public
re_edge::sink_fanin_id	sis_header/retime.h	/^    int sink_fanin_id;		\/* the fanin id of the sink node *\/$/;"	m	struct:re_edge	access:public
re_edge::source	sis_header/retime.h	/^    struct re_node *source;	\/* source node (typed re_node *) *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::re_node	access:public
re_edge::temp_breadth	sis_header/retime.h	/^    double temp_breadth;	\/* Modified breadth to account for reg shar *\/$/;"	m	struct:re_edge	access:public
re_edge::weight	sis_header/retime.h	/^    int weight;			\/* edge weight w(e) ie. number of registers *\/$/;"	m	struct:re_edge	access:public
re_effective_sum_edge_weight	sis_header/retime.h	/^EXTERN int re_effective_sum_edge_weight ARGS((re_graph *));$/;"	p	signature:(re_graph *)
re_foreach_edge	sis_header/retime.h	94;"	d
re_foreach_fanin	sis_header/retime.h	114;"	d
re_foreach_fanout	sis_header/retime.h	120;"	d
re_foreach_node	sis_header/retime.h	88;"	d
re_foreach_primary_input	sis_header/retime.h	100;"	d
re_foreach_primary_output	sis_header/retime.h	107;"	d
re_get_edge	sis_header/retime.h	/^EXTERN re_edge *re_get_edge ARGS((re_graph *, int));$/;"	p	signature:(re_graph *, int)
re_get_fanin	sis_header/retime.h	/^EXTERN re_edge *re_get_fanin ARGS((re_node *, int));$/;"	p	signature:(re_node *, int)
re_get_fanout	sis_header/retime.h	/^EXTERN re_edge *re_get_fanout ARGS((re_node *, int));$/;"	p	signature:(re_node *, int)
re_get_node	sis_header/retime.h	/^EXTERN re_node *re_get_node ARGS((re_graph *, int));$/;"	p	signature:(re_graph *, int)
re_get_primary_input	sis_header/retime.h	/^EXTERN re_node *re_get_primary_input ARGS((re_graph *, int));$/;"	p	signature:(re_graph *, int)
re_get_primary_output	sis_header/retime.h	/^EXTERN re_node *re_get_primary_output ARGS((re_graph *, int));$/;"	p	signature:(re_graph *, int)
re_graph	sis_header/retime.h	/^struct re_graph {$/;"	s
re_graph	sis_header/retime.h	/^typedef struct re_graph re_graph;$/;"	t	typeref:struct:re_graph
re_graph::control_name	sis_header/retime.h	/^    char *control_name;		\/* Name of the controlling signal *\/$/;"	m	struct:re_graph	access:public
re_graph::edges	sis_header/retime.h	/^    array_t *edges;		\/* edges in network (typed re_edge *) *\/$/;"	m	struct:re_graph	access:public
re_graph::nodes	sis_header/retime.h	/^    array_t *nodes;		\/* nodes in network (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
re_graph::primary_inputs	sis_header/retime.h	/^    array_t *primary_inputs;	\/* primary inputs (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
re_graph::primary_outputs	sis_header/retime.h	/^    array_t *primary_outputs;	\/* primary outputs (typed re_node *) *\/$/;"	m	struct:re_graph	access:public
re_graph::s_type	sis_header/retime.h	/^    enum latch_synch_enum s_type;	\/* Synchronization type of design *\/$/;"	m	struct:re_graph	typeref:enum:re_graph::latch_synch_enum	access:public
re_graph_alloc	sis_header/retime.h	/^EXTERN re_graph *re_graph_alloc ARGS((void));$/;"	p	signature:(void)
re_graph_dup	sis_header/retime.h	/^EXTERN re_graph *re_graph_dup ARGS((re_graph *));$/;"	p	signature:(re_graph *)
re_graph_free	sis_header/retime.h	/^EXTERN void re_graph_free ARGS((re_graph *));$/;"	p	signature:(re_graph *)
re_host_vertex	sis_header/retime.h	78;"	d
re_ignore_edge	sis_header/retime.h	81;"	d
re_ignore_node	sis_header/retime.h	80;"	d
re_latch_id_t	sis_header/retime.h	/^typedef struct re_latch_id re_latch_id_t;$/;"	t	typeref:struct:re_latch_id
re_latch_t	sis_header/retime.h	/^struct re_latch_t {$/;"	s
re_latch_t::latch	sis_header/retime.h	/^    struct latch_struct *latch;     \/* Reference to the latch in the network *\/$/;"	m	struct:re_latch_t	typeref:struct:re_latch_t::latch_struct	access:public
re_latch_t::value	sis_header/retime.h	/^    int value;		\/* initial value generated by the init_states *\/$/;"	m	struct:re_latch_t	access:public
re_max_fanin_weight	sis_header/retime.h	/^EXTERN int re_max_fanin_weight ARGS((re_node *));$/;"	p	signature:(re_node *)
re_max_fanout_weight	sis_header/retime.h	/^EXTERN int re_max_fanout_weight ARGS((re_node *));$/;"	p	signature:(re_node *)
re_min_fanin_weight	sis_header/retime.h	/^EXTERN int re_min_fanin_weight ARGS((re_node *));$/;"	p	signature:(re_node *)
re_min_fanout_weight	sis_header/retime.h	/^EXTERN int re_min_fanout_weight ARGS((re_node *));$/;"	p	signature:(re_node *)
re_node	sis_header/retime.h	/^struct re_node {$/;"	s
re_node	sis_header/retime.h	/^typedef struct re_node re_node;$/;"	t	typeref:struct:re_node
re_node::fanins	sis_header/retime.h	/^    array_t *fanins;		\/* fanin edges of node (typed re_edge *) *\/$/;"	m	struct:re_node	access:public
re_node::fanouts	sis_header/retime.h	/^    array_t *fanouts;		\/* fanout edges of node (typed re_edge *) *\/$/;"	m	struct:re_node	access:public
re_node::final_area	sis_header/retime.h	/^    double final_area;		\/* area target for final implementation *\/$/;"	m	struct:re_node	access:public
re_node::final_delay	sis_header/retime.h	/^    double final_delay;		\/* delay target for final implementation *\/$/;"	m	struct:re_node	access:public
re_node::id	sis_header/retime.h	/^    int id;			\/* reference id for direct access *\/$/;"	m	struct:re_node	access:public
re_node::lp_index	sis_header/retime.h	/^    int lp_index;		\/* Index of variable in lp formulation *\/$/;"	m	struct:re_node	access:public
re_node::node	sis_header/retime.h	/^    node_t *node;		\/* pointer to the corresponding mis node *\/$/;"	m	struct:re_node	access:public
re_node::scaled_delay	sis_header/retime.h	/^    int scaled_delay;		\/* integral value of delay -- scaled *\/$/;"	m	struct:re_node	access:public
re_node::scaled_user_time	sis_header/retime.h	/^    int scaled_user_time;	\/* Integral value of specification -- scaled *\/$/;"	m	struct:re_node	access:public
re_node::type	sis_header/retime.h	/^    re_node_type type;		\/* type of node *\/$/;"	m	struct:re_node	access:public
re_node::user_time	sis_header/retime.h	/^    double user_time;		\/* Constraint on inputs and outputs wrt clock *\/$/;"	m	struct:re_node	access:public
re_node_backward_retimable	sis_header/retime.h	/^EXTERN int re_node_backward_retimable ARGS((re_node *));$/;"	p	signature:(re_node *)
re_node_forward_retimable	sis_header/retime.h	/^EXTERN int re_node_forward_retimable ARGS((re_node *));$/;"	p	signature:(re_node *)
re_node_retimable	sis_header/retime.h	/^EXTERN int re_node_retimable ARGS((re_node *));$/;"	p	signature:(re_node *)
re_node_type	sis_header/retime.h	/^enum re_node_type {$/;"	g
re_node_type	sis_header/retime.h	/^typedef enum re_node_type re_node_type;$/;"	t	typeref:enum:re_node_type
re_num_edges	sis_header/retime.h	72;"	d
re_num_fanins	sis_header/retime.h	75;"	d
re_num_fanouts	sis_header/retime.h	76;"	d
re_num_internals	sis_header/retime.h	84;"	d
re_num_nodes	sis_header/retime.h	71;"	d
re_num_primary_inputs	sis_header/retime.h	73;"	d
re_num_primary_outputs	sis_header/retime.h	74;"	d
re_sum_node_area	sis_header/retime.h	/^EXTERN double re_sum_node_area ARGS((re_graph *));$/;"	p	signature:(re_graph *)
re_sum_of_edge_weight	sis_header/retime.h	/^EXTERN int re_sum_of_edge_weight ARGS((re_graph *));$/;"	p	signature:(re_graph *)
re_total_area	sis_header/retime.h	/^EXTERN double re_total_area ARGS((re_graph *, double));$/;"	p	signature:(re_graph *, double)
reached_sets	sis_header/atpg.h	/^    array_t *reached_sets;$/;"	m	struct:__anon37	access:public
read_blif	sis_header/io.h	/^EXTERN int read_blif ARGS((FILE *, network_t **));$/;"	p	signature:(FILE *, network_t **)
read_blif_bnet	sis_interface.cpp	/^BNetwork *read_blif_bnet(char *filename) {$/;"	f	signature:(char *filename)
read_blif_bnet	sis_interface.h	/^BNetwork *read_blif_bnet(char *filename);$/;"	p	signature:(char *filename)
read_cube	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN void read_cube ARGS((FILE *, pPLA));$/;"	p	signature:(FILE *, pPLA)
read_eqn	sis_header/io.h	/^EXTERN network_t *read_eqn ARGS((FILE *));$/;"	p	signature:(FILE *)
read_eqn_string	sis_header/io.h	/^EXTERN network_t *read_eqn_string ARGS((char *));$/;"	p	signature:(char *)
read_error	sis_header/io.h	/^EXTERN void read_error ();$/;"	p	signature:()
read_kiss	sis_header/io.h	/^EXTERN int read_kiss ARGS((FILE *, graph_t **));$/;"	p	signature:(FILE *, graph_t **)
read_pla	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN int read_pla ARGS((FILE *, bool, bool, int, pPLA *));$/;"	p	signature:(FILE *, bool, bool, int, pPLA *)
read_register_filename	sis_header/io.h	/^EXTERN void read_register_filename ARGS((char *));$/;"	p	signature:(char *)
read_slif	sis_header/io.h	/^EXTERN network_t *read_slif ARGS((FILE *));$/;"	p	signature:(FILE *)
read_symbolic	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN int read_symbolic ARGS((FILE *, pPLA, char *, symbolic_t **));$/;"	p	signature:(FILE *, pPLA, char *, symbolic_t **)
real_filename	sis_header/atpg.h	/^    char *real_filename;$/;"	m	struct:__anon32	access:public
real_pi_bdds	sis_header/atpg.h	/^    array_t *real_pi_bdds;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
real_po_values	sis_header/atpg.h	/^    unsigned *real_po_values;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
realloc	sis_header/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
realloc	sis_header/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
realloc	util/util.h	/^extern char *malloc(), *realloc(), *calloc();$/;"	p	signature:()
realloc	util/util.h	/^extern void *malloc(), *realloc(), *calloc();$/;"	p	signature:()
record	sis_header/st.h	/^    char *record;$/;"	m	struct:st_table_entry	access:public
record_reset_state	sis_header/atpg.h	/^extern void record_reset_state();$/;"	p	signature:()
recur	util/test-restart.c	/^recur(cnt)$/;"	f
reduce	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN pcover reduce ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
reduce_cube	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN pcube reduce_cube ARGS((pcube *, pcube));$/;"	p	signature:(pcube *, pcube)
reduce_seeds	sis_header/enc.h	/^extern dic_family_t     *reduce_seeds();$/;"	p	signature:()
redund_table	sis_header/atpg.h	/^    st_table *redund_table;$/;"	m	struct:__anon35	access:public
redund_type	sis_header/atpg.h	/^  redund_type_t redund_type;	\/* Used in redundancy removal.  $/;"	m	struct:fault_struct	access:public
redund_type_enum	sis_header/atpg.h	/^enum redund_type_enum {$/;"	g
redund_type_t	sis_header/atpg.h	/^typedef enum redund_type_enum redund_type_t;$/;"	t	typeref:enum:redund_type_enum
redundant_faults	sis_header/atpg.h	/^    lsList redundant_faults;$/;"	m	struct:__anon35	access:public
remove	array.h	/^	T& remove(); \/\/ remove the item at the end$/;"	p	class:Array	access:public	signature:()
remove	array.h	/^	T& remove(int idx); \/\/ remove the item at index i$/;"	p	class:Array	access:public	signature:(int idx)
remove	array.h	/^inline T& Array<T>::remove() {$/;"	f	class:Array	signature:()
remove	array.h	/^inline T& Array<T>::remove(int idx) {$/;"	f	class:Array	signature:(int idx)
removeEdge	graph.h	/^	void removeEdge(Edge<NP, EP> &edge);$/;"	p	class:Graph	access:public	signature:(Edge<NP, EP> &edge)
removeEdge	graph.h	/^	void removeEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
removeEdge	graph.h	/^	void removeEdge(char *faninName, char *fanoutName);$/;"	p	class:Graph	access:public	signature:(char *faninName, char *fanoutName)
removeEdge	graph.h	/^	void removeEdge(string &faninName, string &fanoutName);$/;"	p	class:Graph	access:public	signature:(string &faninName, string &fanoutName)
removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(Edge<NP, EP> &edge) {$/;"	f	class:Graph	signature:(Edge<NP, EP> &edge)
removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(Node<NP, EP> *fanin, Node<NP, EP> *fanout) {$/;"	f	class:Graph	signature:(Node<NP, EP> *fanin, Node<NP, EP> *fanout)
removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(char *faninName, char *fanoutName) {$/;"	f	class:Graph	signature:(char *faninName, char *fanoutName)
removeEdge	graph.h	/^inline void Graph<GP, NP, EP>::removeEdge(string &faninName, string &fanoutName) {$/;"	f	class:Graph	signature:(string &faninName, string &fanoutName)
removeFanin	node.h	/^	void removeFanin(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
removeFanin	node.h	/^inline void Node<NP, EP>::removeFanin(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
removeFanout	node.h	/^	void removeFanout(Node<NP, EP> *node);$/;"	p	class:Node	access:public	signature:(Node<NP, EP> *node)
removeFanout	node.h	/^inline void Node<NP, EP>::removeFanout(Node<NP, EP> *node) {$/;"	f	class:Node	signature:(Node<NP, EP> *node)
removeNode	bnetwork.h	/^	void removeNode(BNode *node);$/;"	p	class:BNetwork	access:public	signature:(BNode *node)
removeNode	bnetwork.h	/^	void removeNode(char *name);$/;"	p	class:BNetwork	access:public	signature:(char *name)
removeNode	bnetwork.h	/^	void removeNode(string &name); \/\/ remove the node with "name" from the graph$/;"	p	class:BNetwork	access:public	signature:(string &name)
removeNode	bnetwork.h	/^inline void BNetwork::removeNode(BNode *node) {$/;"	f	class:BNetwork	signature:(BNode *node)
removeNode	bnetwork.h	/^inline void BNetwork::removeNode(char *name) {$/;"	f	class:BNetwork	signature:(char *name)
removeNode	bnetwork.h	/^inline void BNetwork::removeNode(string &name) {$/;"	f	class:BNetwork	signature:(string &name)
removeNode	graph.h	/^	void removeNode(Node<NP, EP> *node);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *node)
removeNode	graph.h	/^	void removeNode(char *name);$/;"	p	class:Graph	access:public	signature:(char *name)
removeNode	graph.h	/^	void removeNode(string &name); \/\/ remove the node with "name" from the graph$/;"	p	class:Graph	access:public	signature:(string &name)
removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(Node<NP, EP> *node) {$/;"	f	class:Graph	signature:(Node<NP, EP> *node)
removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(char *name) {$/;"	f	class:Graph	signature:(char *name)
removeNode	graph.h	/^inline void Graph<GP, NP, EP>::removeNode(string &name) {$/;"	f	class:Graph	signature:(string &name)
removeWire	bnetwork.h	236;"	d
rename	node.h	/^	void rename(char *newName);$/;"	p	class:Node	access:public	signature:(char *newName)
rename	node.h	/^	void rename(string &newName);$/;"	p	class:Node	access:public	signature:(string &newName)
rename	node.h	/^inline void Node<NP, EP>::rename(char *newName) {};$/;"	f	class:Node	signature:(char *newName)
rename	node.h	/^inline void Node<NP, EP>::rename(string &newName) {};$/;"	f	class:Node	signature:(string &newName)
renameNode	graph.h	/^	void renameNode(Node<NP, EP> *node, string &newName);$/;"	p	class:Graph	access:public	signature:(Node<NP, EP> *node, string &newName)
renameNode	graph.h	/^	void renameNode(char *oldName, char *newName); \/\/ rename the node$/;"	p	class:Graph	access:public	signature:(char *oldName, char *newName)
renameNode	graph.h	/^	void renameNode(string &oldName, string &newName);$/;"	p	class:Graph	access:public	signature:(string &oldName, string &newName)
renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(Node<NP, EP> *node, string &newName) {$/;"	f	class:Graph	signature:(Node<NP, EP> *node, string &newName)
renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(char *oldName, char *newName) {$/;"	f	class:Graph	signature:(char *oldName, char *newName)
renameNode	graph.h	/^void Graph<GP, NP, EP>::renameNode(string &oldName, string &newName) {$/;"	f	class:Graph	signature:(string &oldName, string &newName)
reorder_flag	sis_header/st.h	/^    int reorder_flag;$/;"	m	struct:st_table	access:public
repeated_phase_assignment	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN void repeated_phase_assignment ARGS((pPLA));$/;"	p	signature:(pPLA)
report_elapsed_time	sis_header/seqbdd.h	/^extern void report_elapsed_time(\/* verif_options_t *options, char *string *\/);$/;"	p	signature:( )
report_inconsistency	sis_header/seqbdd.h	/^extern void report_inconsistency();$/;"	p	signature:()
req	sis_header/speed.h	/^    delay_time_t req;	       \/* Req time of the destination *\/$/;"	m	struct:sp_fanout_struct	access:public
resetFanoutConeMark	rewire.cpp	/^static inline void resetFanoutConeMark(Array<BNode *> &fanoutMarkedNodes) {$/;"	f	file:	signature:(Array<BNode *> &fanoutMarkedNodes)
resetNodeFlag	imply.cpp	/^inline void resetNodeFlag(int mask, Array<IGNode *> &markedNodes, int flag) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes, int flag)
resetNodeFlag	imply.noforced.cpp	/^inline void resetNodeFlag(int mask, Array<IGNode *> &markedNodes, int flag) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes, int flag)
resetNodeMark	imply.cpp	/^inline void resetNodeMark(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
resetNodeMark	imply.noforced.cpp	/^inline void resetNodeMark(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
reset_state	sis_header/atpg.h	/^    unsigned *reset_state;		\/* reset state used in faultsim *\/$/;"	m	struct:__anon36	access:public
reset_word_vectors	sis_header/atpg.h	/^extern void reset_word_vectors();$/;"	p	signature:()
resize	array.h	/^	void resize(int newsize);$/;"	p	class:Array	access:private	signature:(int newsize)
resize	array.h	/^inline void Array<T>::resize(int newsize) {$/;"	f	class:Array	signature:(int newsize)
resize_at	sis_header/bdd.h	/^        unsigned int resize_at;       \/* percentage at which to resize (e.g. 85% is 85); doesn't apply to adhoc *\/$/;"	m	struct:bdd_mgr_init::__anon16	access:public
restart_global_flag	util/restart.c	/^static int restart_global_flag;$/;"	v	file:
restart_program	util/restart.c	/^restart_program()$/;"	f	file:
restore_cube_struct	sis_header/espresso.h	/^\/* cubestr.c *\/	EXTERN void restore_cube_struct ARGS(());$/;"	p	signature:()
resub_alge_network	sis_header/resub.h	/^EXTERN void resub_alge_network ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
resub_alge_node	sis_header/resub.h	/^EXTERN int resub_alge_node ARGS((node_t *, int));$/;"	p	signature:(node_t *, int)
resub_bool_network	sis_header/resub.h	/^EXTERN void resub_bool_network ARGS((network_t *));$/;"	p	signature:(network_t *)
resub_bool_node	sis_header/resub.h	/^EXTERN void resub_bool_node ARGS((node_t *));$/;"	p	signature:(node_t *)
retime_graph	sis_header/retime.h	/^EXTERN int retime_graph$/;"	p	signature:(network_t *, re_graph *, double, double, double, double, double *, int, int, int, int *)
retime_graph_interface	sis_header/retime.h	/^EXTERN int retime_graph_interface$/;"	p	signature:(re_graph *, double, double, double, double, double *)
retime_graph_to_network	sis_header/retime.h	/^EXTERN network_t *retime_graph_to_network ARGS((re_graph *, int));$/;"	p	signature:(re_graph *, int)
retime_is_network_retimable	sis_header/retime.h	/^EXTERN int retime_is_network_retimable ARGS((network_t *));$/;"	p	signature:(network_t *)
retime_network_to_graph	sis_header/retime.h	/^EXTERN re_graph *retime_network_to_graph ARGS((network_t *, int, int));$/;"	p	signature:(network_t *, int, int)
returns	sis_header/bdd.h	/^	} returns;$/;"	m	struct:bdd_stats::__anon22	typeref:struct:bdd_stats::__anon22::__anon23	access:public
reverse_fault_sim	sis_header/atpg.h	/^    bool reverse_fault_sim;$/;"	m	struct:__anon32	access:public
reverse_fault_sim	sis_header/atpg.h	/^    long reverse_fault_sim;$/;"	m	struct:__anon33	access:public
reverse_fault_simulate	sis_header/atpg.h	/^extern void reverse_fault_simulate();$/;"	p	signature:()
rewind	sis_header/util.h	/^extern VOID_HACK rewind();$/;"	p	signature:()
rewind	util/util.h	/^extern VOID_HACK rewind();$/;"	p	signature:()
rewireAssignCWSensitizeValue	rewire.cpp	/^static inline int rewireAssignCWSensitizeValue(BNode *dst, Array<IGNode *> &markedNodes) {$/;"	f	file:	signature:(BNode *dst, Array<IGNode *> &markedNodes)
rewireAssignControlValue	rewire.cpp	/^static inline void rewireAssignControlValue(BNode *src, BNode *dst, int stucktype, Array<IGNode *> &markedNodes){$/;"	f	file:	signature:(BNode *src, BNode *dst, int stucktype, Array<IGNode *> &markedNodes)
rewireAssignSensitizeValue	rewire.cpp	/^static inline int rewireAssignSensitizeValue(BNode *src, BNode *dst, Array<IGNode *> &markedNodes) {$/;"	f	file:	signature:(BNode *src, BNode *dst, Array<IGNode *> &markedNodes)
rewireClearFlag	rewire.cpp	/^static inline void rewireClearFlag(Array<BNode *> &markedNodes, int flag) {$/;"	f	file:	signature:(Array<BNode *> &markedNodes, int flag)
rewireEndImply	rewire.cpp	/^void rewireEndImply() {$/;"	f	signature:()
rewireEndImply	rewire.h	/^void rewireEndImply();$/;"	p	signature:()
rewireFindAW	rewire.cpp	/^int rewireFindAW(BNode *twSrc, BNode *twDst, int rlevel, Array<RewireAW> &aw) {$/;"	f	signature:(BNode *twSrc, BNode *twDst, int rlevel, Array<RewireAW> &aw)
rewireFindAW	rewire.h	/^int rewireFindAW(BNode *twSrc, BNode *twDst, int rlevel, Array<RewireAW> &aw);$/;"	p	signature:(BNode *twSrc, BNode *twDst, int rlevel, Array<RewireAW> &aw)
rewireMarkFanoutCone	rewire.cpp	/^static void rewireMarkFanoutCone(BNode *node, Array<BNode *> &fanoutMarkedNodes) {$/;"	f	file:	signature:(BNode *node, Array<BNode *> &fanoutMarkedNodes)
rewireTestCWDst	rewire.cpp	/^static inline int rewireTestCWDst(BNode *dst, BNodeType function, Array<IGNode *> &markedNodes, int r) {$/;"	f	file:	signature:(BNode *dst, BNodeType function, Array<IGNode *> &markedNodes, int r)
rewireTestCWDstEnd	rewire.cpp	/^static inline void rewireTestCWDstEnd(BNode *dst, BNodeType function) {$/;"	f	file:	signature:(BNode *dst, BNodeType function)
rewireTestCWSrc	rewire.cpp	/^static inline int rewireTestCWSrc(BNode *src, int stucktype, Array<IGNode *> &markedNodes, int r) {$/;"	f	file:	signature:(BNode *src, int stucktype, Array<IGNode *> &markedNodes, int r)
rewireTestStuckFault	rewire.cpp	/^static inline int rewireTestStuckFault(BNode *src, BNode *dst, int stucktype, Array<IGNode *> &markedNodes, Array<BNode *> &omaMarkedNodes, Array<BNode *> &nomaMarkedNodes, int r) {$/;"	f	file:	signature:(BNode *src, BNode *dst, int stucktype, Array<IGNode *> &markedNodes, Array<BNode *> &omaMarkedNodes, Array<BNode *> &nomaMarkedNodes, int r)
rewire_aw_t	rewire_c.h	/^} rewire_aw_t;$/;"	t	typeref:struct:__anon1
rewire_end	rewire_c.cpp	/^extern "C" void rewire_end() {$/;"	f	signature:()
rewire_end	rewire_c.h	/^void rewire_end();$/;"	p	signature:()
rewire_find_aw	rewire_c.cpp	/^extern "C" int rewire_find_aw(node_t *twsrc, node_t *twdst, int rlevel, array_t *aw) {$/;"	f	signature:(node_t *twsrc, node_t *twdst, int rlevel, array_t *aw)
rewire_find_aw	rewire_c.h	/^int rewire_find_aw(node_t *twsrc, node_t *twdst, int rlevel, array_t *aw);$/;"	p	signature:(node_t *twsrc, node_t *twdst, int rlevel, array_t *aw)
rewire_network_change	rewire_c.cpp	/^extern "C" void rewire_network_change(network_t *network) {$/;"	f	signature:(network_t *network)
rewire_network_change	rewire_c.h	/^void rewire_network_change(network_t *network);$/;"	p	signature:(network_t *network)
rhs_dic	sis_header/enc.h	21;"	d
right	sis_header/avl.h	/^    avl_node *left, *right;$/;"	m	struct:avl_node_struct	access:public
rise	sis_header/delay.h	/^    double rise;$/;"	m	struct:time_struct	access:public
rlearnImply_	imply.cpp	/^static int rlearnImply_(IGNode *node, int r, unsigned int mask, Array<IGNode *> &markedNodes) {$/;"	f	file:	signature:(IGNode *node, int r, unsigned int mask, Array<IGNode *> &markedNodes)
rlearnImply_	imply.noforced.cpp	/^static int rlearnImply_(IGNode *node, int r, unsigned int mask, Array<IGNode *> &markedNodes) {$/;"	f	file:	signature:(IGNode *node, int r, unsigned int mask, Array<IGNode *> &markedNodes)
rm2_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int rm2_contain ARGS((pset *, pset *));$/;"	p	signature:(pset *, pset *)
rm2_equal	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int rm2_equal ARGS((pset *, pset *, pset *, ESP_PFI));$/;"	p	signature:(pset *, pset *, pset *, ESP_PFI)
rm_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int rm_contain ARGS((pset *));$/;"	p	signature:(pset *)
rm_equal	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int rm_equal ARGS((pset *, ESP_PFI));$/;"	p	signature:(pset *, ESP_PFI)
rm_rev_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN int rm_rev_contain ARGS((pset *));$/;"	p	signature:(pset *)
root	sis_header/avl.h	/^    avl_node *root;$/;"	m	struct:avl_tree_struct	access:public
root	sis_header/speed.h	/^    node_t *root;	       \/* root node of the buffering problem *\/$/;"	m	struct:buffer_alg_input_struct	access:public
row_num	sis_header/sparse.h	/^    int row_num;		\/* row number of this element *\/$/;"	m	struct:sm_element_struct	access:public
row_num	sis_header/sparse.h	/^    int row_num;		\/* the row number *\/$/;"	m	struct:sm_row_struct	access:public
rows	sis_header/sparse.h	/^    sm_row **rows;		\/* pointer to row headers (by row #) *\/$/;"	m	struct:sm_matrix_struct	access:public
rows_size	sis_header/sparse.h	/^    int rows_size;		\/* alloc'ed size of above array *\/$/;"	m	struct:sm_matrix_struct	access:public
rtg	sis_header/atpg.h	/^    bool rtg;$/;"	m	struct:__anon32	access:public
rtg_depth	sis_header/atpg.h	/^    int rtg_depth;$/;"	m	struct:__anon32	access:public
runtime	sis_header/bdd.h	/^        long runtime;           \/* cumulative CPU time spent garbage collecting *\/$/;"	m	struct:bdd_stats::__anon27	access:public
s_type	sis_header/retime.h	/^    enum latch_synch_enum s_type;	\/* Synchronization type of design *\/$/;"	m	struct:re_graph	typeref:enum:re_graph::latch_synch_enum	access:public
sat_add_1clause	sis_header/sat.h	16;"	d
sat_add_2clause	sis_header/sat.h	17;"	d
sat_add_3clause	sis_header/sat.h	20;"	d
sat_add_implication	sis_header/sat.h	/^extern bool sat_add_implication();$/;"	p	signature:()
sat_add_literal	sis_header/sat.h	15;"	d
sat_begin_clause	sis_header/sat.h	14;"	d
sat_delete	sis_header/sat.h	/^extern void sat_delete();$/;"	p	signature:()
sat_fanout_dfs_sort	sis_header/atpg.h	/^extern node_t **sat_fanout_dfs_sort();$/;"	p	signature:()
sat_get_value	sis_header/sat.h	/^extern int sat_get_value();$/;"	p	signature:()
sat_id	sis_header/sat.h	/^    int sat_id;$/;"	m	struct:__anon6	access:public
sat_input_t	sis_header/sat.h	/^} sat_input_t;$/;"	t	typeref:struct:__anon6
sat_input_vars	sis_header/atpg.h	/^    array_t *sat_input_vars;		\/* pi's used in sat call *\/$/;"	m	struct:__anon36	access:public
sat_neg	sis_header/sat.h	13;"	d
sat_new	sis_header/sat.h	/^extern sat_t *sat_new();$/;"	p	signature:()
sat_new_variable	sis_header/sat.h	/^extern int sat_new_variable();$/;"	p	signature:()
sat_red	sis_header/atpg.h	/^    int sat_red;$/;"	m	struct:__anon34	access:public
sat_reset	sis_header/sat.h	/^extern void sat_reset();$/;"	p	signature:()
sat_result	sis_header/sat.h	/^typedef enum sat_result {$/;"	g
sat_result_t	sis_header/sat.h	/^} sat_result_t;$/;"	t	typeref:enum:sat_result
sat_solve	sis_header/sat.h	/^extern sat_result_t sat_solve();$/;"	p	signature:()
sat_strategy_t	sis_header/sat.h	/^} sat_strategy_t;$/;"	t	typeref:struct:__anon4
sat_t	sis_header/sat.h	/^} sat_t;$/;"	t	typeref:struct:__anon5
save_cube_struct	sis_header/espresso.h	/^\/* cubestr.c *\/	EXTERN void save_cube_struct ARGS(());$/;"	p	signature:()
save_stack_base	util/restart.c	/^static char *save_stack_base;$/;"	v	file:
sbrk	util/restart.c	/^extern char *sbrk();$/;"	p	file:
sbrk	util/saveimage.c	/^extern char *sbrk();$/;"	p	file:
scaled_delay	sis_header/retime.h	/^    int scaled_delay;		\/* integral value of delay -- scaled *\/$/;"	m	struct:re_node	access:public
scaled_user_time	sis_header/retime.h	/^    int scaled_user_time;	\/* Integral value of specification -- scaled *\/$/;"	m	struct:re_node	access:public
scan	util/getopt.c	/^static char *scan;$/;"	v	file:
sccc	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN pcube sccc ARGS((pcube *));$/;"	p	signature:(pcube *)
sccc_cube	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN pcube sccc_cube ARGS((pcube, pcube));$/;"	p	signature:(pcube, pcube)
sccc_merge	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN pcube sccc_merge ARGS((pcube, pcube, pcube, pcube));$/;"	p	signature:(pcube, pcube, pcube, pcube)
sccc_special_cases	sis_header/espresso.h	/^\/* reduce.c *\/	EXTERN bool sccc_special_cases ARGS((pcube *, pcube *));$/;"	p	signature:(pcube *, pcube *)
scofactor	sis_header/espresso.h	/^\/* cofactor.c *\/	EXTERN pcube *scofactor ARGS((pcube *, pcube, int));$/;"	p	signature:(pcube *, pcube, int)
select_feasible	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void select_feasible ARGS((pcover, pcover,$/;"	p	signature:(pcover, pcover, pcube, pcube, pcube, int *)
seq	sis_header/atpg.h	/^    bool seq;				\/* false if the circuit has no latches *\/$/;"	m	struct:__anon35	access:public
seq_derive_excitation_states	sis_header/atpg.h	/^extern bdd_t *seq_derive_excitation_states();$/;"	p	signature:()
seq_fault_free_propagate	sis_header/atpg.h	/^extern int seq_fault_free_propagate();$/;"	p	signature:()
seq_get_one_minterm	sis_header/atpg.h	/^extern bdd_t *seq_get_one_minterm();$/;"	p	signature:()
seq_info_free	sis_header/atpg.h	/^extern void seq_info_free();$/;"	p	signature:()
seq_info_product_free	sis_header/atpg.h	/^extern void seq_info_product_free();$/;"	p	signature:()
seq_info_t	sis_header/atpg.h	/^} seq_info_t;$/;"	t	typeref:struct:__anon37
seq_opt	sis_header/atpg.h	/^    verif_options_t *seq_opt;$/;"	m	struct:__anon37	access:public
seq_product_opt	sis_header/atpg.h	/^    verif_options_t *seq_product_opt;$/;"	m	struct:__anon37	access:public
seq_product_setup	sis_header/atpg.h	/^extern void seq_product_setup();$/;"	p	signature:()
seq_reuse_just_sequence	sis_header/atpg.h	/^extern int seq_reuse_just_sequence();$/;"	p	signature:()
seq_reuse_prop_sequence	sis_header/atpg.h	/^extern int seq_reuse_prop_sequence();$/;"	p	signature:()
seq_setup	sis_header/atpg.h	/^extern void seq_setup();$/;"	p	signature:()
seq_single_sequence_simulate	sis_header/atpg.h	/^extern lsList seq_single_sequence_simulate();$/;"	p	signature:()
seq_state_justify	sis_header/atpg.h	/^extern int seq_state_justify();$/;"	p	signature:()
seq_verify_interface	sis_header/seqbdd.h	/^extern int seq_verify_interface();$/;"	p	signature:()
seqbdd_check_f	sis_header/seqbdd.h	/^typedef int seqbdd_check_f ARGS((bdd_t *, range_data_t *, int *, verif_options_t *));$/;"	t
seqbdd_extract_input_sequence	sis_header/seqbdd.h	/^extern int seqbdd_extract_input_sequence();$/;"	p	signature:()
seqbdd_free_f	sis_header/seqbdd.h	/^typedef void seqbdd_free_f ARGS((range_data_t *, verif_options_t *));$/;"	t
seqbdd_next_f	sis_header/seqbdd.h	/^typedef bdd_t *seqbdd_next_f ARGS((bdd_t *, range_data_t *, verif_options_t *));$/;"	t
seqbdd_range_f	sis_header/seqbdd.h	/^typedef range_data_t *seqbdd_range_f ARGS((network_t *, verif_options_t *));$/;"	t
seqbdd_reverse_f	sis_header/seqbdd.h	/^typedef bdd_t *seqbdd_reverse_f ARGS((bdd_t *, range_data_t *, verif_options_t *));$/;"	t
seqbdd_sizes_f	sis_header/seqbdd.h	/^typedef void seqbdd_sizes_f ARGS((range_data_t *, int *, int *));$/;"	t
sequence	sis_header/atpg.h	/^  sequence_t	*sequence;	\/* which sequence covers fault *\/$/;"	m	struct:fault_struct	access:public
sequence_index	sis_header/atpg.h	/^  int           sequence_index;	\/* which sequence detects fault, $/;"	m	struct:fault_struct	access:public
sequence_t	sis_header/atpg.h	/^} sequence_t;$/;"	t	typeref:struct:__anon31
sequence_table	sis_header/atpg.h	/^    st_table *sequence_table;		\/* test sequences *\/$/;"	m	struct:__anon35	access:public
set_adjcnt	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void set_adjcnt ARGS((pset, int *, int));$/;"	p	signature:(pset, int *, int)
set_and	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_and ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
set_andp	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool set_andp ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
set_atpg_options	sis_header/atpg.h	/^extern int set_atpg_options();$/;"	p	signature:()
set_clear	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_clear ARGS((pset, int));$/;"	p	signature:(pset, int)
set_copy	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_copy ARGS((pset, pset));$/;"	p	signature:(pset, pset)
set_diff	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_diff ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
set_dist	sis_header/espresso.h	/^\/* set.c *\/	EXTERN int set_dist ARGS((pset, pset));$/;"	p	signature:(pset, pset)
set_family	sis_header/espresso.h	/^typedef struct set_family {$/;"	s
set_family::active_count	sis_header/espresso.h	/^    int active_count;           \/* Number of "active" sets *\/$/;"	m	struct:set_family	access:public
set_family::capacity	sis_header/espresso.h	/^    int capacity;               \/* Number of sets allocated *\/$/;"	m	struct:set_family	access:public
set_family::count	sis_header/espresso.h	/^    int count;                  \/* The number of sets in the family *\/$/;"	m	struct:set_family	access:public
set_family::data	sis_header/espresso.h	/^    pset data;                  \/* Pointer to the set data *\/$/;"	m	struct:set_family	access:public
set_family::next	sis_header/espresso.h	/^    struct set_family *next;    \/* For garbage collection *\/$/;"	m	struct:set_family	typeref:struct:set_family::set_family	access:public
set_family::sf_size	sis_header/espresso.h	/^    int sf_size;                \/* User declared set size *\/$/;"	m	struct:set_family	access:public
set_family::wsize	sis_header/espresso.h	/^    int wsize;                  \/* Size of each set in 'ints' *\/$/;"	m	struct:set_family	access:public
set_family_t	sis_header/espresso.h	/^} set_family_t, *pset_family;$/;"	t	typeref:struct:set_family
set_fill	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_fill ARGS((pset, int));$/;"	p	signature:(pset, int)
set_free	sis_header/espresso.h	159;"	d
set_full	sis_header/espresso.h	157;"	d
set_info_t	sis_header/seqbdd.h	/^} set_info_t;$/;"	t	typeref:struct:__anon11
set_insert	sis_header/espresso.h	164;"	d
set_merge	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_merge ARGS((pset, pset, pset, pset));$/;"	p	signature:(pset, pset, pset, pset)
set_new	sis_header/espresso.h	156;"	d
set_or	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_or ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
set_ord	sis_header/espresso.h	/^\/* set.c *\/	EXTERN int set_ord ARGS((pset));$/;"	p	signature:(pset)
set_orp	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool set_orp ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
set_pair	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN void set_pair ARGS((pPLA));$/;"	p	signature:(pPLA)
set_pair1	sis_header/espresso.h	/^\/* pair.c *\/	EXTERN void set_pair1 ARGS((pPLA, bool));$/;"	p	signature:(pPLA, bool)
set_phase	sis_header/espresso.h	/^\/* opo.c *\/	EXTERN pPLA set_phase ARGS((pPLA));$/;"	p	signature:(pPLA)
set_remove	sis_header/espresso.h	163;"	d
set_save	sis_header/espresso.h	158;"	d
set_write	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void set_write ARGS((FILE *, pset));$/;"	p	signature:(FILE *, pset)
set_xor	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset set_xor ARGS((pset, pset, pset));$/;"	p	signature:(pset, pset, pset)
setdown_cube	sis_header/espresso.h	/^\/* cubestr.c *\/	EXTERN void setdown_cube ARGS(());$/;"	p	signature:()
setp_disjoint	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool setp_disjoint ARGS((pset, pset));$/;"	p	signature:(pset, pset)
setp_empty	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool setp_empty ARGS((pset));$/;"	p	signature:(pset)
setp_equal	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool setp_equal ARGS((pset, pset));$/;"	p	signature:(pset, pset)
setp_full	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool setp_full ARGS((pset, int));$/;"	p	signature:(pset, int)
setp_implies	sis_header/espresso.h	/^\/* set.c *\/	EXTERN bool setp_implies ARGS((pset, pset));$/;"	p	signature:(pset, pset)
sets	sis_header/seqbdd.h	/^  var_set_t **sets;$/;"	m	struct:__anon11	access:public
setup	sis_header/atpg.h	/^    long setup;$/;"	m	struct:__anon33	access:public
setup	sis_header/library.h	/^  double setup;$/;"	m	struct:latch_time_struct	access:public
setup_BB_CC	sis_header/espresso.h	/^\/* expand.c *\/	EXTERN void setup_BB_CC ARGS((pcover, pcover));$/;"	p	signature:(pcover, pcover)
sf_active	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_active ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_addcol	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_addcol ARGS((pset_family, int, int));$/;"	p	signature:(pset_family, int, int)
sf_addset	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_addset ARGS((pset_family, pset));$/;"	p	signature:(pset_family, pset)
sf_and	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset sf_and ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_append	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_append ARGS((pset_family, pset_family));$/;"	p	signature:(pset_family, pset_family)
sf_bm_print	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_bm_print ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_bm_read	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_bm_read ARGS((FILE *));$/;"	p	signature:(FILE *)
sf_cleanup	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_cleanup ARGS(());$/;"	p	signature:()
sf_compress	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_compress ARGS((pset_family, pset));$/;"	p	signature:(pset_family, pset)
sf_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_contain ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_copy	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_copy ARGS((pset_family, pset_family));$/;"	p	signature:(pset_family, pset_family)
sf_copy_col	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_copy_col ARGS((pset_family, int,$/;"	p	signature:(pset_family, int, pset_family, int)
sf_count	sis_header/espresso.h	/^\/* set.c *\/	EXTERN int *sf_count ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_count_restricted	sis_header/espresso.h	/^\/* set.c *\/	EXTERN int *sf_count_restricted ARGS((pset_family, pset));$/;"	p	signature:(pset_family, pset)
sf_debug_print	sis_header/espresso.h	/^\/* cvrout.c *\/	EXTERN void sf_debug_print ARGS((pcube *, char *, int));$/;"	p	signature:(pcube *, char *, int)
sf_delc	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_delc ARGS((pset_family, int, int));$/;"	p	signature:(pset_family, int, int)
sf_delcol	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_delcol ARGS((pset_family, int, int));$/;"	p	signature:(pset_family, int, int)
sf_delset	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_delset ARGS((pset_family, int));$/;"	p	signature:(pset_family, int)
sf_dupl	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_dupl ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_free	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_free ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_inactive	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_inactive ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_ind_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_ind_contain ARGS((pset_family, $/;"	p	signature:(pset_family, int *)
sf_ind_unlist	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_ind_unlist ARGS((pset *, int, int,$/;"	p	signature:(pset *, int, int, int *, pset)
sf_join	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_join ARGS((pset_family, pset_family));$/;"	p	signature:(pset_family, pset_family)
sf_list	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset *sf_list ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_merge	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_merge ARGS((pset *, pset *, pset *,$/;"	p	signature:(pset *, pset *, pset *, int, int)
sf_new	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_new ARGS((int, int));$/;"	p	signature:(int, int)
sf_or	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset sf_or ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_permute	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_permute ARGS((pset_family, int *, int));$/;"	p	signature:(pset_family, int *, int)
sf_print	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_print ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_read	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_read ARGS((FILE *));$/;"	p	signature:(FILE *)
sf_rev_contain	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_rev_contain ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_save	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_save ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_size	sis_header/espresso.h	/^    int sf_size;                \/* User declared set size *\/$/;"	m	struct:set_family	access:public
sf_sort	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset *sf_sort ARGS((pset_family, ESP_PFI));$/;"	p	signature:(pset_family, ESP_PFI)
sf_transpose	sis_header/espresso.h	/^\/* set.c *\/	EXTERN pset_family sf_transpose ARGS((pset_family));$/;"	p	signature:(pset_family)
sf_union	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_union ARGS((pset_family, pset_family));$/;"	p	signature:(pset_family, pset_family)
sf_unlist	sis_header/espresso.h	/^\/* contain.c *\/	EXTERN pset_family sf_unlist ARGS((pset *, int, int));$/;"	p	signature:(pset *, int, int)
sf_write	sis_header/espresso.h	/^\/* set.c *\/	EXTERN void sf_write ARGS((FILE *, pset_family));$/;"	p	signature:(FILE *, pset_family)
sharp	sis_header/espresso.h	/^\/* sharp.c *\/	EXTERN pcover sharp ARGS((pcube, pcube));$/;"	p	signature:(pcube, pcube)
short_name	sis_header/node.h	/^    char *short_name;		\/* short name for interactive use *\/$/;"	m	struct:node_struct	access:public
short_name_table	sis_header/network.h	/^    st_table *short_name_table;$/;"	m	struct:network_struct	access:public
sim_accept_enum	sis_header/simplify.h	/^enum sim_accept_enum {$/;"	g
sim_accept_t	sis_header/simplify.h	/^typedef enum sim_accept_enum sim_accept_t;$/;"	t	typeref:enum:sim_accept_enum
sim_dctype_enum	sis_header/simplify.h	/^enum sim_dctype_enum {$/;"	g
sim_dctype_t	sis_header/simplify.h	/^typedef enum sim_dctype_enum sim_dctype_t; $/;"	t	typeref:enum:sim_dctype_enum
sim_file	sis_header/seqbdd.h	/^  char *sim_file;                \/* file to save the simulation vectors in *\/$/;"	m	struct:verif_options_t	access:public
sim_filter_enum	sis_header/simplify.h	/^enum sim_filter_enum {$/;"	g
sim_filter_t	sis_header/simplify.h	/^typedef enum sim_filter_enum sim_filter_t;$/;"	t	typeref:enum:sim_filter_enum
sim_method_enum	sis_header/simplify.h	/^enum sim_method_enum {$/;"	g
sim_method_t	sis_header/simplify.h	/^typedef enum sim_method_enum sim_method_t;$/;"	t	typeref:enum:sim_method_enum
sim_nodes	sis_header/atpg.h	/^    atpg_sim_node_t *sim_nodes;		\/* simulation nodes  *\/$/;"	m	struct:__anon36	access:public
simp_comp	sis_header/espresso.h	/^\/* compl.c *\/	EXTERN void simp_comp ARGS((pcube *, pcover *, pcover *));$/;"	p	signature:(pcube *, pcover *, pcover *)
simp_dc_filter	sis_header/simplify.h	/^extern node_t   *simp_dc_filter();$/;"	p	signature:()
simp_obsdc_filter	sis_header/simplify.h	/^extern node_t *simp_obsdc_filter();$/;"	p	signature:()
simp_obssatdc_filter	sis_header/simplify.h	/^extern node_t *simp_obssatdc_filter();$/;"	p	signature:()
simplify	sis_header/espresso.h	/^\/* compl.c *\/	EXTERN pcover simplify ARGS((pcube *));$/;"	p	signature:(pcube *)
simplify	sis_header/node.h	/^    char *simplify;		\/* reserved for simplify package *\/$/;"	m	struct:node_struct	access:public
simplify_all	sis_header/simplify.h	/^extern void     simplify_all();$/;"	p	signature:()
simplify_node	sis_header/simplify.h	/^extern void     simplify_node();$/;"	p	signature:()
simulate_entire_sequence	sis_header/atpg.h	/^extern void simulate_entire_sequence();$/;"	p	signature:()
simulation	sis_header/node.h	/^    char *simulation;		\/* reserved for simulation package *\/$/;"	m	struct:node_struct	access:public
sink	sis_header/retime.h	/^    struct re_node *sink;	\/* sink node (typed re_node *) *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::re_node	access:public
sink_fanin_id	sis_header/retime.h	/^    int sink_fanin_id;		\/* the fanin id of the sink node *\/$/;"	m	struct:re_edge	access:public
sink_node	sis_header/maxflow.h	/^    mfnptr sink_node;           \/* sink node *\/$/;"	m	struct:MF_GRAPH	access:public
sis_clock_t	sis_header/clock.h	/^typedef struct clock_struct sis_clock_t; $/;"	t	typeref:struct:clock_struct
sis_id	sis_header/node.h	/^    int sis_id;			\/* unique id (used to sort fanin) *\/$/;"	m	struct:node_struct	access:public
sis_library	sis_header/sis.h	/^extern char *sis_library();$/;"	p	signature:()
sis_read_pla	sis_header/io.h	/^EXTERN network_t *sis_read_pla ARGS((FILE *, int));$/;"	p	signature:(FILE *, int)
sis_version	sis_header/sis.h	/^extern char *sis_version();$/;"	p	signature:()
sisnet2BNetwork	rewire_c.cpp	/^BNetwork *sisnet2BNetwork(network_t *net);$/;"	p	file:	signature:(network_t *net)
sisnet2BNetwork	sis_interface.cpp	/^BNetwork *sisnet2BNetwork(network_t *net) {$/;"	f	signature:(network_t *net)
size	array.h	/^	int size; \/\/ occupied size$/;"	m	class:Array	access:public
size	sis_header/espresso.h	/^    int size;                   \/* set size of a cube *\/$/;"	m	struct:cube_struct	access:public
size	sis_header/mtr.h	/^    MtrHalfWord size;$/;"	m	struct:MtrNode	access:public
size_sort	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover size_sort ARGS((pcover));$/;"	p	signature:(pcover)
size_stamp	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void size_stamp ARGS((pcover, char *));$/;"	p	signature:(pcover, char *)
skip_line	sis_header/espresso.h	/^\/* cvrin.c *\/	EXTERN void skip_line ARGS((FILE *, FILE *, bool));$/;"	p	signature:(FILE *, FILE *, bool)
sm_alloc	sis_header/sparse.h	17;"	d
sm_alloc_size	sis_header/sparse.h	/^EXTERN sm_matrix *sm_alloc_size ARGS((int, int));$/;"	p	signature:(int, int)
sm_allocate	sis_header/sparse.h	/^EXTERN sm_matrix *sm_allocate ARGS((void));$/;"	p	signature:(void)
sm_cleanup	sis_header/sparse.h	/^EXTERN void sm_cleanup ARGS((void));$/;"	p	signature:(void)
sm_col	sis_header/sparse.h	/^typedef struct sm_col_struct sm_col;$/;"	t	typeref:struct:sm_col_struct
sm_col_alloc	sis_header/sparse.h	/^EXTERN sm_col *sm_col_alloc ARGS((void));$/;"	p	signature:(void)
sm_col_and	sis_header/sparse.h	/^EXTERN sm_col *sm_col_and ARGS((sm_col *, sm_col *));$/;"	p	signature:(sm_col *, sm_col *)
sm_col_compare	sis_header/sparse.h	/^EXTERN int sm_col_compare ARGS((sm_col *, sm_col *));$/;"	p	signature:(sm_col *, sm_col *)
sm_col_contains	sis_header/sparse.h	/^EXTERN int sm_col_contains ARGS((sm_col *, sm_col *));$/;"	p	signature:(sm_col *, sm_col *)
sm_col_dup	sis_header/sparse.h	/^EXTERN sm_col *sm_col_dup ARGS((sm_col *));$/;"	p	signature:(sm_col *)
sm_col_find	sis_header/sparse.h	/^EXTERN sm_element *sm_col_find ARGS((sm_col *, int));$/;"	p	signature:(sm_col *, int)
sm_col_free	sis_header/sparse.h	/^EXTERN void sm_col_free ARGS((sm_col *));$/;"	p	signature:(sm_col *)
sm_col_hash	sis_header/sparse.h	/^EXTERN int sm_col_hash ARGS((sm_col *, int));$/;"	p	signature:(sm_col *, int)
sm_col_insert	sis_header/sparse.h	/^EXTERN sm_element *sm_col_insert ARGS((sm_col *, int));$/;"	p	signature:(sm_col *, int)
sm_col_intersects	sis_header/sparse.h	/^EXTERN int sm_col_intersects ARGS((sm_col *, sm_col *));$/;"	p	signature:(sm_col *, sm_col *)
sm_col_print	sis_header/sparse.h	/^EXTERN void sm_col_print ARGS((FILE *, sm_col *));$/;"	p	signature:(FILE *, sm_col *)
sm_col_remove	sis_header/sparse.h	/^EXTERN void sm_col_remove ARGS((sm_col *, int));$/;"	p	signature:(sm_col *, int)
sm_col_remove_element	sis_header/sparse.h	/^EXTERN void sm_col_remove_element ARGS((sm_col *, sm_element *));$/;"	p	signature:(sm_col *, sm_element *)
sm_col_struct	sis_header/sparse.h	/^struct sm_col_struct {$/;"	s
sm_col_struct::col_num	sis_header/sparse.h	/^    int col_num;		\/* the column number *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::first_row	sis_header/sparse.h	/^    sm_element *first_row;	\/* first element in this column *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::flag	sis_header/sparse.h	/^    int flag;			\/* user-defined word *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::last_row	sis_header/sparse.h	/^    sm_element *last_row;	\/* last element in this column *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::length	sis_header/sparse.h	/^    int length;			\/* number of elements in this column *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::next_col	sis_header/sparse.h	/^    sm_col *next_col;		\/* next column (in sm_matrix linked list) *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::prev_col	sis_header/sparse.h	/^    sm_col *prev_col;		\/* prev column (in sm_matrix linked list) *\/$/;"	m	struct:sm_col_struct	access:public
sm_col_struct::user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_col_struct	access:public
sm_copy_col	sis_header/sparse.h	/^EXTERN void sm_copy_col ARGS((sm_matrix *, int, sm_col *));$/;"	p	signature:(sm_matrix *, int, sm_col *)
sm_copy_row	sis_header/sparse.h	/^EXTERN void sm_copy_row ARGS((sm_matrix *, int, sm_row *));$/;"	p	signature:(sm_matrix *, int, sm_row *)
sm_delcol	sis_header/sparse.h	/^EXTERN void sm_delcol ARGS((sm_matrix *, int));$/;"	p	signature:(sm_matrix *, int)
sm_delrow	sis_header/sparse.h	/^EXTERN void sm_delrow ARGS((sm_matrix *, int));$/;"	p	signature:(sm_matrix *, int)
sm_dump	sis_header/sparse.h	/^EXTERN void sm_dump ARGS((sm_matrix *, char *, int));$/;"	p	signature:(sm_matrix *, char *, int)
sm_dup	sis_header/sparse.h	/^EXTERN sm_matrix *sm_dup ARGS((sm_matrix *));$/;"	p	signature:(sm_matrix *)
sm_element	sis_header/sparse.h	/^typedef struct sm_element_struct sm_element;$/;"	t	typeref:struct:sm_element_struct
sm_element_struct	sis_header/sparse.h	/^struct sm_element_struct {$/;"	s
sm_element_struct::col_num	sis_header/sparse.h	/^    int col_num;		\/* column number of this element *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::next_col	sis_header/sparse.h	/^    sm_element *next_col;	\/* next column in this row *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::next_row	sis_header/sparse.h	/^    sm_element *next_row;	\/* next row in this column *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::prev_col	sis_header/sparse.h	/^    sm_element *prev_col;	\/* previous column in this row *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::prev_row	sis_header/sparse.h	/^    sm_element *prev_row;	\/* previous row in this column *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::row_num	sis_header/sparse.h	/^    int row_num;		\/* row number of this element *\/$/;"	m	struct:sm_element_struct	access:public
sm_element_struct::user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_element_struct	access:public
sm_find	sis_header/sparse.h	/^EXTERN sm_element *sm_find ARGS((sm_matrix *, int, int));$/;"	p	signature:(sm_matrix *, int, int)
sm_foreach_col	sis_header/sparse.h	103;"	d
sm_foreach_col_element	sis_header/sparse.h	109;"	d
sm_foreach_row	sis_header/sparse.h	100;"	d
sm_foreach_row_element	sis_header/sparse.h	106;"	d
sm_free	sis_header/sparse.h	18;"	d
sm_free_space	sis_header/sparse.h	/^EXTERN void sm_free_space ARGS((sm_matrix *));$/;"	p	signature:(sm_matrix *)
sm_get	sis_header/sparse.h	115;"	d
sm_get_col	sis_header/sparse.h	92;"	d
sm_get_row	sis_header/sparse.h	96;"	d
sm_insert	sis_header/sparse.h	/^EXTERN sm_element *sm_insert ARGS((sm_matrix *, int, int));$/;"	p	signature:(sm_matrix *, int, int)
sm_longest_col	sis_header/sparse.h	/^EXTERN sm_col *sm_longest_col ARGS((sm_matrix *));$/;"	p	signature:(sm_matrix *)
sm_longest_row	sis_header/sparse.h	/^EXTERN sm_row *sm_longest_row ARGS((sm_matrix *));$/;"	p	signature:(sm_matrix *)
sm_mat_bin_minimum_cover	sis_header/mincov.h	/^EXTERN sm_row *sm_mat_bin_minimum_cover ARGS((sm_matrix *, int *, int, int, int, int, int (*)()$/;"	p	signature:(sm_matrix *, int *, int, int, int, int, int (*)() )
sm_mat_minimum_cover	sis_header/mincov.h	/^EXTERN sm_row *sm_mat_minimum_cover ARGS((sm_matrix *, int *, int, int, int, int, int (*)()));$/;"	p	signature:(sm_matrix *, int *, int, int, int, int, int (*)())
sm_matrix	sis_header/sparse.h	/^typedef struct sm_matrix_struct sm_matrix;$/;"	t	typeref:struct:sm_matrix_struct
sm_matrix_struct	sis_header/sparse.h	/^struct sm_matrix_struct {$/;"	s
sm_matrix_struct::cols	sis_header/sparse.h	/^    sm_col **cols;		\/* pointer to column headers (by col #) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::cols_size	sis_header/sparse.h	/^    int cols_size;		\/* alloc'ed size of above array *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::first_col	sis_header/sparse.h	/^    sm_col *first_col;		\/* first column (linked list of columns) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::first_row	sis_header/sparse.h	/^    sm_row *first_row;		\/* first row (linked list of all rows) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::last_col	sis_header/sparse.h	/^    sm_col *last_col;		\/* last column (linked list of columns) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::last_row	sis_header/sparse.h	/^    sm_row *last_row;		\/* last row (linked list of all rows) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::ncols	sis_header/sparse.h	/^    int ncols;			\/* number of columns *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::nrows	sis_header/sparse.h	/^    int nrows;			\/* number of rows *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::rows	sis_header/sparse.h	/^    sm_row **rows;		\/* pointer to row headers (by row #) *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::rows_size	sis_header/sparse.h	/^    int rows_size;		\/* alloc'ed size of above array *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_matrix_struct::user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_matrix_struct	access:public
sm_minimum_cover	sis_header/mincov.h	/^EXTERN sm_row *sm_minimum_cover ARGS((sm_matrix *, int *, int, int));$/;"	p	signature:(sm_matrix *, int *, int, int)
sm_num_elements	sis_header/sparse.h	/^EXTERN int sm_num_elements ARGS((sm_matrix *));$/;"	p	signature:(sm_matrix *)
sm_print	sis_header/sparse.h	/^EXTERN void sm_print ARGS((FILE *, sm_matrix *));$/;"	p	signature:(FILE *, sm_matrix *)
sm_put	sis_header/sparse.h	112;"	d
sm_read	sis_header/sparse.h	/^EXTERN int sm_read ARGS((FILE *, sm_matrix **));$/;"	p	signature:(FILE *, sm_matrix **)
sm_read_compressed	sis_header/sparse.h	/^EXTERN int sm_read_compressed ARGS((FILE *, sm_matrix **));$/;"	p	signature:(FILE *, sm_matrix **)
sm_remove	sis_header/sparse.h	/^EXTERN void sm_remove ARGS((sm_matrix *, int, int));$/;"	p	signature:(sm_matrix *, int, int)
sm_remove_element	sis_header/sparse.h	/^EXTERN void sm_remove_element ARGS((sm_matrix *, sm_element *));$/;"	p	signature:(sm_matrix *, sm_element *)
sm_resize	sis_header/sparse.h	/^EXTERN void sm_resize ARGS((sm_matrix *, int, int));$/;"	p	signature:(sm_matrix *, int, int)
sm_row	sis_header/sparse.h	/^typedef struct sm_row_struct sm_row;$/;"	t	typeref:struct:sm_row_struct
sm_row_alloc	sis_header/sparse.h	/^EXTERN sm_row *sm_row_alloc ARGS((void));$/;"	p	signature:(void)
sm_row_and	sis_header/sparse.h	/^EXTERN sm_row *sm_row_and ARGS((sm_row *, sm_row *));$/;"	p	signature:(sm_row *, sm_row *)
sm_row_compare	sis_header/sparse.h	/^EXTERN int sm_row_compare ARGS((sm_row *, sm_row *));$/;"	p	signature:(sm_row *, sm_row *)
sm_row_contains	sis_header/sparse.h	/^EXTERN int sm_row_contains ARGS((sm_row *, sm_row *));$/;"	p	signature:(sm_row *, sm_row *)
sm_row_dup	sis_header/sparse.h	/^EXTERN sm_row *sm_row_dup ARGS((sm_row *));$/;"	p	signature:(sm_row *)
sm_row_find	sis_header/sparse.h	/^EXTERN sm_element *sm_row_find ARGS((sm_row *, int));$/;"	p	signature:(sm_row *, int)
sm_row_free	sis_header/sparse.h	/^EXTERN void sm_row_free ARGS((sm_row *));$/;"	p	signature:(sm_row *)
sm_row_hash	sis_header/sparse.h	/^EXTERN int sm_row_hash ARGS((sm_row *, int));$/;"	p	signature:(sm_row *, int)
sm_row_insert	sis_header/sparse.h	/^EXTERN sm_element *sm_row_insert ARGS((sm_row *, int));$/;"	p	signature:(sm_row *, int)
sm_row_intersects	sis_header/sparse.h	/^EXTERN int sm_row_intersects ARGS((sm_row *, sm_row *));$/;"	p	signature:(sm_row *, sm_row *)
sm_row_print	sis_header/sparse.h	/^EXTERN void sm_row_print ARGS((FILE *, sm_row *));$/;"	p	signature:(FILE *, sm_row *)
sm_row_remove	sis_header/sparse.h	/^EXTERN void sm_row_remove ARGS((sm_row *, int));$/;"	p	signature:(sm_row *, int)
sm_row_remove_element	sis_header/sparse.h	/^EXTERN void sm_row_remove_element ARGS((sm_row *, sm_element *));$/;"	p	signature:(sm_row *, sm_element *)
sm_row_struct	sis_header/sparse.h	/^struct sm_row_struct {$/;"	s
sm_row_struct::first_col	sis_header/sparse.h	/^    sm_element *first_col;	\/* first element in this row *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::flag	sis_header/sparse.h	/^    int flag;			\/* user-defined word *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::last_col	sis_header/sparse.h	/^    sm_element *last_col;	\/* last element in this row *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::length	sis_header/sparse.h	/^    int length;			\/* number of elements in this row *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::next_row	sis_header/sparse.h	/^    sm_row *next_row;		\/* next row (in sm_matrix linked list) *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::prev_row	sis_header/sparse.h	/^    sm_row *prev_row;		\/* previous row (in sm_matrix linked list) *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::row_num	sis_header/sparse.h	/^    int row_num;		\/* the row number *\/$/;"	m	struct:sm_row_struct	access:public
sm_row_struct::user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_row_struct	access:public
sm_write	sis_header/sparse.h	/^EXTERN void sm_write ARGS((FILE *, sm_matrix *));$/;"	p	signature:(FILE *, sm_matrix *)
smoothing_inputs	sis_header/seqbdd.h	/^  array_t *smoothing_inputs;		\/* for CONSISTENCY_METHOD *\/$/;"	m	struct:__anon10	access:public
snetwork_tfi_po	sis_header/network.h	/^EXTERN st_table *snetwork_tfi_po ARGS((network_t *));$/;"	p	signature:(network_t *)
so_both_do_espresso	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_both_do_espresso ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_both_do_exact	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_both_do_exact ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_both_espresso	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN void so_both_espresso ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_both_save	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_both_save ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_do_espresso	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_do_espresso ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_do_exact	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_do_exact ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_espresso	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN void so_espresso ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
so_save	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN int so_save ARGS((pPLA, int));$/;"	p	signature:(pPLA, int)
sort	array.h	/^	void sort(int (*compare)(const void *, const void *) = cmp); \/\/ qsort using compare as compare function$/;"	p	class:Array	access:public	signature:(int (*compare)(const void *, const void *) = cmp)
sort	array.h	/^inline void Array<T>::sort(int (*compare)(const void *, const void *)){$/;"	f	class:Array	signature:(int (*compare)(const void *, const void *))
sort_reduce	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover sort_reduce ARGS((pcover));$/;"	p	signature:(pcover)
source	sis_header/retime.h	/^    struct re_node *source;	\/* source node (typed re_node *) *\/$/;"	m	struct:re_edge	typeref:struct:re_edge::re_node	access:public
source_node	sis_header/maxflow.h	/^    mfnptr source_node;         \/* source node *\/$/;"	m	struct:MF_GRAPH	access:public
spADD_COMPLEX_ELEMENT	sis_header/spMatrix.h	219;"	d
spADD_COMPLEX_QUAD	sis_header/spMatrix.h	238;"	d
spADD_IMAG_ELEMENT	sis_header/spMatrix.h	217;"	d
spADD_IMAG_QUAD	sis_header/spMatrix.h	231;"	d
spADD_REAL_ELEMENT	sis_header/spMatrix.h	215;"	d
spADD_REAL_QUAD	sis_header/spMatrix.h	224;"	d
spAUTO_PARTITION	sis_header/spMatrix.h	184;"	d
spCOMPATIBILITY	sis_header/spConfig.h	293;"	d
spCOMPLEX	sis_header/spConfig.h	291;"	d
spCONFIG_DEFS	sis_header/spConfig.h	50;"	d
spClear	sis_header/spMatrix.h	/^extern  void     spClear( char* );$/;"	p	signature:( char* )
spClear	sis_header/spMatrix.h	/^extern  void     spClear();$/;"	p	signature:()
spCondition	sis_header/spMatrix.h	/^extern  spREAL   spCondition( char*, spREAL, int* );$/;"	p	signature:( char*, spREAL, int* )
spCondition	sis_header/spMatrix.h	/^extern  spREAL   spCondition();$/;"	p	signature:()
spCreate	sis_header/spMatrix.h	/^extern  char    *spCreate( int, int, int* );$/;"	p	signature:( int, int, int* )
spCreate	sis_header/spMatrix.h	/^extern  char    *spCreate();$/;"	p	signature:()
spDEFAULT_PARTITION	sis_header/spMatrix.h	181;"	d
spDIRECT_PARTITION	sis_header/spMatrix.h	182;"	d
spDeleteRowAndCol	sis_header/spMatrix.h	/^extern  void     spDeleteRowAndCol( char*, int, int );$/;"	p	signature:( char*, int, int )
spDeleteRowAndCol	sis_header/spMatrix.h	/^extern  void     spDeleteRowAndCol();$/;"	p	signature:()
spDestroy	sis_header/spMatrix.h	/^extern  void     spDestroy( char* );$/;"	p	signature:( char* )
spDestroy	sis_header/spMatrix.h	/^extern  void     spDestroy();$/;"	p	signature:()
spDeterminant	sis_header/spMatrix.h	/^extern  void     spDeterminant ( char*, int*, spREAL* );$/;"	p	signature:( char*, int*, spREAL* )
spDeterminant	sis_header/spMatrix.h	/^extern  void     spDeterminant ( char*, int*, spREAL*, spREAL* );$/;"	p	signature:( char*, int*, spREAL*, spREAL* )
spDeterminant	sis_header/spMatrix.h	/^extern  void     spDeterminant ();$/;"	p	signature:()
spElementCount	sis_header/spMatrix.h	/^extern  int      spElementCount( char* );$/;"	p	signature:( char* )
spElementCount	sis_header/spMatrix.h	/^extern  int      spElementCount();$/;"	p	signature:()
spError	sis_header/spMatrix.h	/^extern  int      spError( char* );$/;"	p	signature:( char* )
spError	sis_header/spMatrix.h	/^extern  int      spError();$/;"	p	signature:()
spFATAL	sis_header/spMatrix.h	112;"	d
spFactor	sis_header/spMatrix.h	/^extern  int      spFactor( char* );$/;"	p	signature:( char* )
spFactor	sis_header/spMatrix.h	/^extern  int      spFactor();$/;"	p	signature:()
spFileMatrix	sis_header/spMatrix.h	/^extern  int      spFileMatrix( char*, char*, char*, int, int, int );$/;"	p	signature:( char*, char*, char*, int, int, int )
spFileMatrix	sis_header/spMatrix.h	/^extern  int      spFileMatrix();$/;"	p	signature:()
spFileStats	sis_header/spMatrix.h	/^extern  int      spFileStats( char*, char*, char* );$/;"	p	signature:( char*, char*, char* )
spFileStats	sis_header/spMatrix.h	/^extern  int      spFileStats();$/;"	p	signature:()
spFileVector	sis_header/spMatrix.h	/^extern  int      spFileVector( char*, char* , spREAL[] );$/;"	p	signature:( char*, char* , spREAL[] )
spFileVector	sis_header/spMatrix.h	/^extern  int      spFileVector( char*, char* , spREAL[], spREAL[]);$/;"	p	signature:( char*, char* , spREAL[], spREAL[])
spFileVector	sis_header/spMatrix.h	/^extern  int      spFileVector();$/;"	p	signature:()
spFillinCount	sis_header/spMatrix.h	/^extern  int      spFillinCount( char* );$/;"	p	signature:( char* )
spFillinCount	sis_header/spMatrix.h	/^extern  int      spFillinCount();$/;"	p	signature:()
spGetAdmittance	sis_header/spMatrix.h	/^extern  int      spGetAdmittance( char*, int, int, struct spTemplate* );$/;"	p	signature:( char*, int, int, struct spTemplate* )
spGetAdmittance	sis_header/spMatrix.h	/^extern  int      spGetAdmittance();$/;"	p	signature:()
spGetElement	sis_header/spMatrix.h	/^extern  spREAL  *spGetElement( char*, int, int );$/;"	p	signature:( char*, int, int )
spGetElement	sis_header/spMatrix.h	/^extern  spREAL  *spGetElement();$/;"	p	signature:()
spGetInitInfo	sis_header/spMatrix.h	/^extern  char    *spGetInitInfo( spREAL* );$/;"	p	signature:( spREAL* )
spGetInitInfo	sis_header/spMatrix.h	/^extern  char    *spGetInitInfo();$/;"	p	signature:()
spGetOnes	sis_header/spMatrix.h	/^extern  int      spGetOnes( char*, int, int, int, struct spTemplate* );$/;"	p	signature:( char*, int, int, int, struct spTemplate* )
spGetOnes	sis_header/spMatrix.h	/^extern  int      spGetOnes();$/;"	p	signature:()
spGetQuad	sis_header/spMatrix.h	/^extern  int      spGetQuad( char*, int, int, int, int, struct spTemplate* );$/;"	p	signature:( char*, int, int, int, int, struct spTemplate* )
spGetQuad	sis_header/spMatrix.h	/^extern  int      spGetQuad();$/;"	p	signature:()
spGetSize	sis_header/spMatrix.h	/^extern  int      spGetSize( char*, int );$/;"	p	signature:( char*, int )
spGetSize	sis_header/spMatrix.h	/^extern  int      spGetSize();$/;"	p	signature:()
spINDIRECT_PARTITION	sis_header/spMatrix.h	183;"	d
spInitialize	sis_header/spMatrix.h	/^extern  int      spInitialize( char*, int (*)() );$/;"	p	signature:( char*, int (*)() )
spInitialize	sis_header/spMatrix.h	/^extern  int      spInitialize();$/;"	p	signature:()
spInstallInitInfo	sis_header/spMatrix.h	/^extern  void     spInstallInitInfo( spREAL*, char* );$/;"	p	signature:( spREAL*, char* )
spInstallInitInfo	sis_header/spMatrix.h	/^extern  void     spInstallInitInfo();$/;"	p	signature:()
spLargestElement	sis_header/spMatrix.h	/^extern  spREAL   spLargestElement( char* );$/;"	p	signature:( char* )
spLargestElement	sis_header/spMatrix.h	/^extern  spREAL   spLargestElement();$/;"	p	signature:()
spMNA_Preorder	sis_header/spMatrix.h	/^extern  void     spMNA_Preorder( char* );$/;"	p	signature:( char* )
spMNA_Preorder	sis_header/spMatrix.h	/^extern  void     spMNA_Preorder();$/;"	p	signature:()
spMultTransposed	sis_header/spMatrix.h	/^extern  void     spMultTransposed( char*, spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[] )
spMultTransposed	sis_header/spMatrix.h	/^extern  void     spMultTransposed();$/;"	p	signature:()
spMultTransposed	sis_header/spMatrix.h	/^extern  void     spMultTransposed(char*,spREAL[],spREAL[],spREAL[],spREAL[]);$/;"	p	signature:(char*,spREAL[],spREAL[],spREAL[],spREAL[])
spMultiply	sis_header/spMatrix.h	/^extern  void     spMultiply( char*, spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[] )
spMultiply	sis_header/spMatrix.h	/^extern  void     spMultiply( char*, spREAL[], spREAL[], spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[], spREAL[], spREAL[] )
spMultiply	sis_header/spMatrix.h	/^extern  void     spMultiply();$/;"	p	signature:()
spNO_MEMORY	sis_header/spMatrix.h	109;"	d
spNorm	sis_header/spMatrix.h	/^extern  spREAL   spNorm( char* );$/;"	p	signature:( char* )
spNorm	sis_header/spMatrix.h	/^extern  spREAL   spNorm();$/;"	p	signature:()
spOKAY	sis_header/spMatrix.h	105;"	d
spOrderAndFactor	sis_header/spMatrix.h	/^extern  int      spOrderAndFactor( char*, spREAL[], spREAL, spREAL, int );$/;"	p	signature:( char*, spREAL[], spREAL, spREAL, int )
spOrderAndFactor	sis_header/spMatrix.h	/^extern  int      spOrderAndFactor();$/;"	p	signature:()
spPANIC	sis_header/spMatrix.h	110;"	d
spPartition	sis_header/spMatrix.h	/^extern  void     spPartition( char*, int );$/;"	p	signature:( char*, int )
spPartition	sis_header/spMatrix.h	/^extern  void     spPartition();$/;"	p	signature:()
spPrint	sis_header/spMatrix.h	/^extern  void     spPrint( char*, int, int, int );$/;"	p	signature:( char*, int, int, int )
spPrint	sis_header/spMatrix.h	/^extern  void     spPrint();$/;"	p	signature:()
spPseudoCondition	sis_header/spMatrix.h	/^extern  spREAL   spPseudoCondition( char* );$/;"	p	signature:( char* )
spPseudoCondition	sis_header/spMatrix.h	/^extern  spREAL   spPseudoCondition();$/;"	p	signature:()
spREAL	sis_header/spMatrix.h	149;"	d
spRoundoff	sis_header/spMatrix.h	/^extern  spREAL   spRoundoff( char*, spREAL );$/;"	p	signature:( char*, spREAL )
spRoundoff	sis_header/spMatrix.h	/^extern  spREAL   spRoundoff();$/;"	p	signature:()
spSEPARATED_COMPLEX_VECTORS	sis_header/spConfig.h	292;"	d
spSINGULAR	sis_header/spMatrix.h	108;"	d
spSMALL_PIVOT	sis_header/spMatrix.h	106;"	d
spScale	sis_header/spMatrix.h	/^extern  void     spScale( char*, spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[] )
spScale	sis_header/spMatrix.h	/^extern  void     spScale();$/;"	p	signature:()
spSetComplex	sis_header/spMatrix.h	/^extern  void     spSetComplex( char* );$/;"	p	signature:( char* )
spSetComplex	sis_header/spMatrix.h	/^extern  void     spSetComplex();$/;"	p	signature:()
spSetReal	sis_header/spMatrix.h	/^extern  void     spSetReal( char* );$/;"	p	signature:( char* )
spSetReal	sis_header/spMatrix.h	/^extern  void     spSetReal();$/;"	p	signature:()
spSolve	sis_header/spMatrix.h	/^extern  void     spSolve( char*, spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[] )
spSolve	sis_header/spMatrix.h	/^extern  void     spSolve( char*, spREAL[], spREAL[], spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[], spREAL[], spREAL[] )
spSolve	sis_header/spMatrix.h	/^extern  void     spSolve();$/;"	p	signature:()
spSolveTransposed	sis_header/spMatrix.h	/^extern  void     spSolveTransposed( char*, spREAL[], spREAL[] );$/;"	p	signature:( char*, spREAL[], spREAL[] )
spSolveTransposed	sis_header/spMatrix.h	/^extern  void     spSolveTransposed();$/;"	p	signature:()
spSolveTransposed	sis_header/spMatrix.h	/^extern  void     spSolveTransposed(char*,spREAL[],spREAL[],spREAL[],spREAL[]);$/;"	p	signature:(char*,spREAL[],spREAL[],spREAL[],spREAL[])
spStripFills	sis_header/spMatrix.h	/^extern  void     spStripFills( char* );$/;"	p	signature:( char* )
spStripFills	sis_header/spMatrix.h	/^extern  void     spStripFills();$/;"	p	signature:()
spTemplate	sis_header/spMatrix.h	/^struct  spTemplate$/;"	s
spTemplate	sis_header/spMatrix.h	280;"	d
spTemplate::Element1	sis_header/spMatrix.h	/^{   spREAL    *Element1       ;$/;"	m	struct:spTemplate	access:public
spTemplate::Element2	sis_header/spMatrix.h	/^    spREAL    *Element2       ;$/;"	m	struct:spTemplate	access:public
spTemplate::Element3Negated	sis_header/spMatrix.h	/^    spREAL    *Element3Negated;$/;"	m	struct:spTemplate	access:public
spTemplate::Element4Negated	sis_header/spMatrix.h	/^    spREAL    *Element4Negated;$/;"	m	struct:spTemplate	access:public
spWhereSingular	sis_header/spMatrix.h	/^extern  void     spWhereSingular( char*, int*, int* );$/;"	p	signature:( char*, int*, int* )
spWhereSingular	sis_header/spMatrix.h	/^extern  void     spWhereSingular();$/;"	p	signature:()
spZERO_DIAG	sis_header/spMatrix.h	107;"	d
spZERO_DIAG	sis_header/spMatrix.h	126;"	d
spZERO_DIAG	sis_header/spMatrix.h	127;"	d
sp_fanout_struct	sis_header/speed.h	/^typedef struct sp_fanout_struct{$/;"	s
sp_fanout_struct::fanout	sis_header/speed.h	/^    node_t *fanout;	       \/* The node to which destination belongs to *\/$/;"	m	struct:sp_fanout_struct	access:public
sp_fanout_struct::load	sis_header/speed.h	/^    double load;	       \/* The input_cap of the destination *\/$/;"	m	struct:sp_fanout_struct	access:public
sp_fanout_struct::phase	sis_header/speed.h	/^    pin_phase_t phase;	       \/* Whether POS or NEG poloarity signal *\/$/;"	m	struct:sp_fanout_struct	access:public
sp_fanout_struct::pin	sis_header/speed.h	/^    int pin;		       \/* The "fanin_index" of the destination pin *\/$/;"	m	struct:sp_fanout_struct	access:public
sp_fanout_struct::req	sis_header/speed.h	/^    delay_time_t req;	       \/* Req time of the destination *\/$/;"	m	struct:sp_fanout_struct	access:public
sp_fanout_t	sis_header/speed.h	/^    } sp_fanout_t;$/;"	t	typeref:struct:sp_fanout_struct
space	array.h	/^	T *space;$/;"	m	class:Array	access:public
space	array/array.h	/^    char *space;$/;"	m	struct:array_t	access:public
space	sis_header/array.h	/^    char *space;$/;"	m	struct:array_t	access:public
sparse	sis_header/espresso.h	/^    int *sparse;                \/* should this variable be sparse? *\/$/;"	m	struct:cube_struct	access:public
speed_decomp_interface	sis_header/speed.h	/^EXTERN array_t    *speed_decomp_interface ARGS((node_t *, double, delay_model_t));$/;"	p	signature:(node_t *, double, delay_model_t)
speed_loop_interface	sis_header/speed.h	/^EXTERN void	  speed_loop_interface ARGS((network_t **, double, double, int, delay_model_t, int));$/;"	p	signature:(network_t **, double, double, int, delay_model_t, int)
speed_node_interface	sis_header/speed.h	/^EXTERN void	  speed_node_interface ARGS((network_t *, node_t *, double, delay_model_t));$/;"	p	signature:(network_t *, node_t *, double, delay_model_t)
split_network	sis_header/pld.h	/^extern int split_network();         \/*  xln_part_dec.c *\/$/;"	p	signature:()
sprintf	sis_header/util.h	/^extern char *sprintf();$/;"	p	signature:()
sprintf	sis_header/util.h	/^extern int sprintf();$/;"	p	signature:()
sprintf	util/util.h	/^extern char *sprintf();$/;"	p	signature:()
sprintf	util/util.h	/^extern int sprintf();$/;"	p	signature:()
srandom	array/arr_main.c	/^    extern void srandom();$/;"	p	file:
srandom	array/arr_main.c	17;"	d	file:
srandom	sis_header/util.h	/^extern VOID_HACK srandom();$/;"	p	signature:()
srandom	sis_header/util.h	174;"	d
srandom	util/util.h	/^extern VOID_HACK srandom();$/;"	p	signature:()
srandom	util/util.h	174;"	d
src	rewire.h	/^	BNode *src;$/;"	m	struct:__anon2	access:public
src	rewire_c.h	/^	node_t *src;$/;"	m	struct:__anon1	access:public
st_add_direct	sis_header/st.h	/^EXTERN int st_add_direct ARGS((st_table *, char *, char *));$/;"	p	signature:(st_table *, char *, char *)
st_copy	sis_header/st.h	/^EXTERN st_table *st_copy ARGS((st_table *));$/;"	p	signature:(st_table *)
st_count	sis_header/st.h	44;"	d
st_delete	sis_header/st.h	/^EXTERN int st_delete ARGS((st_table *, char **, char **));$/;"	p	signature:(st_table *, char **, char **)
st_delete_int	sis_header/st.h	/^EXTERN int st_delete_int ARGS((st_table *, int *, char **));$/;"	p	signature:(st_table *, int *, char **)
st_find	sis_header/st.h	/^EXTERN int st_find ARGS((st_table *, char *, char ***));$/;"	p	signature:(st_table *, char *, char ***)
st_find_or_add	sis_header/st.h	/^EXTERN int st_find_or_add ARGS((st_table *, char *, char ***));$/;"	p	signature:(st_table *, char *, char ***)
st_foreach	sis_header/st.h	/^EXTERN int st_foreach ARGS((st_table *, ST_PFSR, char *));$/;"	p	signature:(st_table *, ST_PFSR, char *)
st_foreach_item	sis_header/st.h	80;"	d
st_foreach_item_int	sis_header/st.h	83;"	d
st_fpcmp	sis_header/atpg.h	/^extern int st_fpcmp();$/;"	p	signature:()
st_fphash	sis_header/atpg.h	/^extern int st_fphash();$/;"	p	signature:()
st_free_gen	sis_header/st.h	/^EXTERN void st_free_gen ARGS((st_generator *));$/;"	p	signature:(st_generator *)
st_free_table	sis_header/st.h	/^EXTERN void st_free_table ARGS((st_table *));$/;"	p	signature:(st_table *)
st_gen	sis_header/st.h	/^EXTERN int st_gen ARGS((st_generator *, char **, char **));$/;"	p	signature:(st_generator *, char **, char **)
st_gen_int	sis_header/st.h	/^EXTERN int st_gen_int ARGS((st_generator *, char **, long *));$/;"	p	signature:(st_generator *, char **, long *)
st_generator	sis_header/st.h	/^struct st_generator {$/;"	s
st_generator	sis_header/st.h	/^typedef struct st_generator st_generator;$/;"	t	typeref:struct:st_generator
st_generator::entry	sis_header/st.h	/^    st_table_entry *entry;$/;"	m	struct:st_generator	access:public
st_generator::index	sis_header/st.h	/^    int index;$/;"	m	struct:st_generator	access:public
st_generator::table	sis_header/st.h	/^    st_table *table;$/;"	m	struct:st_generator	access:public
st_init_gen	sis_header/st.h	/^EXTERN st_generator *st_init_gen ARGS((st_table *));$/;"	p	signature:(st_table *)
st_init_table	sis_header/st.h	/^EXTERN st_table *st_init_table ARGS((ST_PFI, ST_PFI)); $/;"	p	signature:(ST_PFI, ST_PFI)
st_init_table_with_params	sis_header/st.h	/^EXTERN st_table *st_init_table_with_params ARGS((ST_PFI, ST_PFI, int, int, double, int));$/;"	p	signature:(ST_PFI, ST_PFI, int, int, double, int)
st_insert	sis_header/st.h	/^EXTERN int st_insert ARGS((st_table *, char *, char *));$/;"	p	signature:(st_table *, char *, char *)
st_is_member	sis_header/st.h	43;"	d
st_lookup	sis_header/st.h	/^EXTERN int st_lookup ARGS((st_table *, char *, char **));$/;"	p	signature:(st_table *, char *, char **)
st_lookup_int	sis_header/st.h	/^EXTERN int st_lookup_int ARGS((st_table *, char *, int *));$/;"	p	signature:(st_table *, char *, int *)
st_numcmp	sis_header/st.h	/^EXTERN int st_numcmp ARGS((char *, char *));$/;"	p	signature:(char *, char *)
st_numhash	sis_header/st.h	/^EXTERN int st_numhash ARGS((char *, int));$/;"	p	signature:(char *, int)
st_ptrcmp	sis_header/st.h	/^EXTERN int st_ptrcmp ARGS((char *, char *));$/;"	p	signature:(char *, char *)
st_ptrhash	sis_header/st.h	/^EXTERN int st_ptrhash ARGS((char *, int));$/;"	p	signature:(char *, int)
st_retval	sis_header/st.h	/^enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE};$/;"	g
st_strhash	sis_header/st.h	/^EXTERN int st_strhash ARGS((char *, int));$/;"	p	signature:(char *, int)
st_table	sis_header/st.h	/^struct st_table {$/;"	s
st_table	sis_header/st.h	/^typedef struct st_table st_table;$/;"	t	typeref:struct:st_table
st_table::bins	sis_header/st.h	/^    st_table_entry **bins;$/;"	m	struct:st_table	access:public
st_table::compare	sis_header/st.h	/^    int (*compare)();$/;"	m	struct:st_table	access:public
st_table::grow_factor	sis_header/st.h	/^    double grow_factor;$/;"	m	struct:st_table	access:public
st_table::hash	sis_header/st.h	/^    int (*hash)();$/;"	m	struct:st_table	access:public
st_table::max_density	sis_header/st.h	/^    int max_density;$/;"	m	struct:st_table	access:public
st_table::num_bins	sis_header/st.h	/^    int num_bins;$/;"	m	struct:st_table	access:public
st_table::num_entries	sis_header/st.h	/^    int num_entries;$/;"	m	struct:st_table	access:public
st_table::reorder_flag	sis_header/st.h	/^    int reorder_flag;$/;"	m	struct:st_table	access:public
st_table_entry	sis_header/st.h	/^struct st_table_entry {$/;"	s
st_table_entry	sis_header/st.h	/^typedef struct st_table_entry st_table_entry;$/;"	t	typeref:struct:st_table_entry
st_table_entry::key	sis_header/st.h	/^    char *key;$/;"	m	struct:st_table_entry	access:public
st_table_entry::next	sis_header/st.h	/^    st_table_entry *next;$/;"	m	struct:st_table_entry	access:public
st_table_entry::record	sis_header/st.h	/^    char *record;$/;"	m	struct:st_table_entry	access:public
stack_hi_addr	util/restart.c	/^static char *stack_hi_addr;$/;"	v	file:
stack_lo_addr	util/restart.c	/^static char *stack_lo_addr;$/;"	v	file:
stack_size	util/restart.c	/^static int stack_size;$/;"	v	file:
start_state_used	sis_header/atpg.h	/^    bdd_t *start_state_used;		\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
start_states	sis_header/atpg.h	/^    bdd_t *start_states;		\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
state_sequence_table	sis_header/atpg.h	/^    st_table *state_sequence_table;	\/* for short_tests *\/$/;"	m	struct:__anon37	access:public
statistics	sis_header/atpg.h	/^    statistics_t *statistics;		\/* stores execution statistics *\/$/;"	m	struct:__anon35	access:public
statistics_t	sis_header/atpg.h	/^} statistics_t;$/;"	t	typeref:struct:__anon34
status	sis_header/atpg.h	/^  fault_status_t  status;$/;"	m	struct:fault_struct	access:public
status	sis_header/extract.h	/^    UNSIGNED status;        \/* indicate whether the divisor is changed or not *\/$/;"	m	struct:double_cube_divisor_struct	access:public
stg	sis_header/network.h	/^    graph_t *stg;               \/*      sequential support      *\/$/;"	m	struct:network_struct	access:public
stg_alloc	sis_header/stg.h	/^EXTERN graph_t *stg_alloc ARGS((void));$/;"	p	signature:(void)
stg_check	sis_header/stg.h	/^EXTERN int stg_check ARGS((graph_t *));$/;"	p	signature:(graph_t *)
stg_create_state	sis_header/stg.h	/^EXTERN vertex_t *stg_create_state ARGS((graph_t *, char *, char *));$/;"	p	signature:(graph_t *, char *, char *)
stg_create_transition	sis_header/stg.h	/^EXTERN edge_t *stg_create_transition ARGS((vertex_t *, vertex_t *, char *, char *));$/;"	p	signature:(vertex_t *, vertex_t *, char *, char *)
stg_depth	sis_header/atpg.h	/^    int stg_depth;$/;"	m	struct:__anon34	access:public
stg_dump_graph	sis_header/stg.h	/^EXTERN void stg_dump_graph ARGS((graph_t *, network_t *));$/;"	p	signature:(graph_t *, network_t *)
stg_dup	sis_header/stg.h	/^EXTERN graph_t *stg_dup ARGS((graph_t *));$/;"	p	signature:(graph_t *)
stg_edge_from_state	sis_header/stg.h	107;"	d
stg_edge_input_string	sis_header/stg.h	102;"	d
stg_edge_output_string	sis_header/stg.h	104;"	d
stg_edge_to_state	sis_header/stg.h	108;"	d
stg_extract	sis_header/stg.h	/^EXTERN graph_t *stg_extract ARGS((network_t *, int));$/;"	p	signature:(network_t *, int)
stg_foreach_state	sis_header/stg.h	82;"	d
stg_foreach_transition	sis_header/stg.h	87;"	d
stg_free	sis_header/stg.h	/^EXTERN void stg_free ARGS((graph_t *));$/;"	p	signature:(graph_t *)
stg_get_current	sis_header/stg.h	59;"	d
stg_get_edge_index	sis_header/stg.h	46;"	d
stg_get_names	sis_header/stg.h	/^EXTERN array_t *stg_get_names ARGS((graph_t *, int));$/;"	p	signature:(graph_t *, int)
stg_get_num_inputs	sis_header/stg.h	40;"	d
stg_get_num_outputs	sis_header/stg.h	43;"	d
stg_get_num_products	sis_header/stg.h	49;"	d
stg_get_num_states	sis_header/stg.h	52;"	d
stg_get_start	sis_header/stg.h	55;"	d
stg_get_state_by_encoding	sis_header/stg.h	/^EXTERN vertex_t *stg_get_state_by_encoding ARGS((graph_t *, char *));$/;"	p	signature:(graph_t *, char *)
stg_get_state_by_name	sis_header/stg.h	/^EXTERN vertex_t *stg_get_state_by_name ARGS((graph_t *, char *));$/;"	p	signature:(graph_t *, char *)
stg_get_state_encoding	sis_header/stg.h	75;"	d
stg_get_state_name	sis_header/stg.h	70;"	d
stg_reset	sis_header/stg.h	/^EXTERN void stg_reset ARGS((graph_t *));$/;"	p	signature:(graph_t *)
stg_save_names	sis_header/stg.h	/^EXTERN int stg_save_names ARGS((network_t *, graph_t *, int));$/;"	p	signature:(network_t *, graph_t *, int)
stg_set_current	sis_header/stg.h	/^EXTERN void stg_set_current ARGS((graph_t *, vertex_t *));$/;"	p	signature:(graph_t *, vertex_t *)
stg_set_edge_index	sis_header/stg.h	47;"	d
stg_set_names	sis_header/stg.h	/^EXTERN void stg_set_names ARGS((graph_t *, array_t *, int));$/;"	p	signature:(graph_t *, array_t *, int)
stg_set_num_inputs	sis_header/stg.h	41;"	d
stg_set_num_outputs	sis_header/stg.h	44;"	d
stg_set_num_products	sis_header/stg.h	50;"	d
stg_set_num_states	sis_header/stg.h	53;"	d
stg_set_start	sis_header/stg.h	/^EXTERN void stg_set_start ARGS((graph_t *, vertex_t *));$/;"	p	signature:(graph_t *, vertex_t *)
stg_set_state_encoding	sis_header/stg.h	/^EXTERN void stg_set_state_encoding ARGS((vertex_t *, char *));$/;"	p	signature:(vertex_t *, char *)
stg_set_state_name	sis_header/stg.h	/^EXTERN void stg_set_state_name ARGS((vertex_t *, char *));$/;"	p	signature:(vertex_t *, char *)
stg_sim	sis_header/stg.h	/^EXTERN void stg_sim ARGS((graph_t *, char *));$/;"	p	signature:(graph_t *, char *)
stg_to_network	sis_header/stg.h	/^EXTERN network_t *stg_to_network ARGS((graph_t *, int));$/;"	p	signature:(graph_t *, int)
sthandle	sis_header/extract.h	/^    lsHandle sthandle;      \/* lsHandle to corresponoding searching table *\/$/;"	m	struct:double_cube_divisor_struct	access:public
stk_cla	sis_header/sat.h	/^    array_t *stk_cla;$/;"	m	struct:__anon5	access:public
stk_inc	sis_header/sat.h	/^    array_t *stk_inc;$/;"	m	struct:__anon5	access:public
stk_var	sis_header/sat.h	/^    array_t *stk_var;$/;"	m	struct:__anon5	access:public
stop_if_verify	sis_header/seqbdd.h	/^  int stop_if_verify;		 \/* if set, flip the return status of verify_fsm *\/$/;"	m	struct:verif_options_t	access:public
strategy	sis_header/sat.h	/^    sat_strategy_t *strategy;$/;"	m	struct:__anon5	access:public
strcat	sis_header/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strcat	util/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strchr	sis_header/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strchr	util/stub.c	/^strchr(s, c)$/;"	f
strchr	util/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strcmp	sis_header/util.h	/^extern int memcmp(), strcmp();$/;"	p	signature:()
strcmp	util/util.h	/^extern int memcmp(), strcmp();$/;"	p	signature:()
strcoll	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strcoll	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strcpy	sis_header/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strcpy	util/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strcspn	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strcspn	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strerror	sis_header/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strerror	util/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strlen	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strlen	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strncat	sis_header/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strncat	util/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strncmp	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strncmp	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strncpy	sis_header/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strncpy	util/util.h	/^extern char *strcpy(), *strncpy(), *strcat(), *strncat(), *strerror();$/;"	p	signature:()
strpbrk	sis_header/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strpbrk	util/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strrchr	sis_header/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strrchr	util/stub.c	/^strrchr(s, c)$/;"	f
strrchr	util/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strspn	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strspn	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strstr	sis_header/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strstr	util/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strtok	sis_header/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strtok	util/util.h	/^extern char *strpbrk(), *strtok(), *strchr(), *strrchr(), *strstr();$/;"	p	signature:()
strxfrm	sis_header/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
strxfrm	util/util.h	/^extern int strcoll(), strxfrm(), strncmp(), strlen(), strspn(), strcspn();$/;"	p	signature:()
stuck_value_enum	sis_header/atpg.h	/^enum stuck_value_enum {$/;"	g
stuck_value_t	sis_header/atpg.h	/^typedef enum stuck_value_enum stuck_value_t;$/;"	t	typeref:enum:stuck_value_enum
super_gasp	sis_header/espresso.h	/^\/* gasp.c *\/	EXTERN pcover super_gasp ARGS((pcover, pcover, pcover,$/;"	p	signature:(pcover, pcover, pcover, cost_t *cost)
switching_prob	sis_header/power.h	/^    double switching_prob; \/* Expected number of transistions in one cycle *\/$/;"	m	struct:__anon7	access:public
symbolic	sis_header/espresso.h	/^    symbolic_t *symbolic;	\/* allow binary->symbolic mapping *\/$/;"	m	struct:__anon14	access:public
symbolic_hack_labels	sis_header/espresso.h	/^\/* hack.c *\/	EXTERN int symbolic_hack_labels ARGS((pPLA, symbolic_t*,$/;"	p	signature:(pPLA, symbolic_t*, pset, int, int, int)
symbolic_label	sis_header/espresso.h	/^    symbolic_label_t *symbolic_label;	\/* linked list of new names *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_label_length	sis_header/espresso.h	/^    int symbolic_label_length;		\/* length of symbolic_label list *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_label_struct	sis_header/espresso.h	/^typedef struct symbolic_label_struct {$/;"	s
symbolic_label_struct::label	sis_header/espresso.h	/^    char *label;$/;"	m	struct:symbolic_label_struct	access:public
symbolic_label_struct::next	sis_header/espresso.h	/^    struct symbolic_label_struct *next;$/;"	m	struct:symbolic_label_struct	typeref:struct:symbolic_label_struct::symbolic_label_struct	access:public
symbolic_label_t	sis_header/espresso.h	/^} symbolic_label_t;$/;"	t	typeref:struct:symbolic_label_struct
symbolic_list	sis_header/espresso.h	/^    symbolic_list_t *symbolic_list;	\/* linked list of items *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_list_length	sis_header/espresso.h	/^    int symbolic_list_length;		\/* length of symbolic_list list *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_list_struct	sis_header/espresso.h	/^typedef struct symbolic_list_struct {$/;"	s
symbolic_list_struct::next	sis_header/espresso.h	/^    struct symbolic_list_struct *next;$/;"	m	struct:symbolic_list_struct	typeref:struct:symbolic_list_struct::symbolic_list_struct	access:public
symbolic_list_struct::pos	sis_header/espresso.h	/^    int pos;$/;"	m	struct:symbolic_list_struct	access:public
symbolic_list_struct::variable	sis_header/espresso.h	/^    int variable;$/;"	m	struct:symbolic_list_struct	access:public
symbolic_list_t	sis_header/espresso.h	/^} symbolic_list_t;$/;"	t	typeref:struct:symbolic_list_struct
symbolic_output	sis_header/espresso.h	/^    symbolic_t *symbolic_output;\/* allow symbolic output mapping *\/$/;"	m	struct:__anon14	access:public
symbolic_struct	sis_header/espresso.h	/^typedef struct symbolic_struct {$/;"	s
symbolic_struct::next	sis_header/espresso.h	/^    struct symbolic_struct *next;$/;"	m	struct:symbolic_struct	typeref:struct:symbolic_struct::symbolic_struct	access:public
symbolic_struct::symbolic_label	sis_header/espresso.h	/^    symbolic_label_t *symbolic_label;	\/* linked list of new names *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_struct::symbolic_label_length	sis_header/espresso.h	/^    int symbolic_label_length;		\/* length of symbolic_label list *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_struct::symbolic_list	sis_header/espresso.h	/^    symbolic_list_t *symbolic_list;	\/* linked list of items *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_struct::symbolic_list_length	sis_header/espresso.h	/^    int symbolic_list_length;		\/* length of symbolic_list list *\/$/;"	m	struct:symbolic_struct	access:public
symbolic_t	sis_header/espresso.h	/^} symbolic_t;$/;"	t	typeref:struct:symbolic_struct
symmetric	sis_header/library.h	/^  int symmetric; 		\/* it is more or less symmetric WRT input pins *\/$/;"	m	struct:lib_gate_struct	access:public
synch_type	sis_header/latch.h	/^    latch_synch_t synch_type;	\/* type of latch *\/$/;"	m	struct:latch_struct	access:public
system	sis_header/util.h	/^extern int system();$/;"	p	signature:()
system	util/util.h	/^extern int system();$/;"	p	signature:()
table	sis_header/st.h	/^    st_table *table;$/;"	m	struct:st_generator	access:public
taut_special_cases	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN bool taut_special_cases ARGS((pcube *));$/;"	p	signature:(pcube *)
tautology	sis_header/espresso.h	/^\/* irred.c *\/	EXTERN bool tautology ARGS((pcube *));$/;"	p	signature:(pcube *)
tdc_factor_network	sis_header/delay.h	/^EXTERN network_t * tdc_factor_network ARGS((network_t *));$/;"	p	signature:(network_t *)
tech_decomp	sis_header/atpg.h	/^    bool tech_decomp;$/;"	m	struct:__anon32	access:public
temp	sis_header/espresso.h	/^    pset *temp;                 \/* an array of temporary sets *\/$/;"	m	struct:cube_struct	access:public
temp_breadth	sis_header/retime.h	/^    double temp_breadth;	\/* Modified breadth to account for reg shar *\/$/;"	m	struct:re_edge	access:public
tested_faults	sis_header/atpg.h	/^    lsList tested_faults;$/;"	m	struct:__anon35	access:public
tfo	sis_header/atpg.h	/^    int *tfo;$/;"	m	struct:__anon36	access:public
time_info	sis_header/atpg.h	/^    time_info_t *time_info;		\/* stores stats about execution time *\/$/;"	m	struct:__anon35	access:public
time_info_t	sis_header/atpg.h	/^} time_info_t;$/;"	t	typeref:struct:__anon33
time_struct	sis_header/delay.h	/^typedef struct time_struct {$/;"	s
time_struct::fall	sis_header/delay.h	/^    double fall;$/;"	m	struct:time_struct	access:public
time_struct::rise	sis_header/delay.h	/^    double rise;$/;"	m	struct:time_struct	access:public
timeout	sis_header/atpg.h	/^    int timeout;$/;"	m	struct:__anon32	access:public
timeout	sis_header/seqbdd.h	/^  int timeout;$/;"	m	struct:verif_options_t	access:public
times	sis_header/bdd.h	/^	unsigned int times;     \/* the number of times the garbage-collector has run *\/$/;"	m	struct:bdd_stats::__anon27	access:public
tmg_compute_optimal_clock	sis_header/atpg.h	/^extern double tmg_compute_optimal_clock();$/;"	p	signature:()
tmp	sis_header/atpg.h	/^    int tmp;$/;"	m	struct:__anon38	access:public
tmpfile	sis_header/util.h	/^extern FILE *popen(), *tmpfile();$/;"	p	signature:()
tmpfile	util/util.h	/^extern FILE *popen(), *tmpfile();$/;"	p	signature:()
to_node	sis_header/maxflow.h	/^    char **to_node;$/;"	m	struct:MF_CUTSET	access:public
total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon24	access:public
total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon25	access:public
total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon26	access:public
total	sis_header/bdd.h	/^	unsigned int total;$/;"	m	struct:bdd_stats::__anon28	access:public
total	sis_header/espresso.h	/^    int total;			\/* total number of transistors *\/$/;"	m	struct:cost_struct	access:public
total_set	sis_header/seqbdd.h	/^  bdd_t *total_set;			\/* should be computed by general stg traversal routine (read-only) *\/$/;"	m	struct:__anon10	access:public
total_time	sis_header/atpg.h	/^    long total_time;$/;"	m	struct:__anon33	access:public
total_time	sis_header/seqbdd.h	/^  int total_time;		 \/* total time since beginning of command *\/$/;"	m	struct:verif_options_t	access:public
totals	sis_header/espresso.h	/^\/* cvrmisc.c *\/	EXTERN void totals ARGS((long, int, pcover, pcost));$/;"	p	signature:(long, int, pcover, pcost)
trace	debug.h	46;"	d
trace	debug.h	49;"	d
trace	debug.h	58;"	d
trace	debug.h	69;"	d
trace	debug.h	74;"	d
transition	sis_header/clock.h	/^    int transition;		\/* RISE_TRANSITION or FALL_TRANSITION *\/$/;"	m	struct:clock_edge	access:public
transition_nodes	sis_header/seqbdd.h	/^  array_t *transition_nodes;		\/* nodes corresponding to (y_i == f_i(x)) for each i; product is trans relation *\/$/;"	m	struct:__anon9	access:public
transition_outputs	sis_header/seqbdd.h	/^  array_t *transition_outputs;		\/* for CONSISTENCY2 (one bdd_t per (y_i==f_i(x))) *\/$/;"	m	struct:__anon10	access:public
traverse_product_machine	sis_header/atpg.h	/^extern int traverse_product_machine();$/;"	p	signature:()
traverse_stg	sis_header/atpg.h	/^    long traverse_stg;$/;"	m	struct:__anon33	access:public
tree	sis_header/avl.h	/^    avl_tree *tree;$/;"	m	struct:avl_generator_struct	access:public
trivial	sis_header/bdd.h	/^	    unsigned int trivial;$/;"	m	struct:bdd_stats::__anon22::__anon23	access:public
true_id	sis_header/atpg.h	/^    int true_id;$/;"	m	struct:__anon38	access:public
true_state	sis_header/atpg.h	/^    unsigned *true_state;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
true_value	sis_header/atpg.h	/^    unsigned *true_value;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
type	bnetwork.h	/^	BNodeType type;$/;"	m	class:BNodeProperty	access:public
type	ignetwork.h	/^	IGEdgeType type;$/;"	m	class:IGEdgeProperty	access:public
type	ignetwork.h	/^	IGNodeType type;$/;"	m	class:IGNodeProperty	access:public
type	sis_header/atpg.h	/^    node_function_t type;$/;"	m	struct:atpg_sim_node_struct	access:public
type	sis_header/library.h	/^  int type; 			\/* type of gate -- lib_gate_type returns latch_synch_t *\/$/;"	m	struct:lib_gate_struct	access:public
type	sis_header/node.h	/^    node_type_t type;		\/* type of the node *\/$/;"	m	struct:node_struct	access:public
type	sis_header/retime.h	/^    re_node_type type;		\/* type of node *\/$/;"	m	struct:re_node	access:public
type	sis_header/seqbdd.h	/^  range_method_t   type;$/;"	m	struct:verif_options_t	access:public
type	sis_header/seqbdd.h	/^  range_method_t type;			\/* should always be computed *\/$/;"	m	struct:__anon10	access:public
uid	sis_header/atpg.h	/^    int             uid;$/;"	m	struct:atpg_sim_node_struct	access:public
ultrix2	sis_header/util.h	107;"	d
ultrix2	util/util.h	107;"	d
ultrix3	sis_header/util.h	105;"	d
ultrix3	util/util.h	105;"	d
ultrix4	sis_header/util.h	102;"	d
ultrix4	util/util.h	102;"	d
unate_compl	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pset_family unate_compl ARGS((pset_family));$/;"	p	signature:(pset_family)
unate_complement	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pset_family unate_complement ARGS((pset_family));$/;"	p	signature:(pset_family)
unate_intersect	sis_header/espresso.h	/^\/* unate.c *\/	EXTERN pset_family unate_intersect ARGS((pset_family, pset_family, bool));$/;"	p	signature:(pset_family, pset_family, bool)
uncof_output	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover uncof_output ARGS((pcover, int));$/;"	p	signature:(pcover, int)
undef1	sis_header/bdd.h	/^    char *undef1;$/;"	m	struct:bdd_external_hooks	access:public
undef1	sis_header/latch.h	/^    char *undef1;		\/* undefined 1, for the programer's use *\/$/;"	m	struct:latch_struct	access:public
undef1	sis_header/node.h	/^    char *undef1;		\/* undefined 1 *\/$/;"	m	struct:node_struct	access:public
undefine_cube_size	sis_header/node.h	/^EXTERN void undefine_cube_size ARGS((void));$/;"	p	signature:(void)
unmarkFaultyNodes	rewire.cpp	/^static inline void unmarkFaultyNodes(BNode *src) {$/;"	f	file:	signature:(BNode *src)
unravel	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover unravel ARGS((pcover, int));$/;"	p	signature:(pcover, int)
unravel_range	sis_header/espresso.h	/^\/* cvrm.c *\/	EXTERN pcover unravel_range ARGS((pcover, int, int));$/;"	p	signature:(pcover, int, int)
untested_faults	sis_header/atpg.h	/^    lsList untested_faults;$/;"	m	struct:__anon35	access:public
unused	sis_header/bdd.h	/^	unsigned int unused;$/;"	m	struct:bdd_stats::__anon25	access:public
unused	sis_header/bdd.h	/^	unsigned int unused;$/;"	m	struct:bdd_stats::__anon26	access:public
updateNodeMark	imply.cpp	/^inline void updateNodeMark(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
updateNodeMark	imply.noforced.cpp	/^inline void updateNodeMark(int mask, Array<IGNode *> &markedNodes) {$/;"	f	signature:(int mask, Array<IGNode *> &markedNodes)
upper_range	sis_header/clock.h	/^    double upper_range;         \/* Absolute deviation on upped side *\/$/;"	m	struct:clock_val	access:public
usage	array/arr_main.c	/^usage(prog)$/;"	f
use_cofactored_set	sis_header/atpg.h	/^extern void use_cofactored_set();$/;"	p	signature:()
use_internal_states	sis_header/atpg.h	/^    bool use_internal_states;$/;"	m	struct:__anon32	access:public
use_manual_order	sis_header/seqbdd.h	/^  int use_manual_order;		 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
used	sis_header/atpg.h	/^    int *used;				\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
used	sis_header/bdd.h	/^	unsigned int used;$/;"	m	struct:bdd_stats::__anon25	access:public
used	sis_header/bdd.h	/^	unsigned int used;$/;"	m	struct:bdd_stats::__anon26	access:public
user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:edge_struct	access:public
user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:graph_struct	access:public
user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:vertex_struct	access:public
user_time	sis_header/delay.h	/^    delay_time_t user_time;$/;"	m	struct:delay_pin_struct	access:public
user_time	sis_header/retime.h	/^    double user_time;		\/* Constraint on inputs and outputs wrt clock *\/$/;"	m	struct:re_node	access:public
user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_col_struct	access:public
user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_element_struct	access:public
user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_matrix_struct	access:public
user_word	sis_header/sparse.h	/^    char *user_word;		\/* user-defined word *\/$/;"	m	struct:sm_row_struct	access:public
util_cpu_time	sis_header/util.h	/^EXTERN long util_cpu_time ARGS((void));$/;"	p	signature:(void)
util_cpu_time	util/cpu_time.c	/^util_cpu_time()$/;"	f
util_cpu_time	util/util.h	/^EXTERN long util_cpu_time ARGS((void));$/;"	p	signature:(void)
util_do_nothing	sis_header/util.h	/^EXTERN int util_do_nothing ARGS((void));$/;"	p	signature:(void)
util_do_nothing	util/stub.c	/^util_do_nothing()$/;"	f
util_do_nothing	util/util.h	/^EXTERN int util_do_nothing ARGS((void));$/;"	p	signature:(void)
util_file_search	sis_header/util.h	/^EXTERN char *util_file_search ARGS((char *, char *, char *));$/;"	p	signature:(char *, char *, char *)
util_file_search	util/pathsearch.c	/^util_file_search(file, path, mode)$/;"	f
util_file_search	util/util.h	/^EXTERN char *util_file_search ARGS((char *, char *, char *));$/;"	p	signature:(char *, char *, char *)
util_getopt	sis_header/util.h	/^EXTERN int util_getopt ARGS((int, char **, char *));$/;"	p	signature:(int, char **, char *)
util_getopt	util/getopt.c	/^util_getopt(argc, argv, optstring)$/;"	f
util_getopt	util/util.h	/^EXTERN int util_getopt ARGS((int, char **, char *));$/;"	p	signature:(int, char **, char *)
util_getopt_reset	sis_header/util.h	/^EXTERN void util_getopt_reset ARGS((void));$/;"	p	signature:(void)
util_getopt_reset	util/getopt.c	/^util_getopt_reset()$/;"	f
util_getopt_reset	util/util.h	/^EXTERN void util_getopt_reset ARGS((void));$/;"	p	signature:(void)
util_optarg	util/getopt.c	/^char *util_optarg;	\/* Global argument pointer. *\/$/;"	v
util_optind	util/getopt.c	/^int util_optind = 0;	\/* Global argv index. *\/$/;"	v
util_path_search	sis_header/util.h	/^EXTERN char *util_path_search ARGS((char *));$/;"	p	signature:(char *)
util_path_search	util/pathsearch.c	/^util_path_search(prog)$/;"	f
util_path_search	util/util.h	/^EXTERN char *util_path_search ARGS((char *));$/;"	p	signature:(char *)
util_pipefork	sis_header/util.h	/^EXTERN int util_pipefork ARGS((char **, FILE **, FILE **, int *));$/;"	p	signature:(char **, FILE **, FILE **, int *)
util_pipefork	util/pipefork.c	/^util_pipefork(argv, toCommand, fromCommand, pid)$/;"	f
util_pipefork	util/util.h	/^EXTERN int util_pipefork ARGS((char **, FILE **, FILE **, int *));$/;"	p	signature:(char **, FILE **, FILE **, int *)
util_print_cpu_stats	sis_header/util.h	/^EXTERN void util_print_cpu_stats ARGS((FILE *));$/;"	p	signature:(FILE *)
util_print_cpu_stats	util/cpu_stats.c	/^util_print_cpu_stats(fp)$/;"	f
util_print_cpu_stats	util/util.h	/^EXTERN void util_print_cpu_stats ARGS((FILE *));$/;"	p	signature:(FILE *)
util_print_time	sis_header/util.h	/^EXTERN char *util_print_time ARGS((long));$/;"	p	signature:(long)
util_print_time	util/prtime.c	/^util_print_time(t)$/;"	f
util_print_time	util/util.h	/^EXTERN char *util_print_time ARGS((long));$/;"	p	signature:(long)
util_readblif	main.lib_test.c	/^int util_readblif(char *filename, network_t **net){$/;"	f	signature:(char *filename, network_t **net)
util_restart	util/restart.c	/^util_restart(old, new, interval)$/;"	f
util_restart_restore_state	util/state.c	/^util_restart_restore_state()$/;"	f
util_restart_save_state	util/state.c	/^util_restart_save_state()$/;"	f
util_restart_state	util/state.c	/^int util_restart_state[32];$/;"	v
util_save_image	sis_header/util.h	/^EXTERN int util_save_image ARGS((char *, char *));$/;"	p	signature:(char *, char *)
util_save_image	util/saveimage.c	/^util_save_image(orig_file_name, save_file_name)$/;"	f
util_save_image	util/util.h	/^EXTERN int util_save_image ARGS((char *, char *));$/;"	p	signature:(char *, char *)
util_save_sp	util/restart.c	/^char *util_save_sp;		\/* set by util_restart_save_state() *\/$/;"	v
util_strsav	sis_header/util.h	/^EXTERN char *util_strsav ARGS((char *));$/;"	p	signature:(char *)
util_strsav	util/strsav.c	/^util_strsav(s)$/;"	f
util_strsav	util/util.h	/^EXTERN char *util_strsav ARGS((char *));$/;"	p	signature:(char *)
util_tempnam	sis_header/util.h	/^EXTERN char *util_tempnam ARGS((char *, char *));$/;"	p	signature:(char *, char *)
util_tempnam	util/tmpfile.c	/^char *util_tempnam(dir, pfx)$/;"	f
util_tempnam	util/util.h	/^EXTERN char *util_tempnam ARGS((char *, char *));$/;"	p	signature:(char *, char *)
util_tilde_expand	sis_header/util.h	/^EXTERN char *util_tilde_expand ARGS((char *));$/;"	p	signature:(char *)
util_tilde_expand	util/texpand.c	/^util_tilde_expand(fname)$/;"	f
util_tilde_expand	util/util.h	/^EXTERN char *util_tilde_expand ARGS((char *));$/;"	p	signature:(char *)
util_tmpfile	sis_header/util.h	/^EXTERN FILE *util_tmpfile ARGS((void));$/;"	p	signature:(void)
util_tmpfile	util/tmpfile.c	/^util_tmpfile()$/;"	f
util_tmpfile	util/util.h	/^EXTERN FILE *util_tmpfile ARGS((void));$/;"	p	signature:(void)
valid_states_network	sis_header/atpg.h	/^    network_t *valid_states_network;$/;"	m	struct:__anon37	access:public
value	bnetwork.h	/^	int value;$/;"	m	class:BNodeProperty	access:public
value	sis_header/atpg.h	/^    unsigned        value;$/;"	m	struct:atpg_sim_node_struct	access:public
value	sis_header/atpg.h	/^    unsigned value;$/;"	m	struct:fault_pattern_struct	access:public
value	sis_header/atpg.h	/^  stuck_value_t value;$/;"	m	struct:fault_struct	access:public
value	sis_header/avl.h	/^    char *value;$/;"	m	struct:avl_node_struct	access:public
value	sis_header/clock.h	/^    clock_val_t value[2][2];    \/* Clock values ----- [i][j] *\/$/;"	m	struct:clock_struct	access:public
value	sis_header/espresso.h	/^    int value;$/;"	m	struct:pla_types_struct	access:public
value	sis_header/retime.h	/^    int value;		\/* initial value generated by the init_states *\/$/;"	m	struct:re_latch_t	access:public
var1	sis_header/enc.h	/^    int var1;           \/* first variable *\/$/;"	m	struct:cnf	access:public
var1	sis_header/espresso.h	/^    int *var1;$/;"	m	struct:pair_struct	access:public
var2	sis_header/enc.h	/^    int var2;           \/* second variable *\/$/;"	m	struct:cnf	access:public
var2	sis_header/espresso.h	/^    int *var2;$/;"	m	struct:pair_struct	access:public
var_mask	sis_header/espresso.h	/^    pset *var_mask;             \/* mask to extract a variable *\/$/;"	m	struct:cube_struct	access:public
var_order	sis_header/sat.h	/^    int	var_order;	\/* Variable ordering for branching *\/$/;"	m	struct:__anon4	access:public
var_set_and	sis_header/var_set.h	/^EXTERN var_set_t *var_set_and ARGS((var_set_t *, var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *, var_set_t *)
var_set_assign	sis_header/var_set.h	/^EXTERN var_set_t *var_set_assign ARGS((var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *)
var_set_clear	sis_header/var_set.h	/^EXTERN void       var_set_clear ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_clear_elt	sis_header/var_set.h	/^EXTERN void       var_set_clear_elt ARGS((var_set_t *, int));$/;"	p	signature:(var_set_t *, int)
var_set_cmp	sis_header/var_set.h	/^EXTERN int        var_set_cmp ARGS((char *, char *));$/;"	p	signature:(char *, char *)
var_set_copy	sis_header/var_set.h	/^EXTERN var_set_t *var_set_copy ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_equal	sis_header/var_set.h	/^EXTERN int        var_set_equal ARGS((var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *)
var_set_free	sis_header/var_set.h	/^EXTERN void       var_set_free ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_get_elt	sis_header/var_set.h	/^EXTERN int        var_set_get_elt ARGS((var_set_t *, int));$/;"	p	signature:(var_set_t *, int)
var_set_hash	sis_header/var_set.h	/^EXTERN unsigned int var_set_hash ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_intersect	sis_header/var_set.h	/^EXTERN int        var_set_intersect ARGS((var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *)
var_set_is_empty	sis_header/var_set.h	/^EXTERN int        var_set_is_empty ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_is_full	sis_header/var_set.h	/^EXTERN int        var_set_is_full ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_n_elts	sis_header/var_set.h	/^EXTERN int        var_set_n_elts ARGS((var_set_t *));$/;"	p	signature:(var_set_t *)
var_set_new	sis_header/var_set.h	/^EXTERN var_set_t *var_set_new ARGS((int));$/;"	p	signature:(int)
var_set_not	sis_header/var_set.h	/^EXTERN var_set_t *var_set_not ARGS((var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *)
var_set_or	sis_header/var_set.h	/^EXTERN var_set_t *var_set_or ARGS((var_set_t *, var_set_t *, var_set_t *));$/;"	p	signature:(var_set_t *, var_set_t *, var_set_t *)
var_set_print	sis_header/var_set.h	/^EXTERN void       var_set_print ARGS((FILE *, var_set_t *));$/;"	p	signature:(FILE *, var_set_t *)
var_set_set_elt	sis_header/var_set.h	/^EXTERN void       var_set_set_elt ARGS((var_set_t *, int));$/;"	p	signature:(var_set_t *, int)
var_set_struct	sis_header/var_set.h	/^typedef struct var_set_struct {$/;"	s
var_set_struct::data	sis_header/var_set.h	/^  unsigned int *data;$/;"	m	struct:var_set_struct	access:public
var_set_struct::n_elts	sis_header/var_set.h	/^  int n_elts;$/;"	m	struct:var_set_struct	access:public
var_set_struct::n_words	sis_header/var_set.h	/^  int n_words;$/;"	m	struct:var_set_struct	access:public
var_set_t	sis_header/var_set.h	/^} var_set_t;$/;"	t	typeref:struct:var_set_struct
var_table	sis_header/atpg.h	/^    st_table *var_table;		\/* used in justification *\/$/;"	m	struct:__anon37	access:public
var_zeros	sis_header/espresso.h	/^    int *var_zeros;             \/* count of zeros for each variable *\/$/;"	m	struct:cdata_struct	access:public
variable	sis_header/espresso.h	/^    int variable;$/;"	m	struct:symbolic_list_struct	access:public
vars_active	sis_header/espresso.h	/^    int vars_active;            \/* number of "active" variables *\/$/;"	m	struct:cdata_struct	access:public
vars_unate	sis_header/espresso.h	/^    int vars_unate;             \/* number of unate variables *\/$/;"	m	struct:cdata_struct	access:public
vectors	sis_header/atpg.h	/^    array_t *vectors;$/;"	m	struct:__anon31	access:public
verbose	sis_header/seqbdd.h	/^  int verbose;$/;"	m	struct:verif_options_t	access:public
verbosity	sis_header/atpg.h	/^    int verbosity;$/;"	m	struct:__anon32	access:public
verif_options_t	sis_header/seqbdd.h	/^struct verif_options_t {$/;"	s
verif_options_t	sis_header/seqbdd.h	/^typedef struct verif_options_t verif_options_t;$/;"	t	typeref:struct:verif_options_t
verif_options_t::alloc_range_data	sis_header/seqbdd.h	/^  seqbdd_range_f  *alloc_range_data;$/;"	m	struct:verif_options_t	access:public
verif_options_t::bdd_sizes	sis_header/seqbdd.h	/^  seqbdd_sizes_f  *bdd_sizes;$/;"	m	struct:verif_options_t	access:public
verif_options_t::check_output	sis_header/seqbdd.h	/^  seqbdd_check_f  *check_output;$/;"	m	struct:verif_options_t	access:public
verif_options_t::compute_next_states	sis_header/seqbdd.h	/^  seqbdd_next_f	  *compute_next_states;$/;"	m	struct:verif_options_t	access:public
verif_options_t::compute_reverse_image	sis_header/seqbdd.h	/^  seqbdd_reverse_f  *compute_reverse_image;$/;"	m	struct:verif_options_t	access:public
verif_options_t::does_verification	sis_header/seqbdd.h	/^  int does_verification;	 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::free_range_data	sis_header/seqbdd.h	/^  seqbdd_free_f	  *free_range_data;$/;"	m	struct:verif_options_t	access:public
verif_options_t::keep_old_network	sis_header/seqbdd.h	/^  int keep_old_network;		 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::last_time	sis_header/seqbdd.h	/^  int last_time;		 \/* last time the time was asked for *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::n_iter	sis_header/seqbdd.h	/^  int n_iter;			 \/* used for range_computation *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::n_partitions	sis_header/seqbdd.h	/^  int n_partitions;$/;"	m	struct:verif_options_t	access:public
verif_options_t::order_network	sis_header/seqbdd.h	/^  network_t *order_network;	 \/* network that specifies the order of PIPO to be used *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::order_network_name	sis_header/seqbdd.h	/^  char *order_network_name;$/;"	m	struct:verif_options_t	access:public
verif_options_t::ordering_depth	sis_header/seqbdd.h	/^  int ordering_depth;		 \/* use to limit the search in good ordering heuristic *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::output_info	sis_header/seqbdd.h	/^  output_info_t *output_info;$/;"	m	struct:verif_options_t	access:public
verif_options_t::sim_file	sis_header/seqbdd.h	/^  char *sim_file;                \/* file to save the simulation vectors in *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::stop_if_verify	sis_header/seqbdd.h	/^  int stop_if_verify;		 \/* if set, flip the return status of verify_fsm *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::timeout	sis_header/seqbdd.h	/^  int timeout;$/;"	m	struct:verif_options_t	access:public
verif_options_t::total_time	sis_header/seqbdd.h	/^  int total_time;		 \/* total time since beginning of command *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::type	sis_header/seqbdd.h	/^  range_method_t   type;$/;"	m	struct:verif_options_t	access:public
verif_options_t::use_manual_order	sis_header/seqbdd.h	/^  int use_manual_order;		 \/* 0\/1 *\/$/;"	m	struct:verif_options_t	access:public
verif_options_t::verbose	sis_header/seqbdd.h	/^  int verbose;$/;"	m	struct:verif_options_t	access:public
verified_red	sis_header/atpg.h	/^    int verified_red;$/;"	m	struct:__anon34	access:public
verify	sis_header/espresso.h	/^\/* verify.c *\/	EXTERN bool verify ARGS((pcover, pcover, pcover));$/;"	p	signature:(pcover, pcover, pcover)
vertex_struct	sis_header/graph.h	/^typedef struct vertex_struct {$/;"	s
vertex_struct::user_data	sis_header/graph.h	/^	gGeneric user_data;$/;"	m	struct:vertex_struct	access:public
vertex_t	sis_header/graph.h	/^} vertex_t;$/;"	t	typeref:struct:vertex_struct
visited	sis_header/atpg.h	/^    int 	    visited;$/;"	m	struct:atpg_sim_node_struct	access:public
visited	sis_header/atpg.h	/^    int visited;$/;"	m	struct:__anon38	access:public
void	sis_header/espresso.h	21;"	d
void	util/cpu_time.c	16;"	d	file:
weight	sis_header/extract.h	/^    SHORT weight;           \/* the weight of double-cube divisor *\/$/;"	m	struct:double_cube_divisor_struct	access:public
weight	sis_header/retime.h	/^    int weight;			\/* edge weight w(e) ie. number of registers *\/$/;"	m	struct:re_edge	access:public
weight_status	sis_header/extract.h	/^    UNSIGNED weight_status; \/* indicate the weight can be changed or not *\/$/;"	m	struct:double_cube_divisor_struct	access:public
word_vectors	sis_header/atpg.h	/^    array_t *word_vectors;		\/* tmp space - faultsim *\/$/;"	m	struct:__anon36	access:public
write_blif	sis_header/io.h	/^EXTERN void write_blif ARGS((FILE *, network_t *, int, int));$/;"	p	signature:(FILE *, network_t *, int, int)
write_blif_bnet	sis_interface.h	/^void *write_blif_bnet(BNetwork *network, char *filename);$/;"	p	signature:(BNetwork *network, char *filename)
write_eqn	sis_header/io.h	/^EXTERN void write_eqn ARGS((FILE *, network_t *, int));$/;"	p	signature:(FILE *, network_t *, int)
write_kiss	sis_header/io.h	/^EXTERN int write_kiss ARGS((FILE *, graph_t *));$/;"	p	signature:(FILE *, graph_t *)
write_pla	sis_header/io.h	/^EXTERN void write_pla ARGS((FILE *, network_t *));$/;"	p	signature:(FILE *, network_t *)
wsize	sis_header/espresso.h	/^    int wsize;                  \/* Size of each set in 'ints' *\/$/;"	m	struct:set_family	access:public
xnor_nodes	sis_header/seqbdd.h	/^  array_t *xnor_nodes;			\/* array of all xnor_nodes  (xnor of external outputs) *\/$/;"	m	struct:__anon9	access:public
younger	sis_header/mtr.h	/^    struct MtrNode *younger;$/;"	m	struct:MtrNode	typeref:struct:MtrNode::MtrNode	access:public
~Array	array.h	/^	~Array();$/;"	p	class:Array	access:public	signature:()
~Array	array.h	/^inline Array<T>::~Array() {$/;"	f	class:Array	signature:()
~BNetwork	bnetwork.h	/^	~BNetwork();$/;"	p	class:BNetwork	access:public	signature:()
~BNetwork	bnetwork.h	/^inline BNetwork::~BNetwork() {$/;"	f	class:BNetwork	signature:()
~BNodeProperty	bnetwork.h	/^	~BNodeProperty() {$/;"	f	class:BNodeProperty	access:public	signature:()
~Graph	graph.h	/^	~Graph();$/;"	p	class:Graph	access:public	signature:()
~Graph	graph.h	/^inline Graph<GP, NP, EP>::~Graph(){$/;"	f	class:Graph	signature:()
~IGAssociateProperty	bnetwork.h	/^	~IGAssociateProperty() { }; \/\/ do nothing$/;"	f	class:IGAssociateProperty	access:public	signature:()
~IGNetwork	ignetwork.h	/^	~IGNetwork();$/;"	p	class:IGNetwork	access:public	signature:()
~IGNetwork	ignetwork.h	/^inline IGNetwork::~IGNetwork() {$/;"	f	class:IGNetwork	signature:()
~Node	node.h	/^	~Node();$/;"	p	class:Node	access:public	signature:()
~Node	node.h	/^inline Node<NP, EP>::~Node(){$/;"	f	class:Node	signature:()
